# PySNMP SMI module. Autogenerated from smidump -f python TELINDUS-SMI
# by libsmi2pysnmp-0.1.3 at Tue Dec  8 22:23:46 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32", "enterprises")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Types

class EntryDeleteValues(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,)
    namedValues = NamedValues(("entrynoDelete", 0), ("entryDelete", 1), )
    
class EntryInstanceTypeValues(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("selectObject", 1), ("declareObject", 2), )
    
class FixedLengthTableActions(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,)
    namedValues = NamedValues(("clearAll", 1), ("clearRow", 3), )
    
class GlobalIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,65535)
    
class LocalIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,65535)
    
class ObjectRevision(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,65535)
    
class TableIndex(Unsigned32):
    pass

class VariableLengthTableActions(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,2,0,6,)
    namedValues = NamedValues(("deleteAll", 0), ("deleteRow", 2), ("insertRow", 5), ("appendRow", 6), )
    
class ContainmentPath(DisplayString):
    pass


# Objects

telindus = ModuleIdentity((1, 3, 6, 1, 4, 1, 776)).setRevisions(("2005-09-16 15:49",))
if mibBuilder.loadTexts: telindus.setOrganization("OneAccess")
if mibBuilder.loadTexts: telindus.setContactInfo("http://www.oneaccess-net.com/telindus/")
if mibBuilder.loadTexts: telindus.setDescription("...")
teliProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1))
remote_router = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1, 1)).setLabel("remote-router")
access_server = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1, 2)).setLabel("access-server")
crocusHDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1, 4))
crocusSDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1, 6))
tlsTrapRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 11))
tlsTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 776, 11, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsTrapDescription.setDescription("A textual description of the specific trap.\nThe description contains a list of object names\nstarting at the top object, down to the object\nthat generated the trap message, followed by\nthe names of the attribute and elements down\nto the name of the alarmbit that has changed\nfollowed by the name of the state that the\nalarmbit has become.\n\nThe names of objects are separated by a '/'.\nThe names of attribute and elements are\nseparated by a '.'.")
tlsSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 776, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsSeverityLevel.setDescription("A numerical value indicating the severity of\nstate of the managed device.\n\nThe information may be used to update the state\nof the managed device in the map.")
tlsTrapSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 776, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsTrapSeverityLevel.setDescription("A numerical value indicating the severity of\nthe trap send.\n\nThe information may be used to update the state\nof the managed device in the map.")
tlsCntTree = MibTable((1, 3, 6, 1, 4, 1, 776, 12))
if mibBuilder.loadTexts: tlsCntTree.setDescription("This table lists the containment path for each\ninstance of a MANAGED OBJECT. The value for the global index\nof the path description within this table is used as value for\nthe global index used as indexing field in all groups/tables.\nAn object is defined in a group if there only one instance of it\nwithin the containment tree of the device being managed, an object\nis defined in a table if more than one instance may occure within the\ncontainment tree of the device being managed.")
tlsCntTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 12, 1)).setIndexNames((0, "TELINDUS-SMI", "tlsCntTreeGlobalIndex"), (0, "TELINDUS-SMI", "tlsCntTreeLocalIndex"))
if mibBuilder.loadTexts: tlsCntTreeEntry.setDescription("")
tlsCntTreeGlobalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 2), GlobalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeGlobalIndex.setDescription("A unique value for each instance of a MANAGED OBJECT.\nThe value ranges from 0 up to 65536. The value for the\ntlsCntTreeGlobalIndex for each instance of a MANAGED OBJECT is\nkept constant after each re-initialisation if the configuration\nremains the same. If after a reconfiguration, the values of the\nglobal index are recalculated and remain stable until the next\nreconfiguration.")
tlsCntTreeLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 3), LocalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeLocalIndex.setDescription("Additional indexing field to differentiate object \ninstances found in the containment tree that share the same\nglobal index number.")
tlsCntTreeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 4), LocalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeIfIndex.setDescription("The value of the interface index assigned to this object.\nThis is non-zero for objects that are MIB-II interfaces.")
tlsCreateEntryOid = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlsCreateEntryOid.setDescription("A text (ascii) representation of the value of the\nvariable that is used as INDEX field for a new instance of the\nentry.")
tlsdeleteEntryOid = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 6), EntryDeleteValues()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlsdeleteEntryOid.setDescription("Writing entryDelete to this variable will delete this instance.")
tlsCntTreeInstanceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeInstanceValue.setDescription("A text (ascii) representation of the value of the\nvariable that is used as INDEX field for the instance of the\nentry.")
tlsCntTreePath = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreePath.setDescription("This variable contains the textual discription of the\npath for the instance of a MANAGED OBJECT.")
tlsCntTreeParentGlobalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 11), GlobalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeParentGlobalIndex.setDescription("The value of the GlobalIndex field of the instance of\nthe parent object of this managed object.")
tlsCntTreeParentLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 12), GlobalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeParentLocalIndex.setDescription("The value of the LocalIndex field of the instance of\nthe parent object of this managed object.")
tlsCntTreeRootNodeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeRootNodeIdentifier.setDescription("The value of the identifier that represents the root node\nfrom the private MIB when managing the device.")
tlsCntTreeObjectNodeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeObjectNodeIdentifier.setDescription("The value of the identifier that represents the top node\nof the object within a managed device.")
tlsCntTreeInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 12, 1, 15), EntryInstanceTypeValues()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsCntTreeInstanceType.setDescription("The instance type of this managed object.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("TELINDUS-SMI", PYSNMP_MODULE_ID=telindus)

# Types
mibBuilder.exportSymbols("TELINDUS-SMI", EntryDeleteValues=EntryDeleteValues, EntryInstanceTypeValues=EntryInstanceTypeValues, FixedLengthTableActions=FixedLengthTableActions, GlobalIndex=GlobalIndex, LocalIndex=LocalIndex, ObjectRevision=ObjectRevision, TableIndex=TableIndex, VariableLengthTableActions=VariableLengthTableActions, ContainmentPath=ContainmentPath)

# Objects
mibBuilder.exportSymbols("TELINDUS-SMI", telindus=telindus, teliProducts=teliProducts, remote_router=remote_router, access_server=access_server, crocusHDSL=crocusHDSL, crocusSDSL=crocusSDSL, tlsTrapRoot=tlsTrapRoot, tlsTrapDescription=tlsTrapDescription, tlsSeverityLevel=tlsSeverityLevel, tlsTrapSeverityLevel=tlsTrapSeverityLevel, tlsCntTree=tlsCntTree, tlsCntTreeEntry=tlsCntTreeEntry, tlsCntTreeGlobalIndex=tlsCntTreeGlobalIndex, tlsCntTreeLocalIndex=tlsCntTreeLocalIndex, tlsCntTreeIfIndex=tlsCntTreeIfIndex, tlsCreateEntryOid=tlsCreateEntryOid, tlsdeleteEntryOid=tlsdeleteEntryOid, tlsCntTreeInstanceValue=tlsCntTreeInstanceValue, tlsCntTreePath=tlsCntTreePath, tlsCntTreeParentGlobalIndex=tlsCntTreeParentGlobalIndex, tlsCntTreeParentLocalIndex=tlsCntTreeParentLocalIndex, tlsCntTreeRootNodeIdentifier=tlsCntTreeRootNodeIdentifier, tlsCntTreeObjectNodeIdentifier=tlsCntTreeObjectNodeIdentifier, tlsCntTreeInstanceType=tlsCntTreeInstanceType)

