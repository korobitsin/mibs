#
# PySNMP MIB module T1020v2-QUALMON (http://pysnmp.sf.net)
# ASN.1 source file:///opt/xee/dev/mibs/asn1/oneaccess/T1020v2-QUALMON
# Produced by pysmi-0.0.6 at Mon Jan 18 23:41:52 2016
# On host ubuntu platform Linux version 3.19.0-31-generic by user dkor
# Using Python version 2.7.9 (default, Apr  2 2015, 15:33:21) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( Ipv6AddressPrefix, Ipv6Address, ) = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6Address")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, IpAddress, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
( LocalIndex, tlsTrapDescription, VariableLengthTableActions, GlobalIndex, tlsCntTreeGlobalIndex, tlsSeverityLevel, TableIndex, ObjectRevision, FixedLengthTableActions, telindus, ContainmentPath, tlsTrapSeverityLevel, ) = mibBuilder.importSymbols("TELINDUS-SMI", "LocalIndex", "tlsTrapDescription", "VariableLengthTableActions", "GlobalIndex", "tlsCntTreeGlobalIndex", "tlsSeverityLevel", "TableIndex", "ObjectRevision", "FixedLengthTableActions", "telindus", "ContainmentPath", "tlsTrapSeverityLevel")
t1020RouterRootv2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 776, 1100))
if mibBuilder.loadTexts: t1020RouterRootv2.setLastUpdated('201410030325Z')
if mibBuilder.loadTexts: t1020RouterRootv2.setOrganization('OneAccess')
if mibBuilder.loadTexts: t1020RouterRootv2.setContactInfo('http://www.oneaccess-net.com/telindus/')
if mibBuilder.loadTexts: t1020RouterRootv2.setDescription('...')
t1020v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093))
t1020v2PRoutMOProp = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 1))
t1020v2PRoutMOPropEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 1, 1))
t1020v2PRoutMOPropPath = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 1, 1, 3), ContainmentPath()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1020v2PRoutMOPropPath.setDescription('Textual description of the containment tree from the instance of\r\n       the root object down to the instance of the current object.')
t1020v2PRoutMOPropRev = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 1, 1, 4), ObjectRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1020v2PRoutMOPropRev.setDescription('This value corresponds with the revision of the MANAGED OBJECT.')
et1020v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11))
et1020v2PRoutSendPortUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutSendPortUnreachable.setDescription("Path: router.editConf.sendPortUnreachable\r\n       Info: indicates if a ICMP Port Unreachable must be returned to a packet's source if\r\n                        the destination port is unknown\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
et1020v2PRoutSendAdminUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 56), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutSendAdminUnreachable.setDescription("Path: router.editConf.sendAdminUnreachable\r\n       Info: indicates if an ICMP can be returned to a packet's source if\r\n                        the packet is discarded\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
et1020v2PRoutSendHostUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutSendHostUnreachable.setDescription("Path: router.editConf.sendHostUnreachable\r\n       Info: indicates if a ICMP Host Unreachable must be returned to a packet's source if\r\n                        the destination host is unknown\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
et1020v2PRoutRipUpInt = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 35), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRipUpInt.setDescription('Path: router.editConf.ripUpdateInterval\r\n       Info: delay between RIP updates sent\r\n\r\n       Time in centi-second.')
et1020v2PRoutRipNeighbors = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 50))
et1020v2PRoutRipNeighborsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 50, 1), )
if mibBuilder.loadTexts: et1020v2PRoutRipNeighborsSSCTable.setDescription('rip neighbor table')
et1020v2PRoutRipNeighborsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 50, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutRipNeighborsTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutRipNeighborsEntry.setDescription('')
et1020v2PRoutRipNeighborsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 50, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRipNeighborsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutRipNeighborsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 50, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutRipNeighborsTableIx.setDescription('')
et1020v2PRoutRipNeighborsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 50, 1, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRipNeighborsIpAddress.setDescription('Path: router.editConf.ripNeighbors.ipAddress')
et1020v2PRoutMulticastRouting = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutMulticastRouting.setDescription('Path: router.editConf.multicastRouting\r\n       Info: indicates if multicast routing (PIM/IGMP) is supported\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
et1020v2PRoutSysSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutSysSecret.setDescription('Path: router.editConf.sysSecret\r\n       Info: gives our secret for PPP authentication')
et1020v2PRoutPppSecretTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 41))
et1020v2PRoutPppSecretTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 41, 1), )
if mibBuilder.loadTexts: et1020v2PRoutPppSecretTableSSCTable.setDescription('table to store secret values for PPP authentication')
et1020v2PRoutPppSecretTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 41, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutPppSecretTableTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutPppSecretTableEntry.setDescription('')
et1020v2PRoutPppSecretTableActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 41, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutPppSecretTableActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutPppSecretTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 41, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutPppSecretTableTableIx.setDescription('')
et1020v2PRoutPppSecretTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 41, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutPppSecretTableName.setDescription('Path: router.editConf.pppSecretTable.name')
et1020v2PRoutPppSecretTableSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 41, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutPppSecretTableSecret.setDescription('Path: router.editConf.pppSecretTable.secret')
et1020v2PRoutDhcpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51))
et1020v2PRoutDhcpStatSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1), )
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatSSCTable.setDescription('Initialisation DHCP server')
et1020v2PRoutDhcpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutDhcpStatTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatEntry.setDescription('')
et1020v2PRoutDhcpStatActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutDhcpStatTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatTableIx.setDescription('')
et1020v2PRoutDhcpStatIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatIpAddress.setDescription('Path: router.editConf.dhcpStatic.ipAddress')
et1020v2PRoutDhcpStatMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatMask.setDescription('Path: router.editConf.dhcpStatic.mask')
et1020v2PRoutDhcpStatGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatGateway.setDescription('Path: router.editConf.dhcpStatic.gateway')
et1020v2PRoutDhcpStatInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 268435456), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatInterface.setDescription('Path: router.editConf.dhcpStatic.interface')
et1020v2PRoutDhcpStatDnsSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 285212672), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("configured", 0), ("learned", 1), ("relay", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatDnsSetting.setDescription('Path: router.editConf.dhcpStatic.dnsSetting\r\n\r\n       Possibilities:\r\n               configured   (0)\r\n               learned   (1)\r\n               relay   (2)')
et1020v2PRoutDhcpStatNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatNameServer.setDescription('Path: router.editConf.dhcpStatic.nameServer')
et1020v2PRoutDhcpStatNameServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 234881024), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatNameServer2.setDescription('Path: router.editConf.dhcpStatic.nameServer2')
et1020v2PRoutDhcpStatTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 83886080), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatTftpServer.setDescription('Path: router.editConf.dhcpStatic.tftpServer')
et1020v2PRoutDhcpStatTftpServerOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 335544320), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatTftpServerOption.setDescription('Path: router.editConf.dhcpStatic.tftpServerOption')
et1020v2PRoutDhcpStatMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 100663296), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatMacAddress.setDescription('Path: router.editConf.dhcpStatic.macAddress\r\n\r\n       MAC address.')
et1020v2PRoutDhcpStatBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 117440512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatBootFile.setDescription('Path: router.editConf.dhcpStatic.bootFile')
et1020v2PRoutDhcpStatBootFileOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 352321536), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatBootFileOption.setDescription('Path: router.editConf.dhcpStatic.bootFileOption')
et1020v2PRoutDhcpStatHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 134217728), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatHostName.setDescription('Path: router.editConf.dhcpStatic.hostName')
et1020v2PRoutDhcpStatDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatDomainName.setDescription('Path: router.editConf.dhcpStatic.domainName')
et1020v2PRoutDhcpStatNetbiosNS = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 167772160), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatNetbiosNS.setDescription('Path: router.editConf.dhcpStatic.netbiosNameServer')
et1020v2PRoutDhcpStatNetbiosNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 251658240), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatNetbiosNS2.setDescription('Path: router.editConf.dhcpStatic.netbiosNameServer2')
et1020v2PRoutDhcpStatNetbiosNT = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 1, 1, 184549376), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4, 8,)).clone(namedValues=NamedValues(("nomnode", 0), ("bmnode", 1), ("pmnode", 2), ("mmnode", 4), ("hmnode", 8),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatNetbiosNT.setDescription('Path: router.editConf.dhcpStatic.netbiosNodeType\r\n\r\n       Possibilities:\r\n               no-node   (0)\r\n               B-node   (1)\r\n               P-node   (2)\r\n               M-node   (4)\r\n               H-node   (8)')
et1020v2PRoutDhcpStatOptions = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184), )
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptions.setDescription('')
et1020v2PRoutDhcpStatOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutDhcpStatTableIx"), (0, "T1020v2-QUALMON", "et1020v2PRoutDhcpStatOptionsTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsEntry.setDescription('')
et1020v2PRoutDhcpStatOptionsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutDhcpStatOptionsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsTableIx.setDescription('')
et1020v2PRoutDhcpStatOptionsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsCode.setDescription('Path: router.editConf.dhcpStatic.options.code')
et1020v2PRoutDhcpStatOptionsValueAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1, 33619968), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsValueAscii.setDescription('Path: router.editConf.dhcpStatic.options.value.ascii')
et1020v2PRoutDhcpStatOptionsValueDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1, 33685504), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsValueDecimal.setDescription('Path: router.editConf.dhcpStatic.options.value.decimal')
et1020v2PRoutDhcpStatOptionsValueHexData = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1, 33751040), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsValueHexData.setDescription('Path: router.editConf.dhcpStatic.options.value.hexData')
et1020v2PRoutDhcpStatOptionsValueIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 51, 402653184, 1, 33816576), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpStatOptionsValueIpAddress.setDescription('Path: router.editConf.dhcpStatic.options.value.ipAddress')
et1020v2PRoutDhcpDyn = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52))
et1020v2PRoutDhcpDynSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1), )
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynSSCTable.setDescription('Initialisation DHCP server')
et1020v2PRoutDhcpDynEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutDhcpDynTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynEntry.setDescription('')
et1020v2PRoutDhcpDynActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutDhcpDynTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynTableIx.setDescription('')
et1020v2PRoutDhcpDynIpcpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 301989888), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynIpcpSubnet.setDescription('Path: router.editConf.dhcpDynamic.ipcpSubnet')
et1020v2PRoutDhcpDynIpStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynIpStartAddress.setDescription('Path: router.editConf.dhcpDynamic.ipStartAddress')
et1020v2PRoutDhcpDynIpEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynIpEndAddress.setDescription('Path: router.editConf.dhcpDynamic.ipEndAddress')
et1020v2PRoutDhcpDynMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynMask.setDescription('Path: router.editConf.dhcpDynamic.mask')
et1020v2PRoutDhcpDynGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynGateway.setDescription('Path: router.editConf.dhcpDynamic.gateway')
et1020v2PRoutDhcpDynInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 268435456), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynInterface.setDescription('Path: router.editConf.dhcpDynamic.interface')
et1020v2PRoutDhcpDynDnsSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 285212672), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("configured", 0), ("learned", 1), ("relay", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynDnsSetting.setDescription('Path: router.editConf.dhcpDynamic.dnsSetting\r\n\r\n       Possibilities:\r\n               configured   (0)\r\n               learned   (1)\r\n               relay   (2)')
et1020v2PRoutDhcpDynNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 83886080), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynNameServer.setDescription('Path: router.editConf.dhcpDynamic.nameServer')
et1020v2PRoutDhcpDynNameServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 234881024), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynNameServer2.setDescription('Path: router.editConf.dhcpDynamic.nameServer2')
et1020v2PRoutDhcpDynTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 100663296), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynTftpServer.setDescription('Path: router.editConf.dhcpDynamic.tftpServer')
et1020v2PRoutDhcpDynTftpServerOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 335544320), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynTftpServerOption.setDescription('Path: router.editConf.dhcpDynamic.tftpServerOption')
et1020v2PRoutDhcpDynLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 117440512), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynLeaseTime.setDescription('Path: router.editConf.dhcpDynamic.leaseTime\r\n\r\n       Time in centi-second.')
et1020v2PRoutDhcpDynHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 134217728), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynHoldTime.setDescription('Path: router.editConf.dhcpDynamic.holdTime\r\n\r\n       Time in centi-second.')
et1020v2PRoutDhcpDynBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynBootFile.setDescription('Path: router.editConf.dhcpDynamic.bootFile')
et1020v2PRoutDhcpDynBootFileOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 352321536), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynBootFileOption.setDescription('Path: router.editConf.dhcpDynamic.bootFileOption')
et1020v2PRoutDhcpDynHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 167772160), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynHostName.setDescription('Path: router.editConf.dhcpDynamic.hostName')
et1020v2PRoutDhcpDynDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 184549376), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynDomainName.setDescription('Path: router.editConf.dhcpDynamic.domainName')
et1020v2PRoutDhcpDynNetbiosNS = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 201326592), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynNetbiosNS.setDescription('Path: router.editConf.dhcpDynamic.netbiosNameServer')
et1020v2PRoutDhcpDynNetbiosNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 251658240), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynNetbiosNS2.setDescription('Path: router.editConf.dhcpDynamic.netbiosNameServer2')
et1020v2PRoutDhcpDynNetbiosNT = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 1, 1, 218103808), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4, 8,)).clone(namedValues=NamedValues(("nomnode", 0), ("bmnode", 1), ("pmnode", 2), ("mmnode", 4), ("hmnode", 8),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynNetbiosNT.setDescription('Path: router.editConf.dhcpDynamic.netbiosNodeType\r\n\r\n       Possibilities:\r\n               no-node   (0)\r\n               B-node   (1)\r\n               P-node   (2)\r\n               M-node   (4)\r\n               H-node   (8)')
et1020v2PRoutDhcpDynOptions = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184), )
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptions.setDescription('')
et1020v2PRoutDhcpDynOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutDhcpDynTableIx"), (0, "T1020v2-QUALMON", "et1020v2PRoutDhcpDynOptionsTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsEntry.setDescription('')
et1020v2PRoutDhcpDynOptionsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutDhcpDynOptionsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsTableIx.setDescription('')
et1020v2PRoutDhcpDynOptionsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsCode.setDescription('Path: router.editConf.dhcpDynamic.options.code')
et1020v2PRoutDhcpDynOptionsValueAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1, 33619968), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsValueAscii.setDescription('Path: router.editConf.dhcpDynamic.options.value.ascii')
et1020v2PRoutDhcpDynOptionsValueDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1, 33685504), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsValueDecimal.setDescription('Path: router.editConf.dhcpDynamic.options.value.decimal')
et1020v2PRoutDhcpDynOptionsValueHexData = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1, 33751040), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsValueHexData.setDescription('Path: router.editConf.dhcpDynamic.options.value.hexData')
et1020v2PRoutDhcpDynOptionsValueIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 52, 402653184, 1, 33816576), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpDynOptionsValueIpAddress.setDescription('Path: router.editConf.dhcpDynamic.options.value.ipAddress')
et1020v2PRoutDhcpCheckAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 53), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("arpOnly", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpCheckAddress.setDescription('Path: router.editConf.dhcpCheckAddress\r\n       Info: Should the DCHP server check if the given address is free\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               arpOnly   (2)')
et1020v2PRoutDhcpCustomVendorId = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDhcpCustomVendorId.setDescription('Path: router.editConf.dhcpCustomVendorId\r\n       Info: custom-defined DCHP Vendor Id')
et1020v2PRoutQualMon = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77))
et1020v2PRoutQualMonSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 1))
et1020v2PRoutQualMonEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 1, 1))
et1020v2PRoutQualMonMonitor = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonMonitor.setDescription('Path: router.editConf.qualityMonitor.monitor\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
et1020v2PRoutQualMonType = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("sequential", 0), ("concurrent", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonType.setDescription('Path: router.editConf.qualityMonitor.type\r\n\r\n       Possibilities:\r\n               sequential   (0)\r\n               concurrent   (1)')
et1020v2PRoutQualMonDestinations = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648), )
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinations.setDescription('')
et1020v2PRoutQualMonDestinationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutQualMonDestinationsTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsEntry.setDescription('')
et1020v2PRoutQualMonDestinationsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutQualMonDestinationsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsTableIx.setDescription('')
et1020v2PRoutQualMonDestinationsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 234881024), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsName.setDescription('Path: router.editConf.qualityMonitor.destinations.name')
et1020v2PRoutQualMonDestinationsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 369098752), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("enabled", 1), ("onDemand", 2), ("disabled", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsAdminStatus.setDescription('Path: router.editConf.qualityMonitor.destinations.adminStatus\r\n\r\n       Possibilities:\r\n               enabled   (1)\r\n               onDemand   (2)\r\n               disabled   (3)')
et1020v2PRoutQualMonDestinationsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsIpAddress.setDescription('Path: router.editConf.qualityMonitor.destinations.ipAddress')
et1020v2PRoutQualMonDestinationsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsHostName.setDescription('Path: router.editConf.qualityMonitor.destinations.hostName')
et1020v2PRoutQualMonDestinationsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 184549376), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsSource.setDescription('Path: router.editConf.qualityMonitor.destinations.source')
et1020v2PRoutQualMonDestinationsTos = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 167772160), Integer32().subtype(subtypeSpec=SingleValueConstraint(32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsTos.setDescription('Path: router.editConf.qualityMonitor.destinations.tos\r\n\r\n       Possibilities:\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
et1020v2PRoutQualMonDestinationsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 218103808), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("queue1", 0), ("queue2", 1), ("queue3", 2), ("queue4", 3), ("queue5", 4), ("lowDelayQueue", 5), ("lowDelay2Queue", 6), ("systemQueue", 7),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsPriority.setDescription('Path: router.editConf.qualityMonitor.destinations.priority\r\n\r\n       Possibilities:\r\n               queue1   (0)\r\n               queue2   (1)\r\n               queue3   (2)\r\n               queue4   (3)\r\n               queue5   (4)\r\n               lowDelayQueue   (5)\r\n               lowDelay2Queue   (6)\r\n               systemQueue   (7)')
et1020v2PRoutQualMonDestinationsProtocolIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 50397184), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsProtocolIcmp.setDescription('Path: router.editConf.qualityMonitor.destinations.protocol.icmp')
et1020v2PRoutQualMonDestinationsProtocolUdpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 50462720), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsProtocolUdpEcho.setDescription('Path: router.editConf.qualityMonitor.destinations.protocol.udpEcho')
et1020v2PRoutQualMonDestinationsProtocolUdpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 50528256), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsProtocolUdpServerPort.setDescription('Path: router.editConf.qualityMonitor.destinations.protocol.udpServerPort')
et1020v2PRoutQualMonDestinationsTxInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 402653184), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsTxInterface.setDescription('Path: router.editConf.qualityMonitor.destinations.txInterface')
et1020v2PRoutQualMonDestinationsTxGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 419430400), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsTxGateway.setDescription('Path: router.editConf.qualityMonitor.destinations.txGateway')
et1020v2PRoutQualMonDestinationsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 67108864), Integer32()).setUnits('100msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsInterval.setDescription('Path: router.editConf.qualityMonitor.destinations.interval\r\n\r\n       unit name = 100msec')
et1020v2PRoutQualMonDestinationsTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 150994944), Integer32()).setUnits('100msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsTimeOut.setDescription('Path: router.editConf.qualityMonitor.destinations.timeOut\r\n\r\n       unit name = 100msec')
et1020v2PRoutQualMonDestinationsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLength.setDescription('Path: router.editConf.qualityMonitor.destinations.length')
et1020v2PRoutQualMonDestinationsIdleSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 268435456), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsIdleSamples.setDescription('Path: router.editConf.qualityMonitor.destinations.idleSamples')
et1020v2PRoutQualMonDestinationsLossAlarmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 100728832), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLossAlarmSamples.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.samples')
et1020v2PRoutQualMonDestinationsLossAlarmAlarmOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 100794368), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLossAlarmAlarmOn.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmOn')
et1020v2PRoutQualMonDestinationsLossAlarmAlarmOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 100859904), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLossAlarmAlarmOff.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmOff')
et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 100925440), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOn.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmUpOn')
et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 100990976), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOff.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmUpOff')
et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 101056512), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOn.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmDownOn')
et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 101122048), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOff.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmDownOff')
et1020v2PRoutQualMonDestinationsDelayAlarmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117506048), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmSamples.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.samples')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117571584), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayAvrgOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117637120), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayAvrgOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117702656), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMaxOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117768192), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMaxOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118095872), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMinMaxOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118161408), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMinMaxOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117833728), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterAvrgOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117899264), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterAvrgOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 117964800), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterMaxOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118030336), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterMaxOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118226944), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpAvrgOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118292480), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpAvrgOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118358016), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpMaxOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118423552), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpMaxOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118489088), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownAvrgOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118554624), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownAvrgOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118620160), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownMaxOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118685696), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownMaxOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118751232), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpAvrgOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118816768), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpAvrgOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118882304), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpMaxOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 118947840), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpMaxOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 119013376), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownAvrgOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 119078912), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownAvrgOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 119144448), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownMaxOn\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 119209984), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownMaxOff\r\n\r\n       unit name = msec')
et1020v2PRoutQualMonDestinationsAlarmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 251658240), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsAlarmMask.setDescription('Path: router.editConf.qualityMonitor.destinations.alarmMask\r\n\r\n       Bit meanings:\r\n               bit 0 = loss,\r\n               bit 1 = delayAvrg,\r\n               bit 2 = delayMax,\r\n               bit 3 = delayMinMax,\r\n               bit 4 = jitterAvrg,\r\n               bit 5 = jitterPosMax,\r\n               bit 6 = jitterNegMax,\r\n               bit 7 = lossUp,\r\n               bit 8 = jitterUpAvrg,\r\n               bit 9 = jitterUpPosMax,\r\n               bit 10 = jitterUpNegMax,\r\n               bit 11 = lossDown,\r\n               bit 12 = jitterDownAvrg,\r\n               bit 13 = jitterDownPosMax,\r\n               bit 14 = jitterDownNegMax,\r\n               bit 15 = delayUpAvrg,\r\n               bit 16 = delayUpMax,\r\n               bit 17 = delayDownAvrg,\r\n               bit 18 = delayDownMax')
et1020v2PRoutQualMonDestinationsLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 201326592), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 3, 5, 10, 15, 30, 60,)).clone(namedValues=NamedValues(("disabled", 0), ("s3min", 3), ("s5min", 5), ("s10min", 10), ("s15min", 15), ("s30min", 30), ("s60min", 60),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLogging.setDescription('Path: router.editConf.qualityMonitor.destinations.logging\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               3min   (3)\r\n               5min   (5)\r\n               10min   (10)\r\n               15min   (15)\r\n               30min   (30)\r\n               60min   (60)')
et1020v2PRoutQualMonDestinationsLoggingDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 50331648, 1, 503316480), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 8, 16, 32, 128, 512, 1024,)).clone(namedValues=NamedValues(("s4", 4), ("s8", 8), ("s16", 16), ("s32", 32), ("s128", 128), ("s512", 512), ("s1024", 1024),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonDestinationsLoggingDepth.setDescription('Path: router.editConf.qualityMonitor.destinations.loggingDepth\r\n\r\n       Possibilities:\r\n               4   (4)\r\n               8   (8)\r\n               16   (16)\r\n               32   (32)\r\n               128   (128)\r\n               512   (512)\r\n               1024   (1024)')
et1020v2PRoutQualMonUdpServerPort = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 67108864), )
if mibBuilder.loadTexts: et1020v2PRoutQualMonUdpServerPort.setDescription('')
et1020v2PRoutQualMonUdpServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 67108864, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutQualMonUdpServerPortTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutQualMonUdpServerPortEntry.setDescription('')
et1020v2PRoutQualMonUdpServerPortActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 67108864, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonUdpServerPortActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutQualMonUdpServerPortTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 67108864, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutQualMonUdpServerPortTableIx.setDescription('')
et1020v2PRoutQualMonUdpServerPortDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 67108864, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonUdpServerPortDestinationPort.setDescription('Path: router.editConf.qualityMonitor.udpServerPort.destinationPort')
et1020v2PRoutQualMonUdpServerPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 67108864, 1, 218103808), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("queue1", 0), ("queue2", 1), ("queue3", 2), ("queue4", 3), ("queue5", 4), ("lowDelayQueue", 5), ("lowDelay2Queue", 6), ("systemQueue", 7),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonUdpServerPortPriority.setDescription('Path: router.editConf.qualityMonitor.udpServerPort.priority\r\n\r\n       Possibilities:\r\n               queue1   (0)\r\n               queue2   (1)\r\n               queue3   (2)\r\n               queue4   (3)\r\n               queue5   (4)\r\n               lowDelayQueue   (5)\r\n               lowDelay2Queue   (6)\r\n               systemQueue   (7)')
et1020v2PRoutQualMonUdpServerPortTos = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 77, 67108864, 1, 167772160), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("keepTos", -1), ("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutQualMonUdpServerPortTos.setDescription('Path: router.editConf.qualityMonitor.udpServerPort.tos\r\n\r\n       Possibilities:\r\n               keepTos   (-1)\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
et1020v2PRoutHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 49))
et1020v2PRoutHostsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 49, 1), )
if mibBuilder.loadTexts: et1020v2PRoutHostsSSCTable.setDescription('table of hosts with their ip address')
et1020v2PRoutHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 49, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutHostsTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutHostsEntry.setDescription('')
et1020v2PRoutHostsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 49, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutHostsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutHostsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 49, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutHostsTableIx.setDescription('')
et1020v2PRoutHostsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 49, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutHostsHostname.setDescription('Path: router.editConf.hosts.hostname')
et1020v2PRoutHostsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 49, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutHostsIpAddress.setDescription('Path: router.editConf.hosts.ipAddress')
et1020v2PRoutDefaultRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 13))
et1020v2PRoutDefaultRouteSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 13, 1))
et1020v2PRoutDefaultRouteEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 13, 1, 1))
et1020v2PRoutDefaultRouteGateway = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 13, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDefaultRouteGateway.setDescription('Path: router.editConf.defaultRoute.gateway')
et1020v2PRoutDefaultRouteInterface = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 13, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDefaultRouteInterface.setDescription('Path: router.editConf.defaultRoute.interface')
et1020v2PRoutDefaultRoutePreference = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 13, 1, 1, 50331648), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDefaultRoutePreference.setDescription('Path: router.editConf.defaultRoute.preference')
et1020v2PRoutDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 13, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDefaultRouteMetric.setDescription('Path: router.editConf.defaultRoute.metric')
et1020v2PRoutRoutingTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14))
et1020v2PRoutRoutingTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1), )
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableSSCTable.setDescription('routingTable')
et1020v2PRoutRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutRoutingTableTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableEntry.setDescription('')
et1020v2PRoutRoutingTableActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutRoutingTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableTableIx.setDescription('')
et1020v2PRoutRoutingTableRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 117440512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableRemark.setDescription('Path: router.editConf.routingTable.remark')
et1020v2PRoutRoutingTableNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableNetwork.setDescription('Path: router.editConf.routingTable.network')
et1020v2PRoutRoutingTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableMask.setDescription('Path: router.editConf.routingTable.mask')
et1020v2PRoutRoutingTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableGateway.setDescription('Path: router.editConf.routingTable.gateway')
et1020v2PRoutRoutingTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 67108864), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableIf.setDescription('Path: router.editConf.routingTable.interface')
et1020v2PRoutRoutingTablePref = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTablePref.setDescription('Path: router.editConf.routingTable.preference')
et1020v2PRoutRoutingTableMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 100663296), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableMetric.setDescription('Path: router.editConf.routingTable.metric')
et1020v2PRoutRoutingTableProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableProxyArp.setDescription('Path: router.editConf.routingTable.proxyArp\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
et1020v2PRoutRoutingTableTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 14, 1, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingTableTimeWindow.setDescription('Path: router.editConf.routingTable.timeWindow')
et1020v2PRoutHelperProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 15))
et1020v2PRoutHelperProtocolsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 15, 1), )
if mibBuilder.loadTexts: et1020v2PRoutHelperProtocolsSSCTable.setDescription('list of protocols to be forwarded by the IP helpers')
et1020v2PRoutHelperProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 15, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutHelperProtocolsTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutHelperProtocolsEntry.setDescription('')
et1020v2PRoutHelperProtocolsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 15, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutHelperProtocolsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutHelperProtocolsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 15, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutHelperProtocolsTableIx.setDescription('')
et1020v2PRoutHelperProtocolsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 15, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutHelperProtocolsType.setDescription('Path: router.editConf.helperProtocols.protocol')
et1020v2PRoutSendTtlExceeded = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutSendTtlExceeded.setDescription("Path: router.editConf.sendTtlExceeded\r\n       Info: indicates if a ICMP TTL exceeded must be returned to a packet's spurce if the TTL reaches 0 \r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
et1020v2PRoutRoutingProtocol = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("none", 0), ("rip2", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRoutingProtocol.setDescription('Path: router.editConf.routingProtocol\r\n       Info: indicates which dynamic routing protocol should be used\r\n\r\n       Possibilities:\r\n               none   (0)\r\n               rip2   (1)')
et1020v2PRoutRipHoldDownTime = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 78), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRipHoldDownTime.setDescription('Path: router.editConf.ripHoldDownTime\r\n       Info: Time to wait before accepting better routes in order to prevent instable route-flapping\r\n\r\n       Time in centi-second.')
et1020v2PRoutAlarmMask = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 135), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAlarmMask.setDescription('Path: router.editConf.alarmMask\r\n       Info: routAlarmMask\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
et1020v2PRoutAlarmLev = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 170))
et1020v2PRoutAlarmLevSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 170, 1))
et1020v2PRoutAlarmLevEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 170, 1, 1))
et1020v2PRoutAlarmLevPingActive = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 170, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAlarmLevPingActive.setDescription('Path: router.editConf.alarmLevel.pingActive')
et1020v2PRoutAlarmLevQMonLoss = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 170, 1, 1, 33554432), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAlarmLevQMonLoss.setDescription('Path: router.editConf.alarmLevel.qMonLoss')
et1020v2PRoutAlarmLevQMonDelay = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 170, 1, 1, 50331648), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAlarmLevQMonDelay.setDescription('Path: router.editConf.alarmLevel.qMonDelay')
et1020v2PRoutAlarmLevQMonJitter = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 170, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAlarmLevQMonJitter.setDescription('Path: router.editConf.alarmLevel.qMonJitter')
et1020v2PRoutR2ScrtTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42))
et1020v2PRoutR2ScrtTblSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42, 1), )
if mibBuilder.loadTexts: et1020v2PRoutR2ScrtTblSSCTable.setDescription('table to store secret values for RIPv2 authentication')
et1020v2PRoutR2ScrtTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutR2ScrtTblTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutR2ScrtTblEntry.setDescription('')
et1020v2PRoutR2ScrtTblActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutR2ScrtTblActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutR2ScrtTblTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutR2ScrtTblTableIx.setDescription('')
et1020v2PRoutR2ScrtTblKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutR2ScrtTblKeyId.setDescription('Path: router.editConf.ripv2SecretTable.keyId')
et1020v2PRoutR2ScrtTblSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutR2ScrtTblSecret.setDescription('Path: router.editConf.ripv2SecretTable.secret')
et1020v2PRoutR2ScrtTblIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 42, 1, 1, 50331648), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutR2ScrtTblIf.setDescription('Path: router.editConf.ripv2SecretTable.interface')
et1020v2PRoutAlternativeRoutes = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 57), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("backup", 0), ("roundRobin", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAlternativeRoutes.setDescription('Path: router.editConf.alternativeRoutes\r\n       Info: indicates if load balancing has to be applied whenever multiple\r\n                        routes are available\r\n\r\n       Possibilities:\r\n               backup   (0)\r\n               roundRobin   (1)')
et1020v2PRoutRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59))
et1020v2PRoutRadiusSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1))
et1020v2PRoutRadiusEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1))
et1020v2PRoutRadiusAcctServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 1694564352), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAcctServerAddress.setDescription('Path: router.editConf.radius.acctServer.address')
et1020v2PRoutRadiusAcctServerSource = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 1694760960), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAcctServerSource.setDescription('Path: router.editConf.radius.acctServer.source')
et1020v2PRoutRadiusAcctServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 1694629888), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAcctServerSecret.setDescription('Path: router.editConf.radius.acctServer.secret')
et1020v2PRoutRadiusAcctServerEncModeSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 1694892032), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 128,)).clone(namedValues=NamedValues(("none", 1), ("encrypt", 2), ("encType1", 3), ("invalid", 128),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAcctServerEncModeSecret.setDescription('Path: router.editConf.radius.acctServer.encModeSecret\r\n\r\n       Possibilities:\r\n               none   (1)\r\n               encrypt   (2)\r\n               encType1   (3)\r\n               invalid   (128)')
et1020v2PRoutRadiusAcctServerEncSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 1694957568), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAcctServerEncSecret.setDescription('Path: router.editConf.radius.acctServer.encSecret')
et1020v2PRoutRadiusAcctServerTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 1694695424), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAcctServerTimeOut.setDescription('Path: router.editConf.radius.acctServer.timeOut\r\n\r\n       Time in centi-second.')
et1020v2PRoutRadiusRetries = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusRetries.setDescription('Path: router.editConf.radius.retries')
et1020v2PRoutRadiusAcctUpdate = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 33554432), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAcctUpdate.setDescription('Path: router.editConf.radius.acctUpdate\r\n\r\n       Time in centi-second.')
et1020v2PRoutRadiusLogin = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 50331648), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fallback", 2), ("reverseFallback", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusLogin.setDescription('Path: router.editConf.radius.login\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               fallback   (2)\r\n               reverseFallback   (3)')
et1020v2PRoutRadiusPpp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1, 1, 67108864), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusPpp.setDescription('Path: router.editConf.radius.ppp\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
et1020v2PRoutRadiusAuthServers = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600), )
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServers.setDescription('')
et1020v2PRoutRadiusAuthServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutRadiusAuthServersTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersEntry.setDescription('')
et1020v2PRoutRadiusAuthServersActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutRadiusAuthServersTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersTableIx.setDescription('')
et1020v2PRoutRadiusAuthServersAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersAddress.setDescription('Path: router.editConf.radius.authServers.address')
et1020v2PRoutRadiusAuthServersSource = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 67108864), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersSource.setDescription('Path: router.editConf.radius.authServers.source')
et1020v2PRoutRadiusAuthServersSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersSecret.setDescription('Path: router.editConf.radius.authServers.secret')
et1020v2PRoutRadiusAuthServersEncModeSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 128,)).clone(namedValues=NamedValues(("none", 1), ("encrypt", 2), ("encType1", 3), ("invalid", 128),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersEncModeSecret.setDescription('Path: router.editConf.radius.authServers.encModeSecret\r\n\r\n       Possibilities:\r\n               none   (1)\r\n               encrypt   (2)\r\n               encType1   (3)\r\n               invalid   (128)')
et1020v2PRoutRadiusAuthServersEncSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 117440512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersEncSecret.setDescription('Path: router.editConf.radius.authServers.encSecret')
et1020v2PRoutRadiusAuthServersTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 59, 1677721600, 1, 50331648), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutRadiusAuthServersTimeOut.setDescription('Path: router.editConf.radius.authServers.timeOut\r\n\r\n       Time in centi-second.')
et1020v2PRoutTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70))
et1020v2PRoutTacacsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 1))
et1020v2PRoutTacacsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 1, 1))
et1020v2PRoutTacacsLogin = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fallback", 2), ("reverseFallback", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsLogin.setDescription('Path: router.editConf.tacacs.login\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               fallback   (2)\r\n               reverseFallback   (3)')
et1020v2PRoutTacacsAuthServers = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216), )
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServers.setDescription('')
et1020v2PRoutTacacsAuthServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutTacacsAuthServersTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersEntry.setDescription('')
et1020v2PRoutTacacsAuthServersActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutTacacsAuthServersTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersTableIx.setDescription('')
et1020v2PRoutTacacsAuthServersAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersAddress.setDescription('Path: router.editConf.tacacs.authServers.address')
et1020v2PRoutTacacsAuthServersSource = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersSource.setDescription('Path: router.editConf.tacacs.authServers.source')
et1020v2PRoutTacacsAuthServersSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 50331648), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersSecret.setDescription('Path: router.editConf.tacacs.authServers.secret')
et1020v2PRoutTacacsAuthServersEncModeSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 128,)).clone(namedValues=NamedValues(("none", 1), ("encrypt", 2), ("encType1", 3), ("invalid", 128),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersEncModeSecret.setDescription('Path: router.editConf.tacacs.authServers.encModeSecret\r\n\r\n       Possibilities:\r\n               none   (1)\r\n               encrypt   (2)\r\n               encType1   (3)\r\n               invalid   (128)')
et1020v2PRoutTacacsAuthServersEncSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersEncSecret.setDescription('Path: router.editConf.tacacs.authServers.encSecret')
et1020v2PRoutTacacsAuthServersTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 70, 16777216, 1, 67108864), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutTacacsAuthServersTimeOut.setDescription('Path: router.editConf.tacacs.authServers.timeOut\r\n\r\n       Time in centi-second.')
et1020v2PRoutDns = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64))
et1020v2PRoutDnsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1))
et1020v2PRoutDnsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1))
et1020v2PRoutDnsPrimaryDns = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsPrimaryDns.setDescription('Path: router.editConf.dns.primaryDns')
et1020v2PRoutDnsSecondaryDns = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsSecondaryDns.setDescription('Path: router.editConf.dns.secondaryDns')
et1020v2PRoutDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1, 50331648), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsDomainName.setDescription('Path: router.editConf.dns.domainName')
et1020v2PRoutDnsIpV6Router = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1, 67108864), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsIpV6Router.setDescription('Path: router.editConf.dns.ipV6Router')
et1020v2PRoutDnsPreference = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsPreference.setDescription('Path: router.editConf.dns.preference')
et1020v2PRoutDnsProxy = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsProxy.setDescription('Path: router.editConf.dns.proxy\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
et1020v2PRoutDnsCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 64, 1, 1, 117440512), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsCacheSize.setDescription('Path: router.editConf.dns.cacheSize')
et1020v2PRoutLog = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 67))
et1020v2PRoutLogSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 67, 1))
et1020v2PRoutLogEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 67, 1, 1))
et1020v2PRoutLogMode = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 67, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutLogMode.setDescription('Path: router.editConf.log.mode\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
et1020v2PRoutLogDhcpSyslogMask = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 67, 1, 1, 33554432), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutLogDhcpSyslogMask.setDescription('Path: router.editConf.log.dhcpSyslogMask\r\n\r\n       Bit meanings:\r\n               bit 0 = lease,\r\n               bit 1 = renew,\r\n               bit 2 = rebind,\r\n               bit 3 = expired')
et1020v2PRoutAddrPools = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108))
et1020v2PRoutAddrPoolsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 1), )
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsSSCTable.setDescription('ip address pool union')
et1020v2PRoutAddrPoolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutAddrPoolsTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsEntry.setDescription('')
et1020v2PRoutAddrPoolsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutAddrPoolsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsTableIx.setDescription('')
et1020v2PRoutAddrPoolsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsName.setDescription('Path: router.editConf.addrPools.name')
et1020v2PRoutAddrPoolsPoolIntervalFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 1, 1, 33686016), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolIntervalFrom.setDescription('Path: router.editConf.addrPools.pool.interval.from')
et1020v2PRoutAddrPoolsPoolIntervalTo = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 1, 1, 33686272), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolIntervalTo.setDescription('Path: router.editConf.addrPools.pool.interval.to')
et1020v2PRoutAddrPoolsPoolList = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 33619968), )
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolList.setDescription('')
et1020v2PRoutAddrPoolsPoolListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 33619968, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutAddrPoolsTableIx"), (0, "T1020v2-QUALMON", "et1020v2PRoutAddrPoolsPoolListTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolListEntry.setDescription('')
et1020v2PRoutAddrPoolsPoolListActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 33619968, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolListActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutAddrPoolsPoolListTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 33619968, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolListTableIx.setDescription('')
et1020v2PRoutAddrPoolsPoolListLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 33619968, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolListLocal.setDescription('Path: router.editConf.addrPools.pool.list.local')
et1020v2PRoutAddrPoolsPoolListRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 33619968, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolListRemote.setDescription('Path: router.editConf.addrPools.pool.list.remote')
et1020v2PRoutAddrPoolsPoolListNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 108, 33619968, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutAddrPoolsPoolListNetMask.setDescription('Path: router.editConf.addrPools.pool.list.netMask')
et1020v2PRoutDnsUpdCli = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80))
et1020v2PRoutDnsUpdCliSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1), )
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliSSCTable.setDescription('DNS Update Client config table')
et1020v2PRoutDnsUpdCliEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "et1020v2PRoutDnsUpdCliTableIx"))
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliEntry.setDescription('')
et1020v2PRoutDnsUpdCliActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
et1020v2PRoutDnsUpdCliTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliTableIx.setDescription('')
et1020v2PRoutDnsUpdCliName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliName.setDescription('Path: router.editConf.dnsUpdateClient.name')
et1020v2PRoutDnsUpdCliDnsProvDynDnsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33620224), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disabled", 0), ("offline", 1), ("online", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsMode.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.mode\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               offline   (1)\r\n               online   (2)')
et1020v2PRoutDnsUpdCliDnsProvDynDnsSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33620480), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1), ("custom", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsSystem.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.system\r\n\r\n       Possibilities:\r\n               dynamic   (0)\r\n               static   (1)\r\n               custom   (2)')
et1020v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33620736), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.hostNameFqdn')
et1020v2PRoutDnsUpdCliDnsProvDynDnsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33620992), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsInterface.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.interface')
et1020v2PRoutDnsUpdCliDnsProvDynDnsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33621248), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsUserName.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.userName')
et1020v2PRoutDnsUpdCliDnsProvDynDnsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33621504), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsPassword.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.password')
et1020v2PRoutDnsUpdCliDnsProvDynDnsTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33621760), Integer32().subtype(subtypeSpec=SingleValueConstraint(80, 8245,)).clone(namedValues=NamedValues(("http", 80), ("httpProxyBypass", 8245),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsTcpPort.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.tcpPort\r\n\r\n       Possibilities:\r\n               http   (80)\r\n               httpProxyBypass   (8245)')
et1020v2PRoutDnsUpdCliDnsProvDynDnsMxName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33622017), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsMxName.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.mx.name')
et1020v2PRoutDnsUpdCliDnsProvDynDnsMxBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 11, 80, 1, 1, 33622018), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("no", 0), ("yes", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: et1020v2PRoutDnsUpdCliDnsProvDynDnsMxBackup.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.mx.backup\r\n\r\n       Possibilities:\r\n               no   (0)\r\n               yes   (1)')
st1020v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14))
st1020v2PRoutDhcpBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54))
st1020v2PRoutDhcpBindingSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingSSCTable.setDescription('table containing DHCP client information')
st1020v2PRoutDhcpBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDhcpBindingTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingEntry.setDescription('')
st1020v2PRoutDhcpBindingTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingTableIx.setDescription('')
st1020v2PRoutDhcpBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingIpAddress.setDescription('Path: router.status.dhcpBinding.ipAddress')
st1020v2PRoutDhcpBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 33554432), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingMacAddress.setDescription('Path: router.status.dhcpBinding.macAddress\r\n\r\n       MAC address.')
st1020v2PRoutDhcpBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 50331648), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingLeaseTime.setDescription('Path: router.status.dhcpBinding.leaseTime\r\n\r\n       Time in centi-second.')
st1020v2PRoutDhcpBindingHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingHostName.setDescription('Path: router.status.dhcpBinding.hostName')
st1020v2PRoutDhcpBindingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 100663296), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingInterface.setDescription('Path: router.status.dhcpBinding.interface')
st1020v2PRoutDhcpBindingState = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("onHold", 0), ("leased", 1), ("reserved", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingState.setDescription('Path: router.status.dhcpBinding.state\r\n\r\n       Possibilities:\r\n               onHold   (0)\r\n               leased   (1)\r\n               reserved   (2)')
st1020v2PRoutDhcpBindingCheckAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 54, 1, 1, 117440512), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("idle", 0), ("pending", 1), ("validated", 2), ("rejected", 3), ("skipped", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBindingCheckAddress.setDescription('Path: router.status.dhcpBinding.checkAddress\r\n\r\n       Possibilities:\r\n               idle   (0)\r\n               pending   (1)\r\n               validated   (2)\r\n               rejected   (3)\r\n               skipped   (4)')
st1020v2PRoutDhcpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55))
st1020v2PRoutDhcpStatSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatSSCTable.setDescription('DHCP statistics over addresses free, leased and in hold')
st1020v2PRoutDhcpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDhcpStatTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatEntry.setDescription('')
st1020v2PRoutDhcpStatTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatTableIx.setDescription('')
st1020v2PRoutDhcpStatStartRange = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatStartRange.setDescription('Path: router.status.dhcpStatistics.startRange')
st1020v2PRoutDhcpStatEndRange = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatEndRange.setDescription('Path: router.status.dhcpStatistics.endRange')
st1020v2PRoutDhcpStatInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1, 100663296), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatInterface.setDescription('Path: router.status.dhcpStatistics.interface')
st1020v2PRoutDhcpStatFree = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatFree.setDescription('Path: router.status.dhcpStatistics.free')
st1020v2PRoutDhcpStatLeased = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatLeased.setDescription('Path: router.status.dhcpStatistics.leased')
st1020v2PRoutDhcpStatHold = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 55, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpStatHold.setDescription('Path: router.status.dhcpStatistics.hold')
st1020v2PRoutDhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71))
st1020v2PRoutDhcpRelaySSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelaySSCTable.setDescription('dhcpRelayInfo')
st1020v2PRoutDhcpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDhcpRelayTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelayEntry.setDescription('')
st1020v2PRoutDhcpRelayTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelayTableIx.setDescription('')
st1020v2PRoutDhcpRelaySourceIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelaySourceIntf.setDescription('Path: router.status.dhcpRelayInfo.sourceIntf')
st1020v2PRoutDhcpRelayMac = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1, 33554432), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelayMac.setDescription('Path: router.status.dhcpRelayInfo.mac\r\n\r\n       MAC address.')
st1020v2PRoutDhcpRelayAssignedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelayAssignedIp.setDescription('Path: router.status.dhcpRelayInfo.assignedIp')
st1020v2PRoutDhcpRelayServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1, 67108864), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelayServerIp.setDescription('Path: router.status.dhcpRelayInfo.serverIp')
st1020v2PRoutDhcpRelayDhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("discover", 1), ("offer", 2), ("request", 3), ("decline", 4), ("ack", 5), ("nak", 6), ("release", 7), ("inform", 8), ("idle", 9),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelayDhcpStatus.setDescription('Path: router.status.dhcpRelayInfo.dhcpStatus\r\n\r\n       Possibilities:\r\n               discover   (1)\r\n               offer   (2)\r\n               request   (3)\r\n               decline   (4)\r\n               ack   (5)\r\n               nak   (6)\r\n               release   (7)\r\n               inform   (8)\r\n               idle   (9)')
st1020v2PRoutDhcpRelayLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 71, 1, 1, 117440512), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpRelayLeaseTime.setDescription('Path: router.status.dhcpRelayInfo.leaseTime\r\n\r\n       Time in centi-second.')
st1020v2PRoutDhcpBlacklist = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 75))
st1020v2PRoutDhcpBlacklistSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 75, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDhcpBlacklistSSCTable.setDescription('table containing DHCP Blacklist information')
st1020v2PRoutDhcpBlacklistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 75, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDhcpBlacklistTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDhcpBlacklistEntry.setDescription('')
st1020v2PRoutDhcpBlacklistTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 75, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDhcpBlacklistTableIx.setDescription('')
st1020v2PRoutDhcpBlacklistIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 75, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBlacklistIpAddress.setDescription('Path: router.status.dhcpBlacklist.ipAddress')
st1020v2PRoutDhcpBlacklistMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 75, 1, 1, 33554432), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBlacklistMacAddress.setDescription('Path: router.status.dhcpBlacklist.macAddress\r\n\r\n       MAC address.')
st1020v2PRoutDhcpBlacklistReason = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 75, 1, 1, 50331648), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("alienAck", 2), ("declined", 3), ("ping", 4), ("networkOrBroadcast", 5),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDhcpBlacklistReason.setDescription('Path: router.status.dhcpBlacklist.reason\r\n\r\n       Possibilities:\r\n               none   (0)\r\n               arp   (1)\r\n               alienAck   (2)\r\n               declined   (3)\r\n               ping   (4)\r\n               networkOrBroadcast   (5)')
st1020v2PRoutIgmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 58))
st1020v2PRoutIgmpTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 58, 1), )
if mibBuilder.loadTexts: st1020v2PRoutIgmpTableSSCTable.setDescription('igmpTable')
st1020v2PRoutIgmpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 58, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutIgmpTableTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutIgmpTableEntry.setDescription('')
st1020v2PRoutIgmpTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 58, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutIgmpTableTableIx.setDescription('')
st1020v2PRoutIgmpTableMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 58, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutIgmpTableMulticast.setDescription('Path: router.status.igmpTable.multicast')
st1020v2PRoutIgmpTableMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 58, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutIgmpTableMembers.setDescription('Path: router.status.igmpTable.members')
st1020v2PRoutIgmpTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 58, 1, 1, 33554432), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutIgmpTableIf.setDescription('Path: router.status.igmpTable.interface')
st1020v2PRoutInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199))
st1020v2PRoutInterfacesSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1), )
if mibBuilder.loadTexts: st1020v2PRoutInterfacesSSCTable.setDescription('info on routing interfaces')
st1020v2PRoutInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutInterfacesTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutInterfacesEntry.setDescription('')
st1020v2PRoutInterfacesTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutInterfacesTableIx.setDescription('')
st1020v2PRoutInterfacesIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1, 1694498816), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesIfDescr.setDescription('Path: router.status.interfaces.ifDescr')
st1020v2PRoutInterfacesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1, 1711276032), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,), SingleValueConstraint(256, 257,))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnmx25", 4), ("rfc877mx25", 5), ("ethernetmcsmacd", 6), ("iso88023mcsmacd", 7), ("iso88024mtokenBus", 8), ("iso88025mtokenRing", 9), ("is088026mman", 10), ("starlan", 11), ("proteonm10Mbit", 12), ("proteonm80Mbit", 13), ("hyperChannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernetm3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("framemrelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54), ("ieee80212", 55), ("fibreChannel", 56), ("hippiInterface", 57), ("frameRelayInterconnect", 58), ("aflane8023", 59), ("aflane8025", 60), ("cctEmul", 61), ("fastEther", 62), ("isdn", 63), ("v11", 64), ("v36", 65), ("g703at64k", 66), ("g703at2mb", 67), ("qllc", 68), ("fastEtherFX", 69), ("channel", 70), ("ieee80211", 71), ("ibm370parChan", 72), ("escon", 73), ("dlsw", 74), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ipSwitch", 78), ("rsrb", 79), ("atmmlogical", 80), ("ds0", 81), ("ds0Bundle", 82), ("bsc", 83), ("async", 84), ("cnr", 85), ("iso88025Dtr", 86), ("eplrs", 87), ("arap", 88), ("propCnls", 89), ("hostPad", 90), ("termPad", 91), ("frameRelayMPI", 92), ("x213", 93), ("adsl", 94), ("radsl", 95), ("sdsl", 96), ("vdsl", 97), ("iso88025CRFPInt", 98), ("myrinet", 99), ("voiceEM", 100), ("voiceFXO", 101), ("voiceFXS", 102), ("voiceEncap", 103), ("voiceOverIp", 104), ("atmDxi", 105), ("atmFuni", 106), ("atmIma", 107), ("pppMultilinkBundle", 108), ("ipOverCdlc", 109), ("ipOverClaw", 110), ("stackToStack", 111), ("virtualIpAddress", 112), ("mpc", 113), ("ipOverAtm", 114), ("iso88025Fiber", 115), ("tdlc", 116), ("gigabitEthernet", 117), ("hdlc", 118), ("lapf", 119), ("v37", 120), ("x25mlp", 121), ("x25huntGroup", 122), ("trasnpHdlc", 123), ("interleave", 124), ("fast", 125), ("ip", 126), ("docsCableMaclayer", 127), ("docsCableDownstream", 128), ("docsCableUpstream", 129), ("a12MppSwitch", 130), ("tunnel", 131), ("coffee", 132), ("ces", 133), ("atmSubInterface", 134), ("l2vlan", 135), ("l3ipvlan", 136), ("l3ipxvlan", 137), ("digitalPowerline", 138), ("mediaMailOverIp", 139), ("dtm", 140), ("dcn", 141), ("ipForward", 142), ("msdsl", 143), ("ieee1394", 144), ("ifmgsn", 145), ("dvbRccMacLayer", 146), ("dvbRccDownstream", 147), ("dvbRccUpstream", 148), ("atmVirtual", 149), ("mplsTunnel", 150), ("srp", 151), ("voiceOverAtm", 152), ("voiceOverFrameRelay", 153), ("idsl", 154), ("compositeLink", 155), ("ss7SigLink", 156), ("propWirelessP2P", 157), ("frForward", 158), ("rfc1483", 159), ("usb", 160), ("ieee8023adLag", 161), ("bgppolicyaccounting", 162), ("frf16MfrBundle", 163), ("h323Gatekeeper", 164), ("h323Proxy", 165), ("mpls", 166), ("mfSigLink", 167), ("hdsl2", 168), ("shdsl", 169), ("ds1FDL", 170), ("pos", 171), ("dvbAsiIn", 172), ("dvbAsiOut", 173), ("plc", 174), ("nfas", 175), ("tr008", 176), ("gr303RDT", 177), ("gr303IDT", 178), ("isup", 179), ("propDocsWirelessMaclayer", 180), ("propDocsWirelessDownstream", 181), ("propDocsWirelessUpstream", 182), ("hiperlan2", 183), ("propBWAp2Mp", 184), ("sonetOverheadChannel", 185), ("digitalWrapperOverheadChannel", 186), ("aal2", 187), ("radioMAC", 188), ("atmRadio", 189), ("imt", 190), ("mvl", 191), ("reachDSL", 192), ("frDlciEndPt", 193), ("atmVciEndPt", 194), ("opticalChannel", 195), ("opticalTransport", 196), ("propAtm", 197), ("voiceOverCable", 198), ("infiniband", 199), ("teLink", 200), ("q2931", 201), ("virtualTg", 202), ("sipTg", 203), ("sipSig", 204), ("docsCableUpstreamChannel", 205), ("econet", 206), ("pon155", 207), ("pon622", 208), ("bridge", 209), ("linegroup", 210), ("voiceEMFGD", 211), ("voiceFGDEANA", 212), ("voiceDID", 213), ("mpegTransport", 214), ("sixToFour", 215), ("gtp", 216), ("pdnEtherLoop1", 217), ("pdnEtherLoop2", 218), ("opticalChannelGroup", 219), ("homepna", 220), ("gfp", 221), ("ciscoISLvlan", 222), ("actelisMetaLOOP", 223), ("fcipLink", 224), ("rpr", 225), ("qam", 226), ("lmp", 227), ("cblVectaStar", 228), ("docsCableMCmtsDownstream", 229), ("adsl2", 230), ("macSecControlledIF", 231), ("macSecUncontrolledIF", 232), ("aviciOpticalEther", 233), ("atmbond", 234), ("voiceFGDOS", 235), ("mocaVersion1", 236), ("ieee80216WMAN", 237), ("adsl2plus", 238), ("dvbRcsMacLayer", 239), ("dvbTdm", 240), ("dvbRcsTdma", 241), ("x86Laps", 242), ("wwanPP", 243), ("wwanPP2", 244), ("voiceEBS", 245), ("ifPwType", 246), ("ilan", 247), ("pip", 248), ("aluELP", 249), ("gpon", 250), ("vdsl2", 251), ("capwapDot11Profile", 252), ("capwapDot11Bss", 253), ("capwapWtpVirtualRadio", 254), ("bits", 255),) + NamedValues(("docsCableUpstreamRfPort", 256), ("cableDownstreamRfPort", 257),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesIfType.setDescription('Path: router.status.interfaces.ifType\r\n\r\n       Possibilities:\r\n               other   (1)\r\n               regular1822   (2)\r\n               hdh1822   (3)\r\n               ddn-x25   (4)\r\n               rfc877-x25   (5)\r\n               ethernet-csmacd   (6)\r\n               iso88023-csmacd   (7)\r\n               iso88024-tokenBus   (8)\r\n               iso88025-tokenRing   (9)\r\n               is088026-man   (10)\r\n               starlan   (11)\r\n               proteon-10Mbit   (12)\r\n               proteon-80Mbit   (13)\r\n               hyperChannel   (14)\r\n               fddi   (15)\r\n               lapb   (16)\r\n               sdlc   (17)\r\n               ds1   (18)\r\n               e1   (19)\r\n               basicISDN   (20)\r\n               primaryISDN   (21)\r\n               propPointToPointSerial   (22)\r\n               ppp   (23)\r\n               softwareLoopback   (24)\r\n               eon   (25)\r\n               ethernet-3Mbit   (26)\r\n               nsip   (27)\r\n               slip   (28)\r\n               ultra   (29)\r\n               ds3   (30)\r\n               sip   (31)\r\n               frame-relay   (32)\r\n               rs232   (33)\r\n               para   (34)\r\n               arcnet   (35)\r\n               arcnetPlus   (36)\r\n               atm   (37)\r\n               miox25   (38)\r\n               sonet   (39)\r\n               x25ple   (40)\r\n               iso88022llc   (41)\r\n               localTalk   (42)\r\n               smdsDxi   (43)\r\n               frameRelayService   (44)\r\n               v35   (45)\r\n               hssi   (46)\r\n               hippi   (47)\r\n               modem   (48)\r\n               aal5   (49)\r\n               sonetPath   (50)\r\n               sonetVT   (51)\r\n               smdsIcip   (52)\r\n               propVirtual   (53)\r\n               propMultiplexor   (54)\r\n               ieee80212   (55)\r\n               fibreChannel   (56)\r\n               hippiInterface   (57)\r\n               frameRelayInterconnect   (58)\r\n               aflane8023   (59)\r\n               aflane8025   (60)\r\n               cctEmul   (61)\r\n               fastEther   (62)\r\n               isdn   (63)\r\n               v11   (64)\r\n               v36   (65)\r\n               g703at64k   (66)\r\n               g703at2mb   (67)\r\n               qllc   (68)\r\n               fastEtherFX   (69)\r\n               channel   (70)\r\n               ieee80211   (71)\r\n               ibm370parChan   (72)\r\n               escon   (73)\r\n               dlsw   (74)\r\n               isdns   (75)\r\n               isdnu   (76)\r\n               lapd   (77)\r\n               ipSwitch   (78)\r\n               rsrb   (79)\r\n               atm-logical   (80)\r\n               ds0   (81)\r\n               ds0Bundle   (82)\r\n               bsc   (83)\r\n               async   (84)\r\n               cnr   (85)\r\n               iso88025Dtr   (86)\r\n               eplrs   (87)\r\n               arap   (88)\r\n               propCnls   (89)\r\n               hostPad   (90)\r\n               termPad   (91)\r\n               frameRelayMPI   (92)\r\n               x213   (93)\r\n               adsl   (94)\r\n               radsl   (95)\r\n               sdsl   (96)\r\n               vdsl   (97)\r\n               iso88025CRFPInt   (98)\r\n               myrinet   (99)\r\n               voiceEM   (100)\r\n               voiceFXO   (101)\r\n               voiceFXS   (102)\r\n               voiceEncap   (103)\r\n               voiceOverIp   (104)\r\n               atmDxi   (105)\r\n               atmFuni   (106)\r\n               atmIma   (107)\r\n               pppMultilinkBundle   (108)\r\n               ipOverCdlc   (109)\r\n               ipOverClaw   (110)\r\n               stackToStack   (111)\r\n               virtualIpAddress   (112)\r\n               mpc   (113)\r\n               ipOverAtm   (114)\r\n               iso88025Fiber   (115)\r\n               tdlc   (116)\r\n               gigabitEthernet   (117)\r\n               hdlc   (118)\r\n               lapf   (119)\r\n               v37   (120)\r\n               x25mlp   (121)\r\n               x25huntGroup   (122)\r\n               trasnpHdlc   (123)\r\n               interleave   (124)\r\n               fast   (125)\r\n               ip   (126)\r\n               docsCableMaclayer   (127)\r\n               docsCableDownstream   (128)\r\n               docsCableUpstream   (129)\r\n               a12MppSwitch   (130)\r\n               tunnel   (131)\r\n               coffee   (132)\r\n               ces   (133)\r\n               atmSubInterface   (134)\r\n               l2vlan   (135)\r\n               l3ipvlan   (136)\r\n               l3ipxvlan   (137)\r\n               digitalPowerline   (138)\r\n               mediaMailOverIp   (139)\r\n               dtm   (140)\r\n               dcn   (141)\r\n               ipForward   (142)\r\n               msdsl   (143)\r\n               ieee1394   (144)\r\n               if-gsn   (145)\r\n               dvbRccMacLayer   (146)\r\n               dvbRccDownstream   (147)\r\n               dvbRccUpstream   (148)\r\n               atmVirtual   (149)\r\n               mplsTunnel   (150)\r\n               srp   (151)\r\n               voiceOverAtm   (152)\r\n               voiceOverFrameRelay   (153)\r\n               idsl   (154)\r\n               compositeLink   (155)\r\n               ss7SigLink   (156)\r\n               propWirelessP2P   (157)\r\n               frForward   (158)\r\n               rfc1483   (159)\r\n               usb   (160)\r\n               ieee8023adLag   (161)\r\n               bgppolicyaccounting   (162)\r\n               frf16MfrBundle   (163)\r\n               h323Gatekeeper   (164)\r\n               h323Proxy   (165)\r\n               mpls   (166)\r\n               mfSigLink   (167)\r\n               hdsl2   (168)\r\n               shdsl   (169)\r\n               ds1FDL   (170)\r\n               pos   (171)\r\n               dvbAsiIn   (172)\r\n               dvbAsiOut   (173)\r\n               plc   (174)\r\n               nfas   (175)\r\n               tr008   (176)\r\n               gr303RDT   (177)\r\n               gr303IDT   (178)\r\n               isup   (179)\r\n               propDocsWirelessMaclayer   (180)\r\n               propDocsWirelessDownstream   (181)\r\n               propDocsWirelessUpstream   (182)\r\n               hiperlan2   (183)\r\n               propBWAp2Mp   (184)\r\n               sonetOverheadChannel   (185)\r\n               digitalWrapperOverheadChannel   (186)\r\n               aal2   (187)\r\n               radioMAC   (188)\r\n               atmRadio   (189)\r\n               imt   (190)\r\n               mvl   (191)\r\n               reachDSL   (192)\r\n               frDlciEndPt   (193)\r\n               atmVciEndPt   (194)\r\n               opticalChannel   (195)\r\n               opticalTransport   (196)\r\n               propAtm   (197)\r\n               voiceOverCable   (198)\r\n               infiniband   (199)\r\n               teLink   (200)\r\n               q2931   (201)\r\n               virtualTg   (202)\r\n               sipTg   (203)\r\n               sipSig   (204)\r\n               docsCableUpstreamChannel   (205)\r\n               econet   (206)\r\n               pon155   (207)\r\n               pon622   (208)\r\n               bridge   (209)\r\n               linegroup   (210)\r\n               voiceEMFGD   (211)\r\n               voiceFGDEANA   (212)\r\n               voiceDID   (213)\r\n               mpegTransport   (214)\r\n               sixToFour   (215)\r\n               gtp   (216)\r\n               pdnEtherLoop1   (217)\r\n               pdnEtherLoop2   (218)\r\n               opticalChannelGroup   (219)\r\n               homepna   (220)\r\n               gfp   (221)\r\n               ciscoISLvlan   (222)\r\n               actelisMetaLOOP   (223)\r\n               fcipLink   (224)\r\n               rpr   (225)\r\n               qam   (226)\r\n               lmp   (227)\r\n               cblVectaStar   (228)\r\n               docsCableMCmtsDownstream   (229)\r\n               adsl2   (230)\r\n               macSecControlledIF   (231)\r\n               macSecUncontrolledIF   (232)\r\n               aviciOpticalEther   (233)\r\n               atmbond   (234)\r\n               voiceFGDOS   (235)\r\n               mocaVersion1   (236)\r\n               ieee80216WMAN   (237)\r\n               adsl2plus   (238)\r\n               dvbRcsMacLayer   (239)\r\n               dvbTdm   (240)\r\n               dvbRcsTdma   (241)\r\n               x86Laps   (242)\r\n               wwanPP   (243)\r\n               wwanPP2   (244)\r\n               voiceEBS   (245)\r\n               ifPwType   (246)\r\n               ilan   (247)\r\n               pip   (248)\r\n               aluELP   (249)\r\n               gpon   (250)\r\n               vdsl2   (251)\r\n               capwapDot11Profile   (252)\r\n               capwapDot11Bss   (253)\r\n               capwapWtpVirtualRadio   (254)\r\n               bits   (255)\r\n               docsCableUpstreamRfPort   (256)\r\n               cableDownstreamRfPort   (257)')
st1020v2PRoutInterfacesIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1, 1795162112), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesIfOperStatus.setDescription('Path: router.status.interfaces.ifOperStatus\r\n\r\n       Possibilities:\r\n               up   (1)\r\n               down   (2)\r\n               testing   (3)\r\n               unknown   (4)\r\n               dormant   (5)\r\n               notPresent   (6)\r\n               lowerLayerDown   (7)')
st1020v2PRoutInterfacesIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1, 1811939328), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesIfLastChange.setDescription('Path: router.status.interfaces.ifLastChange\r\n\r\n       Time in centi-second.')
st1020v2PRoutInterfacesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1, 2030043136), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesAddress.setDescription('Path: router.status.interfaces.address')
st1020v2PRoutInterfacesMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 1, 1, 2063597568), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesMask.setDescription('Path: router.status.interfaces.mask')
st1020v2PRoutInterfacesSecondaryIp = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 385875968), )
if mibBuilder.loadTexts: st1020v2PRoutInterfacesSecondaryIp.setDescription('')
st1020v2PRoutInterfacesSecondaryIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 385875968, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutInterfacesTableIx"), (0, "T1020v2-QUALMON", "st1020v2PRoutInterfacesSecondaryIpTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutInterfacesSecondaryIpEntry.setDescription('')
st1020v2PRoutInterfacesSecondaryIpTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 385875968, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutInterfacesSecondaryIpTableIx.setDescription('')
st1020v2PRoutInterfacesSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 385875968, 1, 2030043136), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesSecondaryIpAddress.setDescription('Path: router.status.interfaces.secondaryIp.address')
st1020v2PRoutInterfacesSecondaryIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 199, 385875968, 1, 2063597568), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutInterfacesSecondaryIpNetMask.setDescription('Path: router.status.interfaces.secondaryIp.netMask')
st1020v2PRoutRoutingTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32))
st1020v2PRoutRoutingTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1), )
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableSSCTable.setDescription('routingTable')
st1020v2PRoutRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutRoutingTableTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableEntry.setDescription('')
st1020v2PRoutRoutingTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableTableIx.setDescription('')
st1020v2PRoutRoutingTableNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableNetwork.setDescription('Path: router.status.routingTable.network')
st1020v2PRoutRoutingTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableMask.setDescription('Path: router.status.routingTable.mask')
st1020v2PRoutRoutingTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableGateway.setDescription('Path: router.status.routingTable.gateway')
st1020v2PRoutRoutingTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableIf.setDescription('Path: router.status.routingTable.interface')
st1020v2PRoutRoutingTableEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("none", 0), ("framemrelay", 1), ("ppp", 2), ("ethernet", 3), ("x25", 4), ("atm", 5), ("policysdependent", 6), ("pppoA", 7), ("pppoE", 8), ("sasdependent", 9), ("gre", 10),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableEncap.setDescription('Path: router.status.routingTable.encapsulation\r\n\r\n       Possibilities:\r\n               none   (0)\r\n               frame-relay   (1)\r\n               ppp   (2)\r\n               ethernet   (3)\r\n               x25   (4)\r\n               atm   (5)\r\n               policy dependent   (6)\r\n               pppoA   (7)\r\n               pppoE   (8)\r\n               sa dependent   (9)\r\n               gre   (10)')
st1020v2PRoutRoutingTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("discard", 2), ("spoofing", 3), ("holdDown", 4), ("closed", 5),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableStatus.setDescription('Path: router.status.routingTable.status\r\n\r\n       Possibilities:\r\n               down   (0)\r\n               up   (1)\r\n               discard   (2)\r\n               spoofing   (3)\r\n               holdDown   (4)\r\n               closed   (5)')
st1020v2PRoutRoutingTablePref = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTablePref.setDescription('Path: router.status.routingTable.preference')
st1020v2PRoutRoutingTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,)).clone(namedValues=NamedValues(("internal", 0), ("local", 1), ("host", 2), ("static", 3), ("rip", 4), ("ospf", 5), ("bgp", 6), ("float", 7), ("dial", 8), ("policy", 9), ("nat", 10), ("radius", 11), ("orchid", 12), ("reject", 13), ("ipsec", 14), ("floatIpsec", 15), ("mgmtProxy", 16), ("ipV6natpt", 17), ("pim", 18), ("none", 19), ("fixedDial", 20), ("fixedOutPolicy", 21), ("fixedInterface", 22), ("fixedIpsec", 23), ("staticTimed", 24), ("everyCat", 25),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableType.setDescription('Path: router.status.routingTable.type\r\n\r\n       Possibilities:\r\n               internal   (0)\r\n               local   (1)\r\n               host   (2)\r\n               static   (3)\r\n               rip   (4)\r\n               ospf   (5)\r\n               bgp   (6)\r\n               float   (7)\r\n               dial   (8)\r\n               policy   (9)\r\n               nat   (10)\r\n               radius   (11)\r\n               orchid   (12)\r\n               reject   (13)\r\n               ipsec   (14)\r\n               floatIpsec   (15)\r\n               mgmtProxy   (16)\r\n               ipV6natpt   (17)\r\n               pim   (18)\r\n               none   (19)\r\n               fixedDial   (20)\r\n               fixedOutPolicy   (21)\r\n               fixedInterface   (22)\r\n               fixedIpsec   (23)\r\n               staticTimed   (24)\r\n               everyCat   (25)')
st1020v2PRoutRoutingTableMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableMetric.setDescription('Path: router.status.routingTable.metric')
st1020v2PRoutRoutingTableTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 32, 1, 1, 167772160), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRoutingTableTimeOut.setDescription('Path: router.status.routingTable.timeOut\r\n\r\n       Time in centi-second.')
st1020v2PRoutRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 61))
st1020v2PRoutRadiusSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 61, 1))
st1020v2PRoutRadiusEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 61, 1, 1))
st1020v2PRoutRadiusAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 61, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRadiusAuthServer.setDescription('Path: router.status.radius.authServer')
st1020v2PRoutRadiusAcctServer = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 61, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRadiusAcctServer.setDescription('Path: router.status.radius.acctServer')
st1020v2PRoutRadiusPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 61, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutRadiusPendingRequests.setDescription('Path: router.status.radius.pendingRequests')
st1020v2PRoutDnsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65))
st1020v2PRoutDnsCacheSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheSSCTable.setDescription('DNS cache table')
st1020v2PRoutDnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDnsCacheTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheEntry.setDescription('')
st1020v2PRoutDnsCacheTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheTableIx.setDescription('')
st1020v2PRoutDnsCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheIpAddress.setDescription('Path: router.status.dnsCache.ipAddress')
st1020v2PRoutDnsCacheIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1, 83886080), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheIpV6Address.setDescription('Path: router.status.dnsCache.ipV6Address\r\n\r\n       ipv6 address')
st1020v2PRoutDnsCacheHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1, 33554432), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheHostname.setDescription('Path: router.status.dnsCache.hostname')
st1020v2PRoutDnsCacheTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1, 50331648), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheTtl.setDescription('Path: router.status.dnsCache.ttl\r\n\r\n       Time in centi-second.')
st1020v2PRoutDnsCacheInfiniteTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1, 67108864), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("static", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheInfiniteTimeOut.setDescription('Path: router.status.dnsCache.infiniteTimeOut\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               static   (2)')
st1020v2PRoutDnsCacheMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 65, 1, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsCacheMatches.setDescription('Path: router.status.dnsCache.matches\r\n\r\n       32 bit unsigned wrappable counter.')
st1020v2PRoutDnsServers = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66))
st1020v2PRoutDnsServersSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDnsServersSSCTable.setDescription('DNS server list')
st1020v2PRoutDnsServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDnsServersTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDnsServersEntry.setDescription('')
st1020v2PRoutDnsServersTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDnsServersTableIx.setDescription('')
st1020v2PRoutDnsServersPrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsServersPrimaryDns.setDescription('Path: router.status.dnsServers.primaryDns')
st1020v2PRoutDnsServersSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsServersSecondaryDns.setDescription('Path: router.status.dnsServers.secondaryDns')
st1020v2PRoutDnsServersType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1, 50331648), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("ppp", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsServersType.setDescription('Path: router.status.dnsServers.type\r\n\r\n       Possibilities:\r\n               static   (0)\r\n               dhcp   (1)\r\n               ppp   (2)')
st1020v2PRoutDnsServersRcvdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsServersRcvdInterface.setDescription('Path: router.status.dnsServers.rcvdInterface')
st1020v2PRoutDnsServersPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsServersPreference.setDescription('Path: router.status.dnsServers.preference')
st1020v2PRoutDnsServersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 66, 1, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 3, 5, 6,)).clone(namedValues=NamedValues(("primActive", 2), ("secActive", 3), ("inactive", 5), ("failed", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsServersStatus.setDescription('Path: router.status.dnsServers.status\r\n\r\n       Possibilities:\r\n               primActive   (2)\r\n               secActive   (3)\r\n               inactive   (5)\r\n               failed   (6)')
st1020v2PRoutDnsDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 72))
st1020v2PRoutDnsDomainsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 72, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDnsDomainsSSCTable.setDescription('DNS domain table')
st1020v2PRoutDnsDomainsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 72, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDnsDomainsTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDnsDomainsEntry.setDescription('')
st1020v2PRoutDnsDomainsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 72, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDnsDomainsTableIx.setDescription('')
st1020v2PRoutDnsDomainsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 72, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsDomainsName.setDescription('Path: router.status.dnsDomains.name')
st1020v2PRoutDnsDomainsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 72, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("ppp", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsDomainsType.setDescription('Path: router.status.dnsDomains.type\r\n\r\n       Possibilities:\r\n               static   (0)\r\n               dhcp   (1)\r\n               ppp   (2)')
st1020v2PRoutDnsDomainsRcvdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 72, 1, 1, 50331648), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsDomainsRcvdInterface.setDescription('Path: router.status.dnsDomains.rcvdInterface')
st1020v2PRoutAddrPools = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109))
st1020v2PRoutAddrPoolsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109, 1), )
if mibBuilder.loadTexts: st1020v2PRoutAddrPoolsSSCTable.setDescription('ip pool status')
st1020v2PRoutAddrPoolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutAddrPoolsTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutAddrPoolsEntry.setDescription('')
st1020v2PRoutAddrPoolsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutAddrPoolsTableIx.setDescription('')
st1020v2PRoutAddrPoolsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutAddrPoolsName.setDescription('Path: router.status.addrPools.name')
st1020v2PRoutAddrPoolsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("list", 1), ("interval", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutAddrPoolsType.setDescription('Path: router.status.addrPools.type\r\n\r\n       Possibilities:\r\n               list   (1)\r\n               interval   (2)')
st1020v2PRoutAddrPoolsNrOfAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutAddrPoolsNrOfAddresses.setDescription('Path: router.status.addrPools.nrOfAddresses\r\n\r\n       32 bit unsigned wrappable counter.')
st1020v2PRoutAddrPoolsAvailAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 109, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutAddrPoolsAvailAddresses.setDescription('Path: router.status.addrPools.availAddresses\r\n\r\n       32 bit unsigned wrappable counter.')
st1020v2PRoutPoolReservations = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103))
st1020v2PRoutPoolReservationsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1), )
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsSSCTable.setDescription('ip pool occupied addresses')
st1020v2PRoutPoolReservationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutPoolReservationsTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsEntry.setDescription('')
st1020v2PRoutPoolReservationsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsTableIx.setDescription('')
st1020v2PRoutPoolReservationsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsName.setDescription('Path: router.status.poolReservations.name')
st1020v2PRoutPoolReservationsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("list", 1), ("interval", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsType.setDescription('Path: router.status.poolReservations.type\r\n\r\n       Possibilities:\r\n               list   (1)\r\n               interval   (2)')
st1020v2PRoutPoolReservationsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsLocal.setDescription('Path: router.status.poolReservations.local')
st1020v2PRoutPoolReservationsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1, 67108864), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsRemote.setDescription('Path: router.status.poolReservations.remote')
st1020v2PRoutPoolReservationsNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1, 83886080), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsNetMask.setDescription('Path: router.status.poolReservations.netMask')
st1020v2PRoutPoolReservationsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 103, 1, 1, 100663296), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutPoolReservationsInterface.setDescription('Path: router.status.poolReservations.interface')
st1020v2PRoutDnsUpdCli = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82))
st1020v2PRoutDnsUpdCliSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1), )
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliSSCTable.setDescription('DNS Update Client status table')
st1020v2PRoutDnsUpdCliEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "st1020v2PRoutDnsUpdCliTableIx"))
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliEntry.setDescription('')
st1020v2PRoutDnsUpdCliTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliTableIx.setDescription('')
st1020v2PRoutDnsUpdCliName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliName.setDescription('Path: router.status.dnsUpdateClient.name')
st1020v2PRoutDnsUpdCliDnsProvDynDnsState = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 33620224), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("disabled", 0), ("enabledIdle", 1), ("updating", 2), ("stopped", 3), ("unbound", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliDnsProvDynDnsState.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.state\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabledIdle   (1)\r\n               updating   (2)\r\n               stopped   (3)\r\n               unbound   (4)')
st1020v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 33620480), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("closed", 0), ("listen", 1), ("synSent", 2), ("synReceived", 3), ("established", 4), ("finWait1", 5), ("finWait2", 6), ("closing", 7), ("timeWait", 8), ("closeWait", 9), ("lastAck", 10), ("notFound", 11), ("dnsReqSent", 12),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.tcpSocket\r\n\r\n       Possibilities:\r\n               closed   (0)\r\n               listen   (1)\r\n               synSent   (2)\r\n               synReceived   (3)\r\n               established   (4)\r\n               finWait1   (5)\r\n               finWait2   (6)\r\n               closing   (7)\r\n               timeWait   (8)\r\n               closeWait   (9)\r\n               lastAck   (10)\r\n               notFound   (11)\r\n               dnsReqSent   (12)')
st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 33620736), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.updateReturnCode')
st1020v2PRoutDnsUpdCliDnsProvDynDnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 33620992), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliDnsProvDynDnsHostName.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.hostName')
st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 33621248), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.updateServer')
st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 33621504), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.lastUpdateIpAddress')
st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 14, 82, 1, 1, 33621760), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.lastUpdateTimePassed\r\n\r\n       Time in centi-second.')
pt1020v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12))
pt1020v2PRoutQualMon = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79))
pt1020v2PRoutQualMonSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1), )
if mibBuilder.loadTexts: pt1020v2PRoutQualMonSSCTable.setDescription('quality monitor')
pt1020v2PRoutQualMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutQualMonTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutQualMonEntry.setDescription('')
pt1020v2PRoutQualMonTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutQualMonTableIx.setDescription('')
pt1020v2PRoutQualMonName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 301989888), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonName.setDescription('Path: router.performance.qualityMonitor.name')
pt1020v2PRoutQualMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 369098752), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 3, 2, 6, 8, 9,)).clone(namedValues=NamedValues(("run", 1), ("runOnDemand", 3), ("halted", 2), ("cleared", 6), ("disabled", 8), ("runIdle", 9),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonStatus.setDescription('Path: router.performance.qualityMonitor.status\r\n\r\n       Possibilities:\r\n               run   (1)\r\n               runOnDemand   (3)\r\n               halted   (2)\r\n               cleared   (6)\r\n               disabled   (8)\r\n               runIdle   (9)')
pt1020v2PRoutQualMonIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonIpAddress.setDescription('Path: router.performance.qualityMonitor.ipAddress')
pt1020v2PRoutQualMonHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 33554432), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonHostName.setDescription('Path: router.performance.qualityMonitor.hostName')
pt1020v2PRoutQualMonSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 83886080), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonSourceIp.setDescription('Path: router.performance.qualityMonitor.sourceIp')
pt1020v2PRoutQualMonSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 352321536), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonSourceId.setDescription('Path: router.performance.qualityMonitor.sourceId\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonNbrTxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonNbrTxPckt.setDescription('Path: router.performance.qualityMonitor.nbrOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonNbrRxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonNbrRxPckt.setDescription('Path: router.performance.qualityMonitor.nbrOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonError = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 285212672), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonError.setDescription('Path: router.performance.qualityMonitor.error\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 201326592), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonDelay.setDescription('Path: router.performance.qualityMonitor.delay\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 218103808), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonJitter.setDescription('Path: router.performance.qualityMonitor.jitter\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoss.setDescription('Path: router.performance.qualityMonitor.loss\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 268435456), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLossDelay.setDescription('Path: router.performance.qualityMonitor.lossDelay\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 184549376), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonDelayMin.setDescription('Path: router.performance.qualityMonitor.delayMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonDelayAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonDelayAvrg.setDescription('Path: router.performance.qualityMonitor.delayAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 134217728), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonDelayMax.setDescription('Path: router.performance.qualityMonitor.delayMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonJitterNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 234881024), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonJitterNegMax.setDescription('Path: router.performance.qualityMonitor.jitterNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonJitterAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonJitterAvrg.setDescription('Path: router.performance.qualityMonitor.jitterAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonJitterPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 167772160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonJitterPosMax.setDescription('Path: router.performance.qualityMonitor.jitterPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 504627200), Integer32().subtype(subtypeSpec=SingleValueConstraint(3, 1, 2, 4,)).clone(namedValues=NamedValues(("notInUse", 3), ("onlyJitter", 1), ("jitterAndLoss", 2), ("all", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownStatus.setDescription('Path: router.performance.qualityMonitor.upDown.status\r\n\r\n       Possibilities:\r\n               notInUse   (3)\r\n               onlyJitter   (1)\r\n               jitterAndLoss   (2)\r\n               all   (4)')
pt1020v2PRoutQualMonUpDownLossUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503971840), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownLossUp.setDescription('Path: router.performance.qualityMonitor.upDown.lossUp\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonUpDownLossDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 504037376), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownLossDelayUp.setDescription('Path: router.performance.qualityMonitor.upDown.lossDelayUp\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonUpDownDelayUpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 505282560), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownDelayUpMin.setDescription('Path: router.performance.qualityMonitor.upDown.delayUpMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownDelayUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 505348096), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownDelayUpAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.delayUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownDelayUpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 505413632), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownDelayUpMax.setDescription('Path: router.performance.qualityMonitor.upDown.delayUpMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503775232), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterUp.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUp\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterUpNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503382016), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterUpNegMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUpNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503447552), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterUpAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterUpPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503513088), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterUpPosMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUpPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownLossDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 504102912), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownLossDown.setDescription('Path: router.performance.qualityMonitor.upDown.lossDown\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonUpDownLossDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 504168448), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownLossDelayDown.setDescription('Path: router.performance.qualityMonitor.upDown.lossDelayDown\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonUpDownDelayDownMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 505610240), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownDelayDownMin.setDescription('Path: router.performance.qualityMonitor.upDown.delayDownMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownDelayDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 505675776), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownDelayDownAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.delayDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownDelayDownMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 505741312), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownDelayDownMax.setDescription('Path: router.performance.qualityMonitor.upDown.delayDownMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503840768), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterDown.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDown\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterDownNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503578624), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterDownNegMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDownNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503644160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterDownAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonUpDownJitterDownPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 503709696), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonUpDownJitterDownPosMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDownPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 251658240), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonAlarm.setDescription('Path: router.performance.qualityMonitor.alarm\r\n\r\n       Bit meanings:\r\n               bit 0 = loss,\r\n               bit 1 = delayAvrg,\r\n               bit 2 = delayMax,\r\n               bit 3 = delayMinMax,\r\n               bit 4 = jitterAvrg,\r\n               bit 5 = jitterPosMax,\r\n               bit 6 = jitterNegMax,\r\n               bit 7 = lossUp,\r\n               bit 8 = jitterUpAvrg,\r\n               bit 9 = jitterUpPosMax,\r\n               bit 10 = jitterUpNegMax,\r\n               bit 11 = lossDown,\r\n               bit 12 = jitterDownAvrg,\r\n               bit 13 = jitterDownPosMax,\r\n               bit 14 = jitterDownNegMax,\r\n               bit 15 = delayUpAvrg,\r\n               bit 16 = delayUpMax,\r\n               bit 17 = delayDownAvrg,\r\n               bit 18 = delayDownMax')
pt1020v2PRoutQualMonLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 1, 1, 318767104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLastError.setDescription('Path: router.performance.qualityMonitor.lastError')
pt1020v2PRoutQualMonLogging = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320), )
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLogging.setDescription('')
pt1020v2PRoutQualMonLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutQualMonTableIx"), (0, "T1020v2-QUALMON", "pt1020v2PRoutQualMonLoggingTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingEntry.setDescription('')
pt1020v2PRoutQualMonLoggingTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingTableIx.setDescription('')
pt1020v2PRoutQualMonLoggingSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 16777216), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingSysUpTime.setDescription('Path: router.performance.qualityMonitor.logging.sysUpTime\r\n\r\n       Time in centi-second.')
pt1020v2PRoutQualMonLoggingNbrTxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingNbrTxPckt.setDescription('Path: router.performance.qualityMonitor.logging.nbrOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingNbrRxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingNbrRxPckt.setDescription('Path: router.performance.qualityMonitor.logging.nbrOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingError = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 285212672), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingError.setDescription('Path: router.performance.qualityMonitor.logging.error\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingLoss.setDescription('Path: router.performance.qualityMonitor.logging.loss\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 268435456), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingLossDelay.setDescription('Path: router.performance.qualityMonitor.logging.lossDelay\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 184549376), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingDelayMin.setDescription('Path: router.performance.qualityMonitor.logging.delayMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingDelayAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingDelayAvrg.setDescription('Path: router.performance.qualityMonitor.logging.delayAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 134217728), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingDelayMax.setDescription('Path: router.performance.qualityMonitor.logging.delayMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingJitterNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 234881024), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingJitterNegMax.setDescription('Path: router.performance.qualityMonitor.logging.jitterNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingJitterAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingJitterAvrg.setDescription('Path: router.performance.qualityMonitor.logging.jitterAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingJitterPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 167772160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingJitterPosMax.setDescription('Path: router.performance.qualityMonitor.logging.jitterPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 504627200), Integer32().subtype(subtypeSpec=SingleValueConstraint(3, 1, 2, 4,)).clone(namedValues=NamedValues(("notInUse", 3), ("onlyJitter", 1), ("jitterAndLoss", 2), ("all", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownStatus.setDescription('Path: router.performance.qualityMonitor.logging.upDown.status\r\n\r\n       Possibilities:\r\n               notInUse   (3)\r\n               onlyJitter   (1)\r\n               jitterAndLoss   (2)\r\n               all   (4)')
pt1020v2PRoutQualMonLoggingUpDownLossUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 503971840), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownLossUp.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossUp\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingUpDownLossDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 504037376), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownLossDelayUp.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossDelayUp\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingUpDownDelayUpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 505282560), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownDelayUpMin.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayUpMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownDelayUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 505348096), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownDelayUpAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownDelayUpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 505413632), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownDelayUpMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayUpMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownJitterUpNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 503382016), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownJitterUpNegMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterUpNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownJitterUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 503447552), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownJitterUpAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownJitterUpPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 503513088), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownJitterUpPosMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterUpPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownLossDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 504102912), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownLossDown.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossDown\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingUpDownLossDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 504168448), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownLossDelayDown.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossDelayDown\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutQualMonLoggingUpDownDelayDownMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 505610240), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownDelayDownMin.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayDownMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownDelayDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 505675776), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownDelayDownAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownDelayDownMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 505741312), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownDelayDownMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayDownMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownJitterDownNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 503578624), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownJitterDownNegMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterDownNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownJitterDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 503644160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownJitterDownAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingUpDownJitterDownPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 503709696), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingUpDownJitterDownPosMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterDownPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pt1020v2PRoutQualMonLoggingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 79, 335544320, 1, 520093696), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutQualMonLoggingDate.setDescription('Path: router.performance.qualityMonitor.logging.date')
pt1020v2PRoutUdpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16))
pt1020v2PRoutUdpServerSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 1), )
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSSCTable.setDescription('udpServer')
pt1020v2PRoutUdpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutUdpServerTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerEntry.setDescription('')
pt1020v2PRoutUdpServerTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerTableIx.setDescription('')
pt1020v2PRoutUdpServerDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerDestinationPort.setDescription('Path: router.performance.udpServer.destinationPort')
pt1020v2PRoutUdpServerActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 1, 1, 33554432), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerActiveSessions.setDescription('Path: router.performance.udpServer.activeSessions\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutUdpServerNbrPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 1, 1, 50331648), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerNbrPckt.setDescription('Path: router.performance.udpServer.nbrOfPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pt1020v2PRoutUdpServerSessions = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864), )
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessions.setDescription('')
pt1020v2PRoutUdpServerSessionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutUdpServerTableIx"), (0, "T1020v2-QUALMON", "pt1020v2PRoutUdpServerSessionsTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessionsEntry.setDescription('')
pt1020v2PRoutUdpServerSessionsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessionsTableIx.setDescription('')
pt1020v2PRoutUdpServerSessionsSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessionsSourceIpAddress.setDescription('Path: router.performance.udpServer.sessions.sourceIpAddress')
pt1020v2PRoutUdpServerSessionsSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessionsSourcePort.setDescription('Path: router.performance.udpServer.sessions.sourcePort')
pt1020v2PRoutUdpServerSessionsNbrPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864, 1, 50331648), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessionsNbrPckt.setDescription('Path: router.performance.udpServer.sessions.nbrOfPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pt1020v2PRoutUdpServerSessionsFirstActivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864, 1, 67108864), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessionsFirstActivityTime.setDescription('Path: router.performance.udpServer.sessions.firstActivityTime\r\n\r\n       Time in centi-second.')
pt1020v2PRoutUdpServerSessionsLastActivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 16, 67108864, 1, 83886080), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutUdpServerSessionsLastActivityTime.setDescription('Path: router.performance.udpServer.sessions.lastActivityTime\r\n\r\n       Time in centi-second.')
pt1020v2PRoutIgmpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 69))
pt1020v2PRoutIgmpProxySSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 69, 1))
pt1020v2PRoutIgmpProxyEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 69, 1, 1))
pt1020v2PRoutIgmpProxyInIgmp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 69, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIgmpProxyInIgmp.setDescription('Path: router.performance.igmpProxy.inIgmp')
pt1020v2PRoutIgmpProxyOutIgmp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 69, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIgmpProxyOutIgmp.setDescription('Path: router.performance.igmpProxy.outIgmp')
pt1020v2PRoutIgmpProxyInData = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 69, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIgmpProxyInData.setDescription('Path: router.performance.igmpProxy.inData')
pt1020v2PRoutIgmpProxyInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 69, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIgmpProxyInDiscards.setDescription('Path: router.performance.igmpProxy.inDiscards')
pt1020v2PRoutIpFragments = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87))
pt1020v2PRoutIpFragmentsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1))
pt1020v2PRoutIpFragmentsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1, 1))
pt1020v2PRoutIpFragmentsReceivedFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1, 1, 16777216), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIpFragmentsReceivedFrames.setDescription('Path: router.performance.ipFragments.receivedFrames\r\n\r\n       64 bit unsigned wrappable counter.')
pt1020v2PRoutIpFragmentsReassembledFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1, 1, 33554432), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIpFragmentsReassembledFrames.setDescription('Path: router.performance.ipFragments.reassembledFrames\r\n\r\n       64 bit unsigned wrappable counter.')
pt1020v2PRoutIpFragmentsExpiredFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1, 1, 50331648), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIpFragmentsExpiredFrames.setDescription('Path: router.performance.ipFragments.expiredFrames\r\n\r\n       64 bit unsigned wrappable counter.')
pt1020v2PRoutIpFragmentsPendingFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIpFragmentsPendingFrames.setDescription('Path: router.performance.ipFragments.pendingFrames\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutIpFragmentsReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1, 1, 83886080), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIpFragmentsReceivedPackets.setDescription('Path: router.performance.ipFragments.receivedPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pt1020v2PRoutIpFragmentsExcessivelyFragPackets = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 87, 1, 1, 100663296), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutIpFragmentsExcessivelyFragPackets.setDescription('Path: router.performance.ipFragments.excessivelyFragPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pt1020v2PRoutTracertResults = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153))
pt1020v2PRoutTracertResultsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1), )
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsSSCTable.setDescription('Traceroute statistics')
pt1020v2PRoutTracertResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutTracertResultsTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsEntry.setDescription('')
pt1020v2PRoutTracertResultsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsTableIx.setDescription('')
pt1020v2PRoutTracertResultsTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsTtl.setDescription('Path: router.performance.tracertResults.ttl')
pt1020v2PRoutTracertResultsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsIpAddress.setDescription('Path: router.performance.tracertResults.ipAddress')
pt1020v2PRoutTracertResultsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 50331648), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsHostName.setDescription('Path: router.performance.tracertResults.hostName')
pt1020v2PRoutTracertResultsNrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsNrTx.setDescription('Path: router.performance.tracertResults.numOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTracertResultsNrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 83886080), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsNrRx.setDescription('Path: router.performance.tracertResults.numOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTracertResultsRepTimMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 100663296), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsRepTimMin.setDescription('Path: router.performance.tracertResults.replyTimeMin\r\n\r\n       Time in centi-second.')
pt1020v2PRoutTracertResultsRepTimMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 117440512), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsRepTimMax.setDescription('Path: router.performance.tracertResults.replyTimeMax\r\n\r\n       Time in centi-second.')
pt1020v2PRoutTracertResultsRepTimAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 134217728), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsRepTimAvrg.setDescription('Path: router.performance.tracertResults.replyTimeAvrg\r\n\r\n       Time in centi-second.')
pt1020v2PRoutTracertResultsSr = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 150994944), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsSr.setDescription('Path: router.performance.tracertResults.successRate\r\n\r\n       unit name = %')
pt1020v2PRoutTracertResultsComment = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 153, 1, 1, 167772160), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTracertResultsComment.setDescription('Path: router.performance.tracertResults.comment')
pt1020v2PRoutRoutingTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33))
pt1020v2PRoutRoutingTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1), )
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableSSCTable.setDescription('routingTable')
pt1020v2PRoutRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutRoutingTableTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableEntry.setDescription('')
pt1020v2PRoutRoutingTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableTableIx.setDescription('')
pt1020v2PRoutRoutingTableNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableNetwork.setDescription('Path: router.performance.routingTable.network')
pt1020v2PRoutRoutingTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableMask.setDescription('Path: router.performance.routingTable.mask')
pt1020v2PRoutRoutingTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableGateway.setDescription('Path: router.performance.routingTable.gateway')
pt1020v2PRoutRoutingTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableIf.setDescription('Path: router.performance.routingTable.interface')
pt1020v2PRoutRoutingTableUses = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1, 83886080), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableUses.setDescription('Path: router.performance.routingTable.uses\r\n\r\n       32 bit unsigned gauge value.')
pt1020v2PRoutRoutingTableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 33, 1, 1, 100663296), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRoutingTableOctets.setDescription('Path: router.performance.routingTable.octets\r\n\r\n       32 bit unsigned gauge value.')
pt1020v2PRoutPingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46))
pt1020v2PRoutPingResultsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1))
pt1020v2PRoutPingResultsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1))
pt1020v2PRoutPingResultsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutPingResultsIpAddr.setDescription('Path: router.performance.pingResults.ipAddress')
pt1020v2PRoutPingResultsNbrTxPckt = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1, 33554432), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutPingResultsNbrTxPckt.setDescription('Path: router.performance.pingResults.numOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutPingResultsNbrRxPckt = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutPingResultsNbrRxPckt.setDescription('Path: router.performance.pingResults.numOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutPingResultsRepTimMin = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1, 67108864), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutPingResultsRepTimMin.setDescription('Path: router.performance.pingResults.replyTimeMin\r\n\r\n       Time in centi-second.')
pt1020v2PRoutPingResultsRepTimMax = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1, 83886080), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutPingResultsRepTimMax.setDescription('Path: router.performance.pingResults.replyTimeMax\r\n\r\n       Time in centi-second.')
pt1020v2PRoutPingResultsRepTimAvrg = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1, 100663296), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutPingResultsRepTimAvrg.setDescription('Path: router.performance.pingResults.replyTimeAvrg\r\n\r\n       Time in centi-second.')
pt1020v2PRoutPingResultsLastError = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 46, 1, 1, 117440512), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutPingResultsLastError.setDescription('Path: router.performance.pingResults.lastError')
pt1020v2PRoutRadiusAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63))
pt1020v2PRoutRadiusAuthSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1), )
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthSSCTable.setDescription('radius statistics')
pt1020v2PRoutRadiusAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutRadiusAuthTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthEntry.setDescription('')
pt1020v2PRoutRadiusAuthTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthTableIx.setDescription('')
pt1020v2PRoutRadiusAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 1677721600), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthServer.setDescription('Path: router.performance.radiusAuth.server')
pt1020v2PRoutRadiusAuthVrfRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 134217728), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthVrfRouter.setDescription('Path: router.performance.radiusAuth.vrfRouter')
pt1020v2PRoutRadiusAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthRequests.setDescription('Path: router.performance.radiusAuth.requests')
pt1020v2PRoutRadiusAuthAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthAccepts.setDescription('Path: router.performance.radiusAuth.accepts')
pt1020v2PRoutRadiusAuthRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthRejects.setDescription('Path: router.performance.radiusAuth.rejects')
pt1020v2PRoutRadiusAuthChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthChallenges.setDescription('Path: router.performance.radiusAuth.challenges')
pt1020v2PRoutRadiusAuthBadAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthBadAuth.setDescription('Path: router.performance.radiusAuth.badAuthenticators')
pt1020v2PRoutRadiusAuthTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 100663296), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthTimeOuts.setDescription('Path: router.performance.radiusAuth.timeOuts')
pt1020v2PRoutRadiusAuthDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 63, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAuthDroppedPackets.setDescription('Path: router.performance.radiusAuth.droppedPackets')
pt1020v2PRoutRadiusAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62))
pt1020v2PRoutRadiusAcctSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1))
pt1020v2PRoutRadiusAcctEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1))
pt1020v2PRoutRadiusAcctServer = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1, 1677721600), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAcctServer.setDescription('Path: router.performance.radiusAcct.server')
pt1020v2PRoutRadiusAcctVrfRouter = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAcctVrfRouter.setDescription('Path: router.performance.radiusAcct.vrfRouter')
pt1020v2PRoutRadiusAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1, 134217728), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAcctRequests.setDescription('Path: router.performance.radiusAcct.requests')
pt1020v2PRoutRadiusAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAcctResponses.setDescription('Path: router.performance.radiusAcct.responses')
pt1020v2PRoutRadiusAcctBadAuth = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAcctBadAuth.setDescription('Path: router.performance.radiusAcct.badAuthenticators')
pt1020v2PRoutRadiusAcctTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1, 100663296), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAcctTimeOuts.setDescription('Path: router.performance.radiusAcct.timeOuts')
pt1020v2PRoutRadiusAcctDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 62, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutRadiusAcctDroppedPackets.setDescription('Path: router.performance.radiusAcct.droppedPackets')
pt1020v2PRoutTacacsAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68))
pt1020v2PRoutTacacsAuthSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1), )
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthSSCTable.setDescription('tacacs auth server perf table')
pt1020v2PRoutTacacsAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1), ).setIndexNames((0, "T1020v2-QUALMON", "pt1020v2PRoutTacacsAuthTableIx"))
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthEntry.setDescription('')
pt1020v2PRoutTacacsAuthTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthTableIx.setDescription('')
pt1020v2PRoutTacacsAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthServer.setDescription('Path: router.performance.tacacsAuth.server')
pt1020v2PRoutTacacsAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthPort.setDescription('Path: router.performance.tacacsAuth.port')
pt1020v2PRoutTacacsAuthVrfRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 184549376), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthVrfRouter.setDescription('Path: router.performance.tacacsAuth.vrfRouter')
pt1020v2PRoutTacacsAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthRequests.setDescription('Path: router.performance.tacacsAuth.requests\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthAccepts.setDescription('Path: router.performance.tacacsAuth.accepts\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 83886080), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthFails.setDescription('Path: router.performance.tacacsAuth.fails\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthTimeOuts.setDescription('Path: router.performance.tacacsAuth.timeOuts\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthAuthenticationStartPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 117506048), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthAuthenticationStartPkts.setDescription('Path: router.performance.tacacsAuth.authentication.startPkts\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthAuthenticationContinuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 117571584), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthAuthenticationContinuePkts.setDescription('Path: router.performance.tacacsAuth.authentication.continuePkts\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthAuthenticationReplyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 117637120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthAuthenticationReplyPkts.setDescription('Path: router.performance.tacacsAuth.authentication.replyPkts\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthAuthorizationRequestPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 134283264), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthAuthorizationRequestPkts.setDescription('Path: router.performance.tacacsAuth.authorization.requestPkts\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthAuthorizationResponsePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 134348800), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthAuthorizationResponsePkts.setDescription('Path: router.performance.tacacsAuth.authorization.responsePkts\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 150994944), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthDrops.setDescription('Path: router.performance.tacacsAuth.drops\r\n\r\n       32 bit unsigned wrappable counter.')
pt1020v2PRoutTacacsAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 12, 68, 1, 1, 167772160), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pt1020v2PRoutTacacsAuthErrors.setDescription('Path: router.performance.tacacsAuth.errors\r\n\r\n       32 bit unsigned wrappable counter.')
at1020v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16))
at1020v2PRoutSendIgmpLeave = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 114), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutSendIgmpLeave.setDescription('Path: router.actions.sendIgmpLeave\r\n       Info: send igmp leave over selected interfaces')
at1020v2PRoutIgmpDataLeave = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 115))
at1020v2PRoutIgmpDataLeaveSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 115, 1))
at1020v2PRoutIgmpDataLeaveEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 115, 1, 1))
at1020v2PRoutIgmpDataLeaveInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 115, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutIgmpDataLeaveInterfaces.setDescription('Path: router.actions.igmpDataLeave.interfaces')
at1020v2PRoutIgmpDataLeaveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 115, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutIgmpDataLeaveIpAddress.setDescription('Path: router.actions.igmpDataLeave.ipAddress')
at1020v2PRoutSendIgmpRep = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 112), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutSendIgmpRep.setDescription('Path: router.actions.sendIgmpRep\r\n       Info: send igmp report over selected interfaces')
at1020v2PRoutIgmpDataRep = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 113))
at1020v2PRoutIgmpDataRepSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 113, 1))
at1020v2PRoutIgmpDataRepEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 113, 1, 1))
at1020v2PRoutIgmpDataRepInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 113, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutIgmpDataRepInterfaces.setDescription('Path: router.actions.igmpDataRep.interfaces')
at1020v2PRoutIgmpDataRepIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 113, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutIgmpDataRepIpAddress.setDescription('Path: router.actions.igmpDataRep.ipAddress')
at1020v2PRoutQmOnDemand = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 8043), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutQmOnDemand.setDescription('Path: router.actions.qmOnDemand\r\n       Info: start sending pings')
at1020v2PRoutAction = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 8044))
at1020v2PRoutActionSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 8044, 1))
at1020v2PRoutActionEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 8044, 1, 1))
at1020v2PRoutActionAction = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 8044, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("restart", 1), ("restartLossWindow", 2), ("stop", 3), ("stopAndClear", 4),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutActionAction.setDescription('Path: router.actions.action.action\r\n\r\n       Possibilities:\r\n               restart   (1)\r\n               restartLossWindow   (2)\r\n               stop   (3)\r\n               stopAndClear   (4)')
at1020v2PRoutActionName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 8044, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutActionName.setDescription('Path: router.actions.action.name')
at1020v2PRoutClearTracert = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 154), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutClearTracert.setDescription('Path: router.actions.clearTracert\r\n       Info: Clear traceroute results')
at1020v2PRoutStopTracert = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 152), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutStopTracert.setDescription('Path: router.actions.stopTracert\r\n       Info: stop ongoing traceroutes')
at1020v2PRoutStartTracert = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 150), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutStartTracert.setDescription('Path: router.actions.startTracert\r\n       Info: start traceroute')
at1020v2PRoutTracertData = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151))
at1020v2PRoutTracertDataSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1))
at1020v2PRoutTracertDataEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1))
at1020v2PRoutTracertDataIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataIpAddress.setDescription('Path: router.actions.tracertData.ipAddress')
at1020v2PRoutTracertDataHostName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataHostName.setDescription('Path: router.actions.tracertData.hostName')
at1020v2PRoutTracertDataSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataSourceIp.setDescription('Path: router.actions.tracertData.sourceIp')
at1020v2PRoutTracertDataStartTtl = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataStartTtl.setDescription('Path: router.actions.tracertData.startTtl')
at1020v2PRoutTracertDataMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataMaxHops.setDescription('Path: router.actions.tracertData.maxHops')
at1020v2PRoutTracertDataQueriesPerHop = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 100663296), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataQueriesPerHop.setDescription('Path: router.actions.tracertData.queriesPerHop')
at1020v2PRoutTracertDataResolveHosts = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 117440512), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataResolveHosts.setDescription('Path: router.actions.tracertData.resolveHosts\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
at1020v2PRoutTracertDataDnsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 134217728), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataDnsTimeOut.setDescription('Path: router.actions.tracertData.dnsTimeOut\r\n\r\n       Time in centi-second.')
at1020v2PRoutTracertDataIcmpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 150994944), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataIcmpTimeOut.setDescription('Path: router.actions.tracertData.icmpTimeOut\r\n\r\n       Time in centi-second.')
at1020v2PRoutTracertDataTos = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 167772160), Integer32().subtype(subtypeSpec=SingleValueConstraint(32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataTos.setDescription('Path: router.actions.tracertData.tos\r\n\r\n       Possibilities:\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
at1020v2PRoutTracertDataDataLength = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 151, 1, 1, 184549376), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTracertDataDataLength.setDescription('Path: router.actions.tracertData.dataLength')
at1020v2PRoutUnBlacklist = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutUnBlacklist.setDescription('Path: router.actions.unBlacklist\r\n       Info: delete an entry/range of entries from the DHCP Blacklist')
at1020v2PRoutUnBlacklistData = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 48))
at1020v2PRoutUnBlacklistDataSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 48, 1))
at1020v2PRoutUnBlacklistDataEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 48, 1, 1))
at1020v2PRoutUnBlacklistDataStartIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 48, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutUnBlacklistDataStartIp.setDescription('Path: router.actions.unBlacklistData.startIp')
at1020v2PRoutUnBlacklistDataStopIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 48, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutUnBlacklistDataStopIp.setDescription('Path: router.actions.unBlacklistData.stopIp')
at1020v2PRoutUnBlacklistDataMac = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 48, 1, 1, 50331648), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutUnBlacklistDataMac.setDescription('Path: router.actions.unBlacklistData.mac\r\n\r\n       MAC address.')
at1020v2PRoutStopPing = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutStopPing.setDescription('Path: router.actions.stopPing\r\n       Info: stop sending pings')
at1020v2PRoutStartPing = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutStartPing.setDescription('Path: router.actions.startPing\r\n       Info: start sending pings')
at1020v2PRoutPingData = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44))
at1020v2PRoutPingDataSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1))
at1020v2PRoutPingDataEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1))
at1020v2PRoutPingDataIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataIpAddress.setDescription('Path: router.actions.pingData.ipAddress')
at1020v2PRoutPingDataHostName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 100663296), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataHostName.setDescription('Path: router.actions.pingData.hostName')
at1020v2PRoutPingDataSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 117440512), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataSourceIp.setDescription('Path: router.actions.pingData.sourceIp')
at1020v2PRoutPingDataTos = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataTos.setDescription('Path: router.actions.pingData.tos\r\n\r\n       Possibilities:\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
at1020v2PRoutPingDataFragment = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 150994944), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataFragment.setDescription('Path: router.actions.pingData.fragment\r\n\r\n       Possibilities:\r\n               yes   (1)\r\n               no   (2)')
at1020v2PRoutPingDataTtl = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 167772160), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataTtl.setDescription('Path: router.actions.pingData.ttl')
at1020v2PRoutPingDataIterations = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(0,)).clone(namedValues=NamedValues(("unlimited", 0),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataIterations.setDescription('Path: router.actions.pingData.iterations\r\n\r\n       Possibilities:\r\n               unlimited   (0)')
at1020v2PRoutPingDataInterval = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 50331648), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataInterval.setDescription('Path: router.actions.pingData.interval')
at1020v2PRoutPingDataDataLength = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataDataLength.setDescription('Path: router.actions.pingData.dataLength')
at1020v2PRoutPingDataTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 44, 1, 1, 83886080), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPingDataTimeOut.setDescription('Path: router.actions.pingData.timeOut\r\n\r\n       Time in centi-second.')
at1020v2PRoutRestartDhcpClient = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 88), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutRestartDhcpClient.setDescription('Path: router.actions.restartDhcpClient\r\n       Info: restart the dhcp client')
at1020v2PRoutInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutInterfaceName.setDescription('Path: router.actions.interfaceName\r\n       Info: Name of the interface')
at1020v2PRoutSendRipReqAction = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 301), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutSendRipReqAction.setDescription('Path: router.actions.sendRipReqAction\r\n       Info: send RIP request to specific router')
at1020v2PRoutRequestArguments = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 302))
at1020v2PRoutRequestArgumentsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 302, 1))
at1020v2PRoutRequestArgumentsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 302, 1, 1))
at1020v2PRoutRequestArgumentsRouterIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 302, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutRequestArgumentsRouterIp.setDescription('Path: router.actions.requestArguments.routerIp')
at1020v2PRoutRequestArgumentsOutIf = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 302, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutRequestArgumentsOutIf.setDescription('Path: router.actions.requestArguments.outgoingInterface')
at1020v2PRoutClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 263), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutClearCounters.setDescription('Path: router.actions.clearCounters\r\n       Info: reset counters')
at1020v2PRoutClearDnsCache = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 155), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutClearDnsCache.setDescription('Path: router.actions.clearDnsCache\r\n       Info: clear the DNS cache table')
at1020v2PRoutFreeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutFreeIpAddress.setDescription('Path: router.actions.freeIpAddress\r\n       Info: Free ip address')
at1020v2PRoutAddr = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 107), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutAddr.setDescription('Path: router.actions.address\r\n       Info: ip address attribute')
at1020v2PRoutTakeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 104), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutTakeIpAddress.setDescription('Path: router.actions.takeIpAddress\r\n       Info: Take ip address from pool')
at1020v2PRoutPool = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 105))
at1020v2PRoutPoolSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 105, 1))
at1020v2PRoutPoolEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 105, 1, 1))
at1020v2PRoutPoolPoolType = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 105, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("list", 1), ("interval", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPoolPoolType.setDescription('Path: router.actions.poolTypeName.poolType\r\n\r\n       Possibilities:\r\n               list   (1)\r\n               interval   (2)')
at1020v2PRoutPoolPoolName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 105, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutPoolPoolName.setDescription('Path: router.actions.poolTypeName.poolName')
at1020v2PRoutForceDnsUpdate = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 84), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutForceDnsUpdate.setDescription('Path: router.actions.forceDnsUpdate\r\n       Info: Force a DNS Update')
at1020v2PRoutDnsUpdateName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 16, 85), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: at1020v2PRoutDnsUpdateName.setDescription('Path: router.actions.dnsUpdateName\r\n       Info: Name of DNS Update table entry')
ft1020v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13))
ft1020v2PRoutAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202))
ft1020v2PRoutAlarmSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1))
ft1020v2PRoutAlarmEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1))
ft1020v2PRoutAlarmDiscriminator = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmDiscriminator.setDescription('Path: router.alarms.alarmInfo.discriminator')
ft1020v2PRoutAlarmCurrent = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmCurrent.setDescription('Path: router.alarms.alarmInfo.currentAlarms\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
ft1020v2PRoutAlarmPrevious = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmPrevious.setDescription('Path: router.alarms.alarmInfo.previousAlarms\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
ft1020v2PRoutAlarmMask = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmMask.setDescription('Path: router.alarms.alarmInfo.alarmMask\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
ft1020v2PRoutAlarmLevPingActive = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 83951616), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmLevPingActive.setDescription('Path: router.alarms.alarmInfo.alarmLevel.pingActive')
ft1020v2PRoutAlarmLevQMonLoss = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 84017152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmLevQMonLoss.setDescription('Path: router.alarms.alarmInfo.alarmLevel.qMonLoss')
ft1020v2PRoutAlarmLevQMonDelay = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 84082688), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmLevQMonDelay.setDescription('Path: router.alarms.alarmInfo.alarmLevel.qMonDelay')
ft1020v2PRoutAlarmLevQMonJitter = MibScalar((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 1, 1, 84148224), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ft1020v2PRoutAlarmLevQMonJitter.setDescription('Path: router.alarms.alarmInfo.alarmLevel.qMonJitter')
ft1020v2PRoutAlarmE2 = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2))
ft1020v2PRoutAlarmE2Entry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1))
ft1020v2PRoutAlarmE2PingActive = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 10))
ft1020v2PRoutAlarmE2PingActivePfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 10, 0))
ft1020v2PRoutAlarmE2PingActiveOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 10, 0, 1)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2PingActiveOff.setDescription("This trap signifies that bit 'pingActive'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the ON to the OFF state.")
ft1020v2PRoutAlarmE2PingActiveOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 10, 0, 2)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2PingActiveOn.setDescription("This trap signifies that bit 'pingActive'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the OFF to the ON state.")
ft1020v2PRoutAlarmE2QMonLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 11))
ft1020v2PRoutAlarmE2QMonLossPfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 11, 0))
ft1020v2PRoutAlarmE2QMonLossOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 11, 0, 1)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2QMonLossOff.setDescription("This trap signifies that bit 'qMonLoss'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the ON to the OFF state.")
ft1020v2PRoutAlarmE2QMonLossOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 11, 0, 2)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2QMonLossOn.setDescription("This trap signifies that bit 'qMonLoss'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the OFF to the ON state.")
ft1020v2PRoutAlarmE2QMonDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 12))
ft1020v2PRoutAlarmE2QMonDelayPfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 12, 0))
ft1020v2PRoutAlarmE2QMonDelayOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 12, 0, 1)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2QMonDelayOff.setDescription("This trap signifies that bit 'qMonDelay'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the ON to the OFF state.")
ft1020v2PRoutAlarmE2QMonDelayOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 12, 0, 2)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2QMonDelayOn.setDescription("This trap signifies that bit 'qMonDelay'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the OFF to the ON state.")
ft1020v2PRoutAlarmE2QMonJitter = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 13))
ft1020v2PRoutAlarmE2QMonJitterPfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 13, 0))
ft1020v2PRoutAlarmE2QMonJitterOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 13, 0, 1)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2QMonJitterOff.setDescription("This trap signifies that bit 'qMonJitter'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the ON to the OFF state.")
ft1020v2PRoutAlarmE2QMonJitterOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1100, 2093, 13, 202, 2, 1, 13, 0, 2)).setObjects(*(("T1020v2-QUALMON", "ifIndex"), ("T1020v2-QUALMON", "tlsCntTreeGlobalIndex"), ("T1020v2-QUALMON", "tlsTrapDescription"), ("T1020v2-QUALMON", "tlsSeverityLevel"), ("T1020v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: ft1020v2PRoutAlarmE2QMonJitterOn.setDescription("This trap signifies that bit 'qMonJitter'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='telindus1021Router') has changed from the OFF to the ON state.")
mibBuilder.exportSymbols("T1020v2-QUALMON", pt1020v2PRoutQualMonLoggingUpDownJitterUpPosMax=pt1020v2PRoutQualMonLoggingUpDownJitterUpPosMax, at1020v2PRoutPingDataDataLength=at1020v2PRoutPingDataDataLength, pt1020v2PRoutPingResultsIpAddr=pt1020v2PRoutPingResultsIpAddr, st1020v2PRoutPoolReservationsName=st1020v2PRoutPoolReservationsName, at1020v2PRout=at1020v2PRout, et1020v2PRoutDhcpStatHostName=et1020v2PRoutDhcpStatHostName, st1020v2PRoutRoutingTableSSCTable=st1020v2PRoutRoutingTableSSCTable, et1020v2PRoutSendHostUnreachable=et1020v2PRoutSendHostUnreachable, pt1020v2PRoutIgmpProxyOutIgmp=pt1020v2PRoutIgmpProxyOutIgmp, pt1020v2PRoutQualMonIpAddress=pt1020v2PRoutQualMonIpAddress, at1020v2PRoutPingDataSSC=at1020v2PRoutPingDataSSC, et1020v2PRoutRadiusAuthServersActions=et1020v2PRoutRadiusAuthServersActions, et1020v2PRoutQualMonDestinationsTimeOut=et1020v2PRoutQualMonDestinationsTimeOut, t1020v2PRout=t1020v2PRout, pt1020v2PRoutRadiusAuthSSCTable=pt1020v2PRoutRadiusAuthSSCTable, pt1020v2PRoutQualMonLoggingSysUpTime=pt1020v2PRoutQualMonLoggingSysUpTime, et1020v2PRoutAlarmLevQMonJitter=et1020v2PRoutAlarmLevQMonJitter, pt1020v2PRoutTracertResultsNrRx=pt1020v2PRoutTracertResultsNrRx, st1020v2PRoutRoutingTableEntry=st1020v2PRoutRoutingTableEntry, pt1020v2PRoutRoutingTableNetwork=pt1020v2PRoutRoutingTableNetwork, et1020v2PRoutQualMonUdpServerPortTos=et1020v2PRoutQualMonUdpServerPortTos, at1020v2PRoutSendIgmpRep=at1020v2PRoutSendIgmpRep, et1020v2PRoutDefaultRoute=et1020v2PRoutDefaultRoute, ft1020v2PRoutAlarmE2QMonLoss=ft1020v2PRoutAlarmE2QMonLoss, et1020v2PRoutDnsUpdCliDnsProvDynDnsMxBackup=et1020v2PRoutDnsUpdCliDnsProvDynDnsMxBackup, st1020v2PRout=st1020v2PRout, et1020v2PRoutDhcpDynTableIx=et1020v2PRoutDhcpDynTableIx, st1020v2PRoutAddrPoolsEntry=st1020v2PRoutAddrPoolsEntry, pt1020v2PRoutQualMonLoggingError=pt1020v2PRoutQualMonLoggingError, at1020v2PRoutIgmpDataLeaveEntry=at1020v2PRoutIgmpDataLeaveEntry, pt1020v2PRoutTracertResultsSr=pt1020v2PRoutTracertResultsSr, st1020v2PRoutPoolReservationsEntry=st1020v2PRoutPoolReservationsEntry, et1020v2PRoutAddrPoolsPoolListTableIx=et1020v2PRoutAddrPoolsPoolListTableIx, et1020v2PRoutR2ScrtTblEntry=et1020v2PRoutR2ScrtTblEntry, et1020v2PRoutAddrPoolsPoolListRemote=et1020v2PRoutAddrPoolsPoolListRemote, et1020v2PRoutAlarmLev=et1020v2PRoutAlarmLev, at1020v2PRoutPingDataEntry=at1020v2PRoutPingDataEntry, et1020v2PRoutR2ScrtTblSSCTable=et1020v2PRoutR2ScrtTblSSCTable, et1020v2PRoutDhcpDynGateway=et1020v2PRoutDhcpDynGateway, pt1020v2PRoutTracertResultsEntry=pt1020v2PRoutTracertResultsEntry, pt1020v2PRoutQualMonLoggingUpDownDelayDownMax=pt1020v2PRoutQualMonLoggingUpDownDelayDownMax, pt1020v2PRoutQualMonName=pt1020v2PRoutQualMonName, st1020v2PRoutDhcpRelaySourceIntf=st1020v2PRoutDhcpRelaySourceIntf, et1020v2PRoutDhcpStatNameServer=et1020v2PRoutDhcpStatNameServer, st1020v2PRoutDhcpBlacklist=st1020v2PRoutDhcpBlacklist, ft1020v2PRoutAlarmE2QMonLossOff=ft1020v2PRoutAlarmE2QMonLossOff, pt1020v2PRoutTacacsAuthAccepts=pt1020v2PRoutTacacsAuthAccepts, st1020v2PRoutDnsUpdCliDnsProvDynDnsHostName=st1020v2PRoutDnsUpdCliDnsProvDynDnsHostName, pt1020v2PRoutRadiusAuthRejects=pt1020v2PRoutRadiusAuthRejects, et1020v2PRoutRipHoldDownTime=et1020v2PRoutRipHoldDownTime, at1020v2PRoutIgmpDataRepInterfaces=at1020v2PRoutIgmpDataRepInterfaces, et1020v2PRoutTacacsAuthServersAddress=et1020v2PRoutTacacsAuthServersAddress, at1020v2PRoutTracertDataDnsTimeOut=at1020v2PRoutTracertDataDnsTimeOut, et1020v2PRout=et1020v2PRout, et1020v2PRoutRoutingTableRemark=et1020v2PRoutRoutingTableRemark, et1020v2PRoutDhcpDynDnsSetting=et1020v2PRoutDhcpDynDnsSetting, et1020v2PRoutHelperProtocolsType=et1020v2PRoutHelperProtocolsType, et1020v2PRoutRoutingProtocol=et1020v2PRoutRoutingProtocol, et1020v2PRoutDhcpStatOptionsValueIpAddress=et1020v2PRoutDhcpStatOptionsValueIpAddress, st1020v2PRoutDhcpRelayMac=st1020v2PRoutDhcpRelayMac, ft1020v2PRoutAlarmLevQMonLoss=ft1020v2PRoutAlarmLevQMonLoss, pt1020v2PRoutRadiusAcctVrfRouter=pt1020v2PRoutRadiusAcctVrfRouter, pt1020v2PRoutQualMonUpDownDelayDownMin=pt1020v2PRoutQualMonUpDownDelayDownMin, at1020v2PRoutIgmpDataRepIpAddress=at1020v2PRoutIgmpDataRepIpAddress, et1020v2PRoutRadiusAuthServersEncSecret=et1020v2PRoutRadiusAuthServersEncSecret, et1020v2PRoutDhcpDynHostName=et1020v2PRoutDhcpDynHostName, t1020v2PRoutMOProp=t1020v2PRoutMOProp, et1020v2PRoutQualMonUdpServerPortActions=et1020v2PRoutQualMonUdpServerPortActions, pt1020v2PRoutUdpServerDestinationPort=pt1020v2PRoutUdpServerDestinationPort, et1020v2PRoutHostsHostname=et1020v2PRoutHostsHostname, st1020v2PRoutIgmpTableMembers=st1020v2PRoutIgmpTableMembers, et1020v2PRoutQualMonDestinations=et1020v2PRoutQualMonDestinations, pt1020v2PRoutRadiusAuthChallenges=pt1020v2PRoutRadiusAuthChallenges, et1020v2PRoutDhcpDynOptions=et1020v2PRoutDhcpDynOptions, et1020v2PRoutDefaultRouteSSC=et1020v2PRoutDefaultRouteSSC, st1020v2PRoutDnsDomainsType=st1020v2PRoutDnsDomainsType, at1020v2PRoutActionName=at1020v2PRoutActionName, st1020v2PRoutPoolReservationsInterface=st1020v2PRoutPoolReservationsInterface, et1020v2PRoutQualMonDestinationsSource=et1020v2PRoutQualMonDestinationsSource, et1020v2PRoutDhcpStat=et1020v2PRoutDhcpStat, st1020v2PRoutDhcpBindingHostName=st1020v2PRoutDhcpBindingHostName, pt1020v2PRoutTacacsAuthAuthenticationContinuePkts=pt1020v2PRoutTacacsAuthAuthenticationContinuePkts, pt1020v2PRoutUdpServer=pt1020v2PRoutUdpServer, et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOff=et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOff, at1020v2PRoutRestartDhcpClient=at1020v2PRoutRestartDhcpClient, at1020v2PRoutTracertDataSSC=at1020v2PRoutTracertDataSSC, st1020v2PRoutIgmpTableTableIx=st1020v2PRoutIgmpTableTableIx, at1020v2PRoutPingDataTtl=at1020v2PRoutPingDataTtl, st1020v2PRoutRadiusPendingRequests=st1020v2PRoutRadiusPendingRequests, st1020v2PRoutDhcpStatStartRange=st1020v2PRoutDhcpStatStartRange, pt1020v2PRoutIpFragmentsExcessivelyFragPackets=pt1020v2PRoutIpFragmentsExcessivelyFragPackets, et1020v2PRoutDhcpDynTftpServerOption=et1020v2PRoutDhcpDynTftpServerOption, et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn=et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn, st1020v2PRoutDhcpRelayEntry=st1020v2PRoutDhcpRelayEntry, ft1020v2PRoutAlarmLevQMonJitter=ft1020v2PRoutAlarmLevQMonJitter, st1020v2PRoutDnsDomainsTableIx=st1020v2PRoutDnsDomainsTableIx, pt1020v2PRoutRadiusAcct=pt1020v2PRoutRadiusAcct, et1020v2PRoutRipNeighbors=et1020v2PRoutRipNeighbors, pt1020v2PRoutTracertResultsHostName=pt1020v2PRoutTracertResultsHostName, et1020v2PRoutDhcpStatMacAddress=et1020v2PRoutDhcpStatMacAddress, et1020v2PRoutRipNeighborsTableIx=et1020v2PRoutRipNeighborsTableIx, et1020v2PRoutLogEntry=et1020v2PRoutLogEntry, at1020v2PRoutUnBlacklistDataMac=at1020v2PRoutUnBlacklistDataMac, at1020v2PRoutPoolPoolName=at1020v2PRoutPoolPoolName, pt1020v2PRoutRadiusAuthDroppedPackets=pt1020v2PRoutRadiusAuthDroppedPackets, pt1020v2PRoutQualMonLoggingUpDownDelayUpAvrg=pt1020v2PRoutQualMonLoggingUpDownDelayUpAvrg, st1020v2PRoutDhcpBlacklistEntry=st1020v2PRoutDhcpBlacklistEntry, et1020v2PRoutQualMonUdpServerPortDestinationPort=et1020v2PRoutQualMonUdpServerPortDestinationPort, et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff=et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff, et1020v2PRoutQualMonDestinationsAlarmMask=et1020v2PRoutQualMonDestinationsAlarmMask, st1020v2PRoutDnsDomainsRcvdInterface=st1020v2PRoutDnsDomainsRcvdInterface, et1020v2PRoutDnsUpdCliDnsProvDynDnsTcpPort=et1020v2PRoutDnsUpdCliDnsProvDynDnsTcpPort, at1020v2PRoutQmOnDemand=at1020v2PRoutQmOnDemand, st1020v2PRoutDhcpRelayTableIx=st1020v2PRoutDhcpRelayTableIx, pt1020v2PRoutTracertResultsRepTimMax=pt1020v2PRoutTracertResultsRepTimMax, pt1020v2PRoutIgmpProxyInIgmp=pt1020v2PRoutIgmpProxyInIgmp, pt1020v2PRoutQualMonUpDownDelayUpAvrg=pt1020v2PRoutQualMonUpDownDelayUpAvrg, pt1020v2PRoutRadiusAcctEntry=pt1020v2PRoutRadiusAcctEntry, ft1020v2PRoutAlarmE2QMonJitterPfx=ft1020v2PRoutAlarmE2QMonJitterPfx, pt1020v2PRoutTracertResultsTtl=pt1020v2PRoutTracertResultsTtl, pt1020v2PRoutQualMonSourceId=pt1020v2PRoutQualMonSourceId, et1020v2PRoutRipNeighborsEntry=et1020v2PRoutRipNeighborsEntry, et1020v2PRoutQualMonDestinationsLossAlarmSamples=et1020v2PRoutQualMonDestinationsLossAlarmSamples, pt1020v2PRoutQualMonUpDownJitterDown=pt1020v2PRoutQualMonUpDownJitterDown, st1020v2PRoutInterfacesIfLastChange=st1020v2PRoutInterfacesIfLastChange, pt1020v2PRoutRoutingTableUses=pt1020v2PRoutRoutingTableUses, et1020v2PRoutHostsSSCTable=et1020v2PRoutHostsSSCTable, pt1020v2PRoutQualMonLoggingUpDownJitterDownAvrg=pt1020v2PRoutQualMonLoggingUpDownJitterDownAvrg, st1020v2PRoutDhcpBindingEntry=st1020v2PRoutDhcpBindingEntry, et1020v2PRoutQualMonUdpServerPortPriority=et1020v2PRoutQualMonUdpServerPortPriority, at1020v2PRoutClearDnsCache=at1020v2PRoutClearDnsCache, st1020v2PRoutAddrPoolsName=st1020v2PRoutAddrPoolsName, ft1020v2PRoutAlarmE2=ft1020v2PRoutAlarmE2, st1020v2PRoutDhcpBindingIpAddress=st1020v2PRoutDhcpBindingIpAddress, at1020v2PRoutPoolSSC=at1020v2PRoutPoolSSC, pt1020v2PRoutQualMonJitterAvrg=pt1020v2PRoutQualMonJitterAvrg, pt1020v2PRoutQualMonUpDownDelayUpMax=pt1020v2PRoutQualMonUpDownDelayUpMax, et1020v2PRoutDhcpStatDomainName=et1020v2PRoutDhcpStatDomainName, et1020v2PRoutMulticastRouting=et1020v2PRoutMulticastRouting, et1020v2PRoutDhcpDynOptionsValueHexData=et1020v2PRoutDhcpDynOptionsValueHexData, st1020v2PRoutDhcpStat=st1020v2PRoutDhcpStat, et1020v2PRoutR2ScrtTblTableIx=et1020v2PRoutR2ScrtTblTableIx, et1020v2PRoutQualMonDestinationsProtocolUdpServerPort=et1020v2PRoutQualMonDestinationsProtocolUdpServerPort, pt1020v2PRoutQualMonLoggingUpDownLossDelayUp=pt1020v2PRoutQualMonLoggingUpDownLossDelayUp, et1020v2PRoutDhcpDynOptionsValueDecimal=et1020v2PRoutDhcpDynOptionsValueDecimal, et1020v2PRoutTacacsAuthServersTableIx=et1020v2PRoutTacacsAuthServersTableIx, at1020v2PRoutTracertDataIcmpTimeOut=at1020v2PRoutTracertDataIcmpTimeOut, et1020v2PRoutAlarmLevQMonLoss=et1020v2PRoutAlarmLevQMonLoss, et1020v2PRoutDefaultRouteInterface=et1020v2PRoutDefaultRouteInterface, st1020v2PRoutDhcpRelay=st1020v2PRoutDhcpRelay, pt1020v2PRoutRoutingTableGateway=pt1020v2PRoutRoutingTableGateway, st1020v2PRoutDhcpBlacklistReason=st1020v2PRoutDhcpBlacklistReason, pt1020v2PRoutRadiusAuthBadAuth=pt1020v2PRoutRadiusAuthBadAuth, et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff=et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff, at1020v2PRoutStartPing=at1020v2PRoutStartPing, st1020v2PRoutDhcpBindingLeaseTime=st1020v2PRoutDhcpBindingLeaseTime, et1020v2PRoutQualMonUdpServerPortTableIx=et1020v2PRoutQualMonUdpServerPortTableIx, pt1020v2PRoutQualMonLoggingJitterNegMax=pt1020v2PRoutQualMonLoggingJitterNegMax, pt1020v2PRoutPingResultsSSC=pt1020v2PRoutPingResultsSSC, et1020v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn=et1020v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn, st1020v2PRoutAddrPoolsType=st1020v2PRoutAddrPoolsType, st1020v2PRoutDhcpBlacklistIpAddress=st1020v2PRoutDhcpBlacklistIpAddress, pt1020v2PRoutIpFragmentsSSC=pt1020v2PRoutIpFragmentsSSC, pt1020v2PRoutIgmpProxy=pt1020v2PRoutIgmpProxy, pt1020v2PRoutRadiusAcctDroppedPackets=pt1020v2PRoutRadiusAcctDroppedPackets, pt1020v2PRoutQualMonLoggingJitterAvrg=pt1020v2PRoutQualMonLoggingJitterAvrg, pt1020v2PRoutQualMonEntry=pt1020v2PRoutQualMonEntry, et1020v2PRoutRadiusEntry=et1020v2PRoutRadiusEntry, pt1020v2PRoutTracertResultsSSCTable=pt1020v2PRoutTracertResultsSSCTable, et1020v2PRoutAlarmLevSSC=et1020v2PRoutAlarmLevSSC, st1020v2PRoutDnsUpdCli=st1020v2PRoutDnsUpdCli, et1020v2PRoutTacacsLogin=et1020v2PRoutTacacsLogin, pt1020v2PRoutQualMonLastError=pt1020v2PRoutQualMonLastError, et1020v2PRoutRadiusAcctServerSecret=et1020v2PRoutRadiusAcctServerSecret, pt1020v2PRoutQualMonLoggingTableIx=pt1020v2PRoutQualMonLoggingTableIx, st1020v2PRoutDnsCacheTtl=st1020v2PRoutDnsCacheTtl, et1020v2PRoutDns=et1020v2PRoutDns, at1020v2PRoutIgmpDataRepSSC=at1020v2PRoutIgmpDataRepSSC, at1020v2PRoutTracertDataSourceIp=at1020v2PRoutTracertDataSourceIp, st1020v2PRoutRoutingTableEncap=st1020v2PRoutRoutingTableEncap, et1020v2PRoutQualMonDestinationsLossAlarmAlarmOff=et1020v2PRoutQualMonDestinationsLossAlarmAlarmOff, pt1020v2PRoutQualMonLoggingUpDownLossDown=pt1020v2PRoutQualMonLoggingUpDownLossDown, et1020v2PRoutDnsEntry=et1020v2PRoutDnsEntry, et1020v2PRoutDefaultRouteEntry=et1020v2PRoutDefaultRouteEntry, st1020v2PRoutDnsServersTableIx=st1020v2PRoutDnsServersTableIx, et1020v2PRoutQualMonEntry=et1020v2PRoutQualMonEntry, et1020v2PRoutTacacsAuthServersActions=et1020v2PRoutTacacsAuthServersActions, et1020v2PRoutDhcpDynBootFile=et1020v2PRoutDhcpDynBootFile, et1020v2PRoutDhcpDynOptionsTableIx=et1020v2PRoutDhcpDynOptionsTableIx, at1020v2PRoutActionAction=at1020v2PRoutActionAction, pt1020v2PRoutTracertResults=pt1020v2PRoutTracertResults, pt1020v2PRoutPingResultsLastError=pt1020v2PRoutPingResultsLastError, at1020v2PRoutIgmpDataLeaveIpAddress=at1020v2PRoutIgmpDataLeaveIpAddress, st1020v2PRoutDnsCacheIpAddress=st1020v2PRoutDnsCacheIpAddress, ft1020v2PRoutAlarm=ft1020v2PRoutAlarm, st1020v2PRoutDhcpBindingMacAddress=st1020v2PRoutDhcpBindingMacAddress, st1020v2PRoutRadiusEntry=st1020v2PRoutRadiusEntry, ft1020v2PRoutAlarmCurrent=ft1020v2PRoutAlarmCurrent, et1020v2PRoutR2ScrtTbl=et1020v2PRoutR2ScrtTbl, pt1020v2PRoutQualMonLoggingEntry=pt1020v2PRoutQualMonLoggingEntry, et1020v2PRoutQualMonDestinationsProtocolUdpEcho=et1020v2PRoutQualMonDestinationsProtocolUdpEcho, et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn=et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn, pt1020v2PRoutQualMonNbrRxPckt=pt1020v2PRoutQualMonNbrRxPckt, st1020v2PRoutDnsUpdCliEntry=st1020v2PRoutDnsUpdCliEntry, et1020v2PRoutDefaultRoutePreference=et1020v2PRoutDefaultRoutePreference, pt1020v2PRoutTacacsAuthSSCTable=pt1020v2PRoutTacacsAuthSSCTable, pt1020v2PRoutTacacsAuthVrfRouter=pt1020v2PRoutTacacsAuthVrfRouter, et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn=et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn, et1020v2PRoutRoutingTableTimeWindow=et1020v2PRoutRoutingTableTimeWindow, et1020v2PRoutQualMonType=et1020v2PRoutQualMonType, pt1020v2PRoutQualMonLoggingLoss=pt1020v2PRoutQualMonLoggingLoss, st1020v2PRoutDnsDomainsEntry=st1020v2PRoutDnsDomainsEntry, st1020v2PRoutDhcpBindingState=st1020v2PRoutDhcpBindingState, st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed=st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed, et1020v2PRoutRoutingTableEntry=et1020v2PRoutRoutingTableEntry, pt1020v2PRoutPingResults=pt1020v2PRoutPingResults, et1020v2PRoutDhcpDynMask=et1020v2PRoutDhcpDynMask, ft1020v2PRoutAlarmMask=ft1020v2PRoutAlarmMask, et1020v2PRoutDhcpDynLeaseTime=et1020v2PRoutDhcpDynLeaseTime, pt1020v2PRoutQualMonSSCTable=pt1020v2PRoutQualMonSSCTable, pt1020v2PRoutIgmpProxyInDiscards=pt1020v2PRoutIgmpProxyInDiscards, et1020v2PRoutDhcpDynInterface=et1020v2PRoutDhcpDynInterface, et1020v2PRoutRadiusAcctUpdate=et1020v2PRoutRadiusAcctUpdate, at1020v2PRoutUnBlacklistDataSSC=at1020v2PRoutUnBlacklistDataSSC, et1020v2PRoutRadiusAuthServersSource=et1020v2PRoutRadiusAuthServersSource, et1020v2PRoutR2ScrtTblSecret=et1020v2PRoutR2ScrtTblSecret, at1020v2PRoutRequestArguments=at1020v2PRoutRequestArguments, at1020v2PRoutUnBlacklistDataStartIp=at1020v2PRoutUnBlacklistDataStartIp, pt1020v2PRoutTacacsAuthEntry=pt1020v2PRoutTacacsAuthEntry, et1020v2PRoutQualMonDestinationsLogging=et1020v2PRoutQualMonDestinationsLogging, et1020v2PRoutRadiusAuthServers=et1020v2PRoutRadiusAuthServers, et1020v2PRoutHostsIpAddress=et1020v2PRoutHostsIpAddress, et1020v2PRoutDnsUpdCliName=et1020v2PRoutDnsUpdCliName, pt1020v2PRoutIpFragmentsPendingFrames=pt1020v2PRoutIpFragmentsPendingFrames, et1020v2PRoutDhcpStatNameServer2=et1020v2PRoutDhcpStatNameServer2, st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress=st1020v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress, pt1020v2PRoutRadiusAcctBadAuth=pt1020v2PRoutRadiusAcctBadAuth, st1020v2PRoutDhcpStatEndRange=st1020v2PRoutDhcpStatEndRange, st1020v2PRoutDhcpStatLeased=st1020v2PRoutDhcpStatLeased, pt1020v2PRoutQualMonUpDownJitterUpNegMax=pt1020v2PRoutQualMonUpDownJitterUpNegMax, et1020v2PRoutDhcpStatTftpServerOption=et1020v2PRoutDhcpStatTftpServerOption, st1020v2PRoutDhcpStatTableIx=st1020v2PRoutDhcpStatTableIx, et1020v2PRoutDhcpDynIpcpSubnet=et1020v2PRoutDhcpDynIpcpSubnet, st1020v2PRoutDhcpStatFree=st1020v2PRoutDhcpStatFree, at1020v2PRoutAction=at1020v2PRoutAction, pt1020v2PRoutUdpServerSessionsLastActivityTime=pt1020v2PRoutUdpServerSessionsLastActivityTime, et1020v2PRoutHostsActions=et1020v2PRoutHostsActions, pt1020v2PRoutQualMonLoggingUpDownDelayUpMin=pt1020v2PRoutQualMonLoggingUpDownDelayUpMin, et1020v2PRoutPppSecretTableEntry=et1020v2PRoutPppSecretTableEntry, et1020v2PRoutDnsUpdCliSSCTable=et1020v2PRoutDnsUpdCliSSCTable, et1020v2PRoutDhcpStatOptionsCode=et1020v2PRoutDhcpStatOptionsCode, et1020v2PRoutTacacsAuthServersEntry=et1020v2PRoutTacacsAuthServersEntry, et1020v2PRoutDhcpStatNetbiosNS=et1020v2PRoutDhcpStatNetbiosNS, at1020v2PRoutActionSSC=at1020v2PRoutActionSSC)
mibBuilder.exportSymbols("T1020v2-QUALMON", st1020v2PRoutPoolReservationsSSCTable=st1020v2PRoutPoolReservationsSSCTable, at1020v2PRoutUnBlacklistData=at1020v2PRoutUnBlacklistData, t1020v2PRoutMOPropPath=t1020v2PRoutMOPropPath, et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOn=et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOn, pt1020v2PRoutQualMonLoggingUpDownJitterDownNegMax=pt1020v2PRoutQualMonLoggingUpDownJitterDownNegMax, et1020v2PRoutDhcpDynSSCTable=et1020v2PRoutDhcpDynSSCTable, st1020v2PRoutDhcpBindingInterface=st1020v2PRoutDhcpBindingInterface, et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff=et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff, pt1020v2PRoutQualMonStatus=pt1020v2PRoutQualMonStatus, et1020v2PRoutDhcpDynBootFileOption=et1020v2PRoutDhcpDynBootFileOption, pt1020v2PRoutIpFragmentsReceivedPackets=pt1020v2PRoutIpFragmentsReceivedPackets, st1020v2PRoutDnsUpdCliTableIx=st1020v2PRoutDnsUpdCliTableIx, et1020v2PRoutDhcpStatOptionsActions=et1020v2PRoutDhcpStatOptionsActions, st1020v2PRoutDnsServersSSCTable=st1020v2PRoutDnsServersSSCTable, et1020v2PRoutDnsCacheSize=et1020v2PRoutDnsCacheSize, et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff=et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff, pt1020v2PRoutUdpServerNbrPckt=pt1020v2PRoutUdpServerNbrPckt, st1020v2PRoutRoutingTable=st1020v2PRoutRoutingTable, pt1020v2PRoutIpFragmentsExpiredFrames=pt1020v2PRoutIpFragmentsExpiredFrames, pt1020v2PRoutQualMonLoss=pt1020v2PRoutQualMonLoss, et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn=et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn, et1020v2PRoutDnsProxy=et1020v2PRoutDnsProxy, st1020v2PRoutDhcpBlacklistTableIx=st1020v2PRoutDhcpBlacklistTableIx, at1020v2PRoutPingDataTimeOut=at1020v2PRoutPingDataTimeOut, et1020v2PRoutPppSecretTableSSCTable=et1020v2PRoutPppSecretTableSSCTable, pt1020v2PRoutRoutingTableOctets=pt1020v2PRoutRoutingTableOctets, st1020v2PRoutInterfacesTableIx=st1020v2PRoutInterfacesTableIx, et1020v2PRoutSendAdminUnreachable=et1020v2PRoutSendAdminUnreachable, et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn=et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn, st1020v2PRoutRadiusAcctServer=st1020v2PRoutRadiusAcctServer, et1020v2PRoutRadiusAcctServerEncSecret=et1020v2PRoutRadiusAcctServerEncSecret, at1020v2PRoutRequestArgumentsOutIf=at1020v2PRoutRequestArgumentsOutIf, et1020v2PRoutQualMon=et1020v2PRoutQualMon, et1020v2PRoutRadiusAuthServersEncModeSecret=et1020v2PRoutRadiusAuthServersEncModeSecret, et1020v2PRoutDhcpDynOptionsEntry=et1020v2PRoutDhcpDynOptionsEntry, et1020v2PRoutQualMonDestinationsDelayAlarmSamples=et1020v2PRoutQualMonDestinationsDelayAlarmSamples, pt1020v2PRoutQualMonUpDownJitterDownPosMax=pt1020v2PRoutQualMonUpDownJitterDownPosMax, et1020v2PRoutRipUpInt=et1020v2PRoutRipUpInt, pt1020v2PRoutQualMonNbrTxPckt=pt1020v2PRoutQualMonNbrTxPckt, pt1020v2PRoutQualMonUpDownLossDelayUp=pt1020v2PRoutQualMonUpDownLossDelayUp, st1020v2PRoutInterfacesSecondaryIp=st1020v2PRoutInterfacesSecondaryIp, st1020v2PRoutDnsServersType=st1020v2PRoutDnsServersType, et1020v2PRoutAddrPoolsPoolList=et1020v2PRoutAddrPoolsPoolList, et1020v2PRoutRadiusAuthServersTableIx=et1020v2PRoutRadiusAuthServersTableIx, pt1020v2PRoutTracertResultsRepTimMin=pt1020v2PRoutTracertResultsRepTimMin, st1020v2PRoutInterfacesSecondaryIpTableIx=st1020v2PRoutInterfacesSecondaryIpTableIx, pt1020v2PRoutIgmpProxyEntry=pt1020v2PRoutIgmpProxyEntry, st1020v2PRoutPoolReservationsTableIx=st1020v2PRoutPoolReservationsTableIx, st1020v2PRoutDnsCache=st1020v2PRoutDnsCache, st1020v2PRoutDnsCacheHostname=st1020v2PRoutDnsCacheHostname, et1020v2PRoutRipNeighborsActions=et1020v2PRoutRipNeighborsActions, et1020v2PRoutDefaultRouteMetric=et1020v2PRoutDefaultRouteMetric, et1020v2PRoutAlternativeRoutes=et1020v2PRoutAlternativeRoutes, ft1020v2PRout=ft1020v2PRout, et1020v2PRoutRoutingTableIf=et1020v2PRoutRoutingTableIf, pt1020v2PRoutTacacsAuthPort=pt1020v2PRoutTacacsAuthPort, st1020v2PRoutRoutingTableMetric=st1020v2PRoutRoutingTableMetric, et1020v2PRoutPppSecretTableName=et1020v2PRoutPppSecretTableName, et1020v2PRoutAddrPoolsSSCTable=et1020v2PRoutAddrPoolsSSCTable, pt1020v2PRoutTacacsAuthErrors=pt1020v2PRoutTacacsAuthErrors, at1020v2PRoutFreeIpAddress=at1020v2PRoutFreeIpAddress, et1020v2PRoutDhcpDynIpEndAddress=et1020v2PRoutDhcpDynIpEndAddress, et1020v2PRoutRoutingTablePref=et1020v2PRoutRoutingTablePref, et1020v2PRoutQualMonDestinationsPriority=et1020v2PRoutQualMonDestinationsPriority, et1020v2PRoutTacacs=et1020v2PRoutTacacs, st1020v2PRoutInterfacesIfOperStatus=st1020v2PRoutInterfacesIfOperStatus, pt1020v2PRoutQualMonUpDownLossDelayDown=pt1020v2PRoutQualMonUpDownLossDelayDown, st1020v2PRoutAddrPools=st1020v2PRoutAddrPools, at1020v2PRoutTracertDataIpAddress=at1020v2PRoutTracertDataIpAddress, at1020v2PRoutRequestArgumentsSSC=at1020v2PRoutRequestArgumentsSSC, pt1020v2PRoutTacacsAuthDrops=pt1020v2PRoutTacacsAuthDrops, pt1020v2PRoutQualMonLoggingUpDownDelayDownAvrg=pt1020v2PRoutQualMonLoggingUpDownDelayDownAvrg, et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff=et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff, et1020v2PRoutRoutingTableProxyArp=et1020v2PRoutRoutingTableProxyArp, pt1020v2PRoutTacacsAuthAuthorizationResponsePkts=pt1020v2PRoutTacacsAuthAuthorizationResponsePkts, et1020v2PRoutDnsUpdCliDnsProvDynDnsSystem=et1020v2PRoutDnsUpdCliDnsProvDynDnsSystem, st1020v2PRoutInterfacesMask=st1020v2PRoutInterfacesMask, et1020v2PRoutAlarmLevPingActive=et1020v2PRoutAlarmLevPingActive, et1020v2PRoutQualMonDestinationsInterval=et1020v2PRoutQualMonDestinationsInterval, et1020v2PRoutRoutingTable=et1020v2PRoutRoutingTable, pt1020v2PRoutTacacsAuthAuthenticationReplyPkts=pt1020v2PRoutTacacsAuthAuthenticationReplyPkts, ft1020v2PRoutAlarmE2QMonDelayPfx=ft1020v2PRoutAlarmE2QMonDelayPfx, pt1020v2PRoutQualMonLoggingUpDownDelayDownMin=pt1020v2PRoutQualMonLoggingUpDownDelayDownMin, et1020v2PRoutDhcpDynActions=et1020v2PRoutDhcpDynActions, et1020v2PRoutPppSecretTableTableIx=et1020v2PRoutPppSecretTableTableIx, pt1020v2PRoutRadiusAcctServer=pt1020v2PRoutRadiusAcctServer, pt1020v2PRoutQualMonLoggingDelayMax=pt1020v2PRoutQualMonLoggingDelayMax, et1020v2PRoutHosts=et1020v2PRoutHosts, et1020v2PRoutDnsUpdCliTableIx=et1020v2PRoutDnsUpdCliTableIx, pt1020v2PRoutQualMonHostName=pt1020v2PRoutQualMonHostName, et1020v2PRoutTacacsAuthServersEncSecret=et1020v2PRoutTacacsAuthServersEncSecret, et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff=et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff, et1020v2PRoutDnsUpdCliDnsProvDynDnsInterface=et1020v2PRoutDnsUpdCliDnsProvDynDnsInterface, et1020v2PRoutAlarmLevEntry=et1020v2PRoutAlarmLevEntry, st1020v2PRoutInterfacesIfType=st1020v2PRoutInterfacesIfType, pt1020v2PRoutRadiusAuthTimeOuts=pt1020v2PRoutRadiusAuthTimeOuts, et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn=et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn, pt1020v2PRoutQualMonUpDownJitterUp=pt1020v2PRoutQualMonUpDownJitterUp, pt1020v2PRoutTacacsAuthTableIx=pt1020v2PRoutTacacsAuthTableIx, at1020v2PRoutIgmpDataLeaveInterfaces=at1020v2PRoutIgmpDataLeaveInterfaces, pt1020v2PRoutIgmpProxyInData=pt1020v2PRoutIgmpProxyInData, st1020v2PRoutInterfaces=st1020v2PRoutInterfaces, st1020v2PRoutDhcpRelayDhcpStatus=st1020v2PRoutDhcpRelayDhcpStatus, et1020v2PRoutDhcpDynNameServer2=et1020v2PRoutDhcpDynNameServer2, et1020v2PRoutRadiusSSC=et1020v2PRoutRadiusSSC, pt1020v2PRoutUdpServerSessionsSourcePort=pt1020v2PRoutUdpServerSessionsSourcePort, et1020v2PRoutRadiusAuthServersEntry=et1020v2PRoutRadiusAuthServersEntry, et1020v2PRoutAlarmLevQMonDelay=et1020v2PRoutAlarmLevQMonDelay, et1020v2PRoutDnsUpdCliDnsProvDynDnsPassword=et1020v2PRoutDnsUpdCliDnsProvDynDnsPassword, et1020v2PRoutDhcpStatNetbiosNS2=et1020v2PRoutDhcpStatNetbiosNS2, et1020v2PRoutRadius=et1020v2PRoutRadius, pt1020v2PRoutUdpServerSessionsEntry=pt1020v2PRoutUdpServerSessionsEntry, st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode=st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode, at1020v2PRoutPingDataFragment=at1020v2PRoutPingDataFragment, pt1020v2PRoutUdpServerSessions=pt1020v2PRoutUdpServerSessions, st1020v2PRoutDnsDomainsSSCTable=st1020v2PRoutDnsDomainsSSCTable, et1020v2PRoutAddrPoolsPoolListLocal=et1020v2PRoutAddrPoolsPoolListLocal, et1020v2PRoutLogSSC=et1020v2PRoutLogSSC, st1020v2PRoutPoolReservationsRemote=st1020v2PRoutPoolReservationsRemote, st1020v2PRoutPoolReservationsNetMask=st1020v2PRoutPoolReservationsNetMask, et1020v2PRoutSendTtlExceeded=et1020v2PRoutSendTtlExceeded, st1020v2PRoutDnsCacheMatches=st1020v2PRoutDnsCacheMatches, pt1020v2PRoutQualMonLogging=pt1020v2PRoutQualMonLogging, at1020v2PRoutRequestArgumentsRouterIp=at1020v2PRoutRequestArgumentsRouterIp, st1020v2PRoutRadiusAuthServer=st1020v2PRoutRadiusAuthServer, et1020v2PRoutRadiusAcctServerTimeOut=et1020v2PRoutRadiusAcctServerTimeOut, et1020v2PRoutTacacsAuthServersTimeOut=et1020v2PRoutTacacsAuthServersTimeOut, pt1020v2PRoutQualMonLoggingNbrRxPckt=pt1020v2PRoutQualMonLoggingNbrRxPckt, st1020v2PRoutIgmpTableEntry=st1020v2PRoutIgmpTableEntry, et1020v2PRoutDnsUpdCliDnsProvDynDnsUserName=et1020v2PRoutDnsUpdCliDnsProvDynDnsUserName, st1020v2PRoutRoutingTableGateway=st1020v2PRoutRoutingTableGateway, st1020v2PRoutDhcpStatEntry=st1020v2PRoutDhcpStatEntry, pt1020v2PRoutTracertResultsRepTimAvrg=pt1020v2PRoutTracertResultsRepTimAvrg, st1020v2PRoutDnsServers=st1020v2PRoutDnsServers, st1020v2PRoutPoolReservationsLocal=st1020v2PRoutPoolReservationsLocal, at1020v2PRoutStopTracert=at1020v2PRoutStopTracert, et1020v2PRoutDhcpDynNameServer=et1020v2PRoutDhcpDynNameServer, pt1020v2PRoutUdpServerSessionsTableIx=pt1020v2PRoutUdpServerSessionsTableIx, at1020v2PRoutTakeIpAddress=at1020v2PRoutTakeIpAddress, et1020v2PRoutDhcpDynTftpServer=et1020v2PRoutDhcpDynTftpServer, et1020v2PRoutDhcpDynOptionsValueIpAddress=et1020v2PRoutDhcpDynOptionsValueIpAddress, et1020v2PRoutDhcpStatOptionsValueHexData=et1020v2PRoutDhcpStatOptionsValueHexData, et1020v2PRoutDhcpStatEntry=et1020v2PRoutDhcpStatEntry, pt1020v2PRoutTacacsAuthAuthorizationRequestPkts=pt1020v2PRoutTacacsAuthAuthorizationRequestPkts, pt1020v2PRoutTacacsAuth=pt1020v2PRoutTacacsAuth, et1020v2PRoutDhcpStatTableIx=et1020v2PRoutDhcpStatTableIx, et1020v2PRoutDnsPreference=et1020v2PRoutDnsPreference, st1020v2PRoutDhcpStatSSCTable=st1020v2PRoutDhcpStatSSCTable, et1020v2PRoutR2ScrtTblKeyId=et1020v2PRoutR2ScrtTblKeyId, et1020v2PRoutSysSecret=et1020v2PRoutSysSecret, et1020v2PRoutQualMonDestinationsLossAlarmAlarmOn=et1020v2PRoutQualMonDestinationsLossAlarmAlarmOn, et1020v2PRoutDhcpStatIpAddress=et1020v2PRoutDhcpStatIpAddress, et1020v2PRoutDhcpStatOptionsValueDecimal=et1020v2PRoutDhcpStatOptionsValueDecimal, at1020v2PRoutTracertDataQueriesPerHop=at1020v2PRoutTracertDataQueriesPerHop, pt1020v2PRoutRadiusAcctTimeOuts=pt1020v2PRoutRadiusAcctTimeOuts, et1020v2PRoutQualMonDestinationsIpAddress=et1020v2PRoutQualMonDestinationsIpAddress, pt1020v2PRoutTacacsAuthTimeOuts=pt1020v2PRoutTacacsAuthTimeOuts, st1020v2PRoutIgmpTableMulticast=st1020v2PRoutIgmpTableMulticast, pt1020v2PRoutIpFragmentsEntry=pt1020v2PRoutIpFragmentsEntry, et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn=et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn, et1020v2PRoutQualMonDestinationsIdleSamples=et1020v2PRoutQualMonDestinationsIdleSamples, et1020v2PRoutAlarmMask=et1020v2PRoutAlarmMask, et1020v2PRoutRadiusAuthServersAddress=et1020v2PRoutRadiusAuthServersAddress, pt1020v2PRoutQualMonLoggingNbrTxPckt=pt1020v2PRoutQualMonLoggingNbrTxPckt, pt1020v2PRoutTracertResultsIpAddress=pt1020v2PRoutTracertResultsIpAddress, et1020v2PRoutQualMonDestinationsActions=et1020v2PRoutQualMonDestinationsActions, ft1020v2PRoutAlarmE2QMonDelayOff=ft1020v2PRoutAlarmE2QMonDelayOff, et1020v2PRoutHelperProtocolsSSCTable=et1020v2PRoutHelperProtocolsSSCTable, at1020v2PRoutUnBlacklistDataStopIp=at1020v2PRoutUnBlacklistDataStopIp, st1020v2PRoutDnsCacheIpV6Address=st1020v2PRoutDnsCacheIpV6Address, at1020v2PRoutIgmpDataLeave=at1020v2PRoutIgmpDataLeave, st1020v2PRoutDhcpBindingTableIx=st1020v2PRoutDhcpBindingTableIx, ft1020v2PRoutAlarmE2QMonJitterOff=ft1020v2PRoutAlarmE2QMonJitterOff, et1020v2PRoutAddrPoolsPoolListEntry=et1020v2PRoutAddrPoolsPoolListEntry, et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff=et1020v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff, st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer=st1020v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer, pt1020v2PRoutQualMonUpDownJitterDownAvrg=pt1020v2PRoutQualMonUpDownJitterDownAvrg, et1020v2PRoutQualMonDestinationsTxInterface=et1020v2PRoutQualMonDestinationsTxInterface, et1020v2PRoutDhcpStatOptionsTableIx=et1020v2PRoutDhcpStatOptionsTableIx, et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff=et1020v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff, at1020v2PRoutPingDataSourceIp=at1020v2PRoutPingDataSourceIp, et1020v2PRoutHelperProtocolsEntry=et1020v2PRoutHelperProtocolsEntry, pt1020v2PRoutPingResultsNbrRxPckt=pt1020v2PRoutPingResultsNbrRxPckt, st1020v2PRoutAddrPoolsSSCTable=st1020v2PRoutAddrPoolsSSCTable, pt1020v2PRoutQualMonLoggingUpDownStatus=pt1020v2PRoutQualMonLoggingUpDownStatus, et1020v2PRoutPppSecretTableSecret=et1020v2PRoutPppSecretTableSecret, et1020v2PRoutQualMonDestinationsHostName=et1020v2PRoutQualMonDestinationsHostName, pt1020v2PRoutQualMonLoggingDelayMin=pt1020v2PRoutQualMonLoggingDelayMin, ft1020v2PRoutAlarmE2QMonDelay=ft1020v2PRoutAlarmE2QMonDelay, t1020v2PRoutMOPropRev=t1020v2PRoutMOPropRev, et1020v2PRoutHelperProtocolsTableIx=et1020v2PRoutHelperProtocolsTableIx, et1020v2PRoutDhcpStatOptionsEntry=et1020v2PRoutDhcpStatOptionsEntry, at1020v2PRoutTracertData=at1020v2PRoutTracertData, et1020v2PRoutHostsEntry=et1020v2PRoutHostsEntry, et1020v2PRoutDhcpStatActions=et1020v2PRoutDhcpStatActions, at1020v2PRoutIgmpDataRepEntry=at1020v2PRoutIgmpDataRepEntry, st1020v2PRoutInterfacesSecondaryIpEntry=st1020v2PRoutInterfacesSecondaryIpEntry, et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn=et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn, pt1020v2PRoutQualMonJitterNegMax=pt1020v2PRoutQualMonJitterNegMax, et1020v2PRoutR2ScrtTblIf=et1020v2PRoutR2ScrtTblIf, st1020v2PRoutDnsDomainsName=st1020v2PRoutDnsDomainsName, st1020v2PRoutAddrPoolsNrOfAddresses=st1020v2PRoutAddrPoolsNrOfAddresses, st1020v2PRoutDnsCacheInfiniteTimeOut=st1020v2PRoutDnsCacheInfiniteTimeOut, et1020v2PRoutDnsUpdCliActions=et1020v2PRoutDnsUpdCliActions, st1020v2PRoutDhcpBindingCheckAddress=st1020v2PRoutDhcpBindingCheckAddress, pt1020v2PRoutPingResultsEntry=pt1020v2PRoutPingResultsEntry, et1020v2PRoutRadiusAcctServerAddress=et1020v2PRoutRadiusAcctServerAddress, et1020v2PRoutDhcpStatTftpServer=et1020v2PRoutDhcpStatTftpServer, pt1020v2PRoutQualMonDelayAvrg=pt1020v2PRoutQualMonDelayAvrg, et1020v2PRoutDhcpDynOptionsValueAscii=et1020v2PRoutDhcpDynOptionsValueAscii, ft1020v2PRoutAlarmE2PingActive=ft1020v2PRoutAlarmE2PingActive, ft1020v2PRoutAlarmLevPingActive=ft1020v2PRoutAlarmLevPingActive, pt1020v2PRoutQualMonUpDownLossUp=pt1020v2PRoutQualMonUpDownLossUp, st1020v2PRoutDnsCacheSSCTable=st1020v2PRoutDnsCacheSSCTable, et1020v2PRoutDnsPrimaryDns=et1020v2PRoutDnsPrimaryDns, at1020v2PRoutIgmpDataRep=at1020v2PRoutIgmpDataRep, at1020v2PRoutPingData=at1020v2PRoutPingData, pt1020v2PRoutTacacsAuthFails=pt1020v2PRoutTacacsAuthFails, et1020v2PRoutHelperProtocolsActions=et1020v2PRoutHelperProtocolsActions, at1020v2PRoutPool=at1020v2PRoutPool, et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff=et1020v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff, et1020v2PRoutAddrPools=et1020v2PRoutAddrPools, at1020v2PRoutRequestArgumentsEntry=at1020v2PRoutRequestArgumentsEntry, et1020v2PRoutDefaultRouteGateway=et1020v2PRoutDefaultRouteGateway, st1020v2PRoutDhcpBlacklistMacAddress=st1020v2PRoutDhcpBlacklistMacAddress, et1020v2PRoutDnsSecondaryDns=et1020v2PRoutDnsSecondaryDns, et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn=et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn, at1020v2PRoutTracertDataDataLength=at1020v2PRoutTracertDataDataLength, ft1020v2PRoutAlarmE2QMonJitterOn=ft1020v2PRoutAlarmE2QMonJitterOn, at1020v2PRoutSendIgmpLeave=at1020v2PRoutSendIgmpLeave, st1020v2PRoutRadius=st1020v2PRoutRadius, et1020v2PRoutRadiusAcctServerEncModeSecret=et1020v2PRoutRadiusAcctServerEncModeSecret, et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff=et1020v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff, et1020v2PRoutQualMonDestinationsAdminStatus=et1020v2PRoutQualMonDestinationsAdminStatus, et1020v2PRoutLogDhcpSyslogMask=et1020v2PRoutLogDhcpSyslogMask, et1020v2PRoutDhcpDynOptionsActions=et1020v2PRoutDhcpDynOptionsActions, et1020v2PRoutDnsUpdCliEntry=et1020v2PRoutDnsUpdCliEntry, at1020v2PRoutPoolPoolType=at1020v2PRoutPoolPoolType, pt1020v2PRoutIpFragments=pt1020v2PRoutIpFragments, at1020v2PRoutPingDataIterations=at1020v2PRoutPingDataIterations, et1020v2PRoutDhcpDynOptionsCode=et1020v2PRoutDhcpDynOptionsCode, et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff=et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff, et1020v2PRoutAddrPoolsPoolIntervalFrom=et1020v2PRoutAddrPoolsPoolIntervalFrom, pt1020v2PRoutQualMonTableIx=pt1020v2PRoutQualMonTableIx, pt1020v2PRoutUdpServerSessionsSourceIpAddress=pt1020v2PRoutUdpServerSessionsSourceIpAddress, at1020v2PRoutActionEntry=at1020v2PRoutActionEntry, pt1020v2PRoutTracertResultsTableIx=pt1020v2PRoutTracertResultsTableIx, st1020v2PRoutDnsServersSecondaryDns=st1020v2PRoutDnsServersSecondaryDns, et1020v2PRoutRoutingTableActions=et1020v2PRoutRoutingTableActions, st1020v2PRoutRoutingTableMask=st1020v2PRoutRoutingTableMask, st1020v2PRoutDnsServersEntry=st1020v2PRoutDnsServersEntry, et1020v2PRoutQualMonDestinationsLength=et1020v2PRoutQualMonDestinationsLength, pt1020v2PRoutPingResultsNbrTxPckt=pt1020v2PRoutPingResultsNbrTxPckt, pt1020v2PRoutQualMonLoggingUpDownJitterUpNegMax=pt1020v2PRoutQualMonLoggingUpDownJitterUpNegMax)
mibBuilder.exportSymbols("T1020v2-QUALMON", st1020v2PRoutAddrPoolsTableIx=st1020v2PRoutAddrPoolsTableIx, pt1020v2PRoutPingResultsRepTimAvrg=pt1020v2PRoutPingResultsRepTimAvrg, et1020v2PRoutAddrPoolsPoolIntervalTo=et1020v2PRoutAddrPoolsPoolIntervalTo, et1020v2PRoutDhcpCheckAddress=et1020v2PRoutDhcpCheckAddress, st1020v2PRoutRoutingTableStatus=st1020v2PRoutRoutingTableStatus, st1020v2PRoutDhcpBinding=st1020v2PRoutDhcpBinding, st1020v2PRoutRoutingTableIf=st1020v2PRoutRoutingTableIf, at1020v2PRoutPoolEntry=at1020v2PRoutPoolEntry, at1020v2PRoutIgmpDataLeaveSSC=at1020v2PRoutIgmpDataLeaveSSC, et1020v2PRoutQualMonDestinationsLoggingDepth=et1020v2PRoutQualMonDestinationsLoggingDepth, at1020v2PRoutPingDataInterval=at1020v2PRoutPingDataInterval, pt1020v2PRoutQualMonDelayMin=pt1020v2PRoutQualMonDelayMin, pt1020v2PRoutTacacsAuthServer=pt1020v2PRoutTacacsAuthServer, pt1020v2PRoutUdpServerActiveSessions=pt1020v2PRoutUdpServerActiveSessions, st1020v2PRoutInterfacesEntry=st1020v2PRoutInterfacesEntry, ft1020v2PRoutAlarmLevQMonDelay=ft1020v2PRoutAlarmLevQMonDelay, et1020v2PRoutDhcpDynHoldTime=et1020v2PRoutDhcpDynHoldTime, et1020v2PRoutDhcpStatGateway=et1020v2PRoutDhcpStatGateway, pt1020v2PRoutIpFragmentsReassembledFrames=pt1020v2PRoutIpFragmentsReassembledFrames, et1020v2PRoutTacacsSSC=et1020v2PRoutTacacsSSC, et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn=et1020v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn, at1020v2PRoutTracertDataStartTtl=at1020v2PRoutTracertDataStartTtl, et1020v2PRoutDnsUpdCli=et1020v2PRoutDnsUpdCli, at1020v2PRoutClearCounters=at1020v2PRoutClearCounters, pt1020v2PRoutQualMonUpDownStatus=pt1020v2PRoutQualMonUpDownStatus, pt1020v2PRoutTacacsAuthRequests=pt1020v2PRoutTacacsAuthRequests, st1020v2PRoutIgmpTableIf=st1020v2PRoutIgmpTableIf, at1020v2PRoutStartTracert=at1020v2PRoutStartTracert, pt1020v2PRoutQualMonLoggingUpDownDelayUpMax=pt1020v2PRoutQualMonLoggingUpDownDelayUpMax, st1020v2PRoutDhcpRelaySSCTable=st1020v2PRoutDhcpRelaySSCTable, pt1020v2PRoutRoutingTableSSCTable=pt1020v2PRoutRoutingTableSSCTable, at1020v2PRoutPingDataIpAddress=at1020v2PRoutPingDataIpAddress, et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOn=et1020v2PRoutQualMonDestinationsLossAlarmAlarmUpOn, et1020v2PRoutQualMonUdpServerPort=et1020v2PRoutQualMonUdpServerPort, pt1020v2PRoutQualMonLoggingUpDownJitterDownPosMax=pt1020v2PRoutQualMonLoggingUpDownJitterDownPosMax, et1020v2PRoutHelperProtocols=et1020v2PRoutHelperProtocols, pt1020v2PRoutQualMonUpDownDelayDownMax=pt1020v2PRoutQualMonUpDownDelayDownMax, st1020v2PRoutRoutingTableNetwork=st1020v2PRoutRoutingTableNetwork, st1020v2PRoutDnsUpdCliName=st1020v2PRoutDnsUpdCliName, pt1020v2PRoutQualMonLoggingUpDownJitterUpAvrg=pt1020v2PRoutQualMonLoggingUpDownJitterUpAvrg, st1020v2PRoutDnsUpdCliDnsProvDynDnsState=st1020v2PRoutDnsUpdCliDnsProvDynDnsState, pt1020v2PRoutPingResultsRepTimMax=pt1020v2PRoutPingResultsRepTimMax, ft1020v2PRoutAlarmDiscriminator=ft1020v2PRoutAlarmDiscriminator, pt1020v2PRoutRadiusAuthTableIx=pt1020v2PRoutRadiusAuthTableIx, ft1020v2PRoutAlarmE2PingActiveOff=ft1020v2PRoutAlarmE2PingActiveOff, pt1020v2PRoutUdpServerSessionsNbrPckt=pt1020v2PRoutUdpServerSessionsNbrPckt, ft1020v2PRoutAlarmE2Entry=ft1020v2PRoutAlarmE2Entry, et1020v2PRoutDhcpStatDnsSetting=et1020v2PRoutDhcpStatDnsSetting, pt1020v2PRoutRoutingTableIf=pt1020v2PRoutRoutingTableIf, at1020v2PRoutUnBlacklist=at1020v2PRoutUnBlacklist, pt1020v2PRoutQualMonDelayMax=pt1020v2PRoutQualMonDelayMax, st1020v2PRoutDhcpBlacklistSSCTable=st1020v2PRoutDhcpBlacklistSSCTable, et1020v2PRoutQualMonDestinationsName=et1020v2PRoutQualMonDestinationsName, et1020v2PRoutRoutingTableMetric=et1020v2PRoutRoutingTableMetric, st1020v2PRoutInterfacesAddress=st1020v2PRoutInterfacesAddress, et1020v2PRoutRipNeighborsIpAddress=et1020v2PRoutRipNeighborsIpAddress, ft1020v2PRoutAlarmE2QMonLossOn=ft1020v2PRoutAlarmE2QMonLossOn, pt1020v2PRoutQualMon=pt1020v2PRoutQualMon, et1020v2PRoutRadiusLogin=et1020v2PRoutRadiusLogin, et1020v2PRoutDnsUpdCliDnsProvDynDnsMode=et1020v2PRoutDnsUpdCliDnsProvDynDnsMode, pt1020v2PRoutQualMonUpDownDelayDownAvrg=pt1020v2PRoutQualMonUpDownDelayDownAvrg, et1020v2PRoutAddrPoolsName=et1020v2PRoutAddrPoolsName, et1020v2PRoutQualMonDestinationsTxGateway=et1020v2PRoutQualMonDestinationsTxGateway, st1020v2PRoutRoutingTableTimeOut=st1020v2PRoutRoutingTableTimeOut, at1020v2PRoutAddr=at1020v2PRoutAddr, pt1020v2PRoutQualMonLossDelay=pt1020v2PRoutQualMonLossDelay, et1020v2PRoutRadiusAuthServersTimeOut=et1020v2PRoutRadiusAuthServersTimeOut, at1020v2PRoutInterfaceName=at1020v2PRoutInterfaceName, et1020v2PRoutDhcpStatOptionsValueAscii=et1020v2PRoutDhcpStatOptionsValueAscii, pt1020v2PRoutUdpServerSSCTable=pt1020v2PRoutUdpServerSSCTable, st1020v2PRoutIgmpTableSSCTable=st1020v2PRoutIgmpTableSSCTable, et1020v2PRoutQualMonUdpServerPortEntry=et1020v2PRoutQualMonUdpServerPortEntry, pt1020v2PRoutRadiusAcctRequests=pt1020v2PRoutRadiusAcctRequests, et1020v2PRoutDhcpStatBootFile=et1020v2PRoutDhcpStatBootFile, pt1020v2PRoutRadiusAcctResponses=pt1020v2PRoutRadiusAcctResponses, st1020v2PRoutDnsCacheEntry=st1020v2PRoutDnsCacheEntry, et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn=et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn, et1020v2PRoutRoutingTableTableIx=et1020v2PRoutRoutingTableTableIx, st1020v2PRoutDnsServersPreference=st1020v2PRoutDnsServersPreference, et1020v2PRoutRoutingTableSSCTable=et1020v2PRoutRoutingTableSSCTable, et1020v2PRoutDnsDomainName=et1020v2PRoutDnsDomainName, st1020v2PRoutInterfacesSecondaryIpAddress=st1020v2PRoutInterfacesSecondaryIpAddress, pt1020v2PRoutQualMonDelay=pt1020v2PRoutQualMonDelay, et1020v2PRoutTacacsAuthServersSecret=et1020v2PRoutTacacsAuthServersSecret, pt1020v2PRoutQualMonLoggingUpDownLossDelayDown=pt1020v2PRoutQualMonLoggingUpDownLossDelayDown, et1020v2PRoutRadiusPpp=et1020v2PRoutRadiusPpp, pt1020v2PRoutQualMonUpDownJitterDownNegMax=pt1020v2PRoutQualMonUpDownJitterDownNegMax, pt1020v2PRoutQualMonLoggingDelayAvrg=pt1020v2PRoutQualMonLoggingDelayAvrg, st1020v2PRoutRoutingTableType=st1020v2PRoutRoutingTableType, pt1020v2PRoutQualMonSourceIp=pt1020v2PRoutQualMonSourceIp, pt1020v2PRoutRoutingTableTableIx=pt1020v2PRoutRoutingTableTableIx, et1020v2PRoutAddrPoolsActions=et1020v2PRoutAddrPoolsActions, et1020v2PRoutDhcpDynEntry=et1020v2PRoutDhcpDynEntry, pt1020v2PRoutRadiusAuthVrfRouter=pt1020v2PRoutRadiusAuthVrfRouter, et1020v2PRoutTacacsAuthServers=et1020v2PRoutTacacsAuthServers, et1020v2PRoutQualMonDestinationsTos=et1020v2PRoutQualMonDestinationsTos, ft1020v2PRoutAlarmE2PingActivePfx=ft1020v2PRoutAlarmE2PingActivePfx, et1020v2PRoutDhcpStatMask=et1020v2PRoutDhcpStatMask, pt1020v2PRoutRadiusAuth=pt1020v2PRoutRadiusAuth, pt1020v2PRoutQualMonLoggingUpDownLossUp=pt1020v2PRoutQualMonLoggingUpDownLossUp, at1020v2PRoutForceDnsUpdate=at1020v2PRoutForceDnsUpdate, st1020v2PRoutDnsServersRcvdInterface=st1020v2PRoutDnsServersRcvdInterface, et1020v2PRoutDhcpStatBootFileOption=et1020v2PRoutDhcpStatBootFileOption, pt1020v2PRoutIpFragmentsReceivedFrames=pt1020v2PRoutIpFragmentsReceivedFrames, st1020v2PRoutAddrPoolsAvailAddresses=st1020v2PRoutAddrPoolsAvailAddresses, st1020v2PRoutDhcpRelayLeaseTime=st1020v2PRoutDhcpRelayLeaseTime, pt1020v2PRout=pt1020v2PRout, et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn=et1020v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn, pt1020v2PRoutQualMonAlarm=pt1020v2PRoutQualMonAlarm, st1020v2PRoutDhcpBindingSSCTable=st1020v2PRoutDhcpBindingSSCTable, et1020v2PRoutR2ScrtTblActions=et1020v2PRoutR2ScrtTblActions, st1020v2PRoutRoutingTableTableIx=st1020v2PRoutRoutingTableTableIx, st1020v2PRoutDhcpStatHold=st1020v2PRoutDhcpStatHold, et1020v2PRoutQualMonDestinationsProtocolIcmp=et1020v2PRoutQualMonDestinationsProtocolIcmp, st1020v2PRoutDnsCacheTableIx=st1020v2PRoutDnsCacheTableIx, et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOff=et1020v2PRoutQualMonDestinationsLossAlarmAlarmDownOff, et1020v2PRoutRoutingTableNetwork=et1020v2PRoutRoutingTableNetwork, pt1020v2PRoutRadiusAuthAccepts=pt1020v2PRoutRadiusAuthAccepts, st1020v2PRoutDnsServersPrimaryDns=st1020v2PRoutDnsServersPrimaryDns, et1020v2PRoutQualMonSSC=et1020v2PRoutQualMonSSC, et1020v2PRoutSendPortUnreachable=et1020v2PRoutSendPortUnreachable, st1020v2PRoutInterfacesSSCTable=st1020v2PRoutInterfacesSSCTable, et1020v2PRoutRadiusAuthServersSecret=et1020v2PRoutRadiusAuthServersSecret, at1020v2PRoutDnsUpdateName=at1020v2PRoutDnsUpdateName, pt1020v2PRoutQualMonUpDownDelayUpMin=pt1020v2PRoutQualMonUpDownDelayUpMin, et1020v2PRoutDhcpCustomVendorId=et1020v2PRoutDhcpCustomVendorId, st1020v2PRoutRoutingTablePref=st1020v2PRoutRoutingTablePref, t1020v2PRoutMOPropEntry=t1020v2PRoutMOPropEntry, st1020v2PRoutRadiusSSC=st1020v2PRoutRadiusSSC, pt1020v2PRoutQualMonLoggingJitterPosMax=pt1020v2PRoutQualMonLoggingJitterPosMax, at1020v2PRoutTracertDataHostName=at1020v2PRoutTracertDataHostName, et1020v2PRoutTacacsEntry=et1020v2PRoutTacacsEntry, pt1020v2PRoutQualMonUpDownJitterUpPosMax=pt1020v2PRoutQualMonUpDownJitterUpPosMax, pt1020v2PRoutRoutingTableMask=pt1020v2PRoutRoutingTableMask, PYSNMP_MODULE_ID=t1020RouterRootv2, pt1020v2PRoutUdpServerEntry=pt1020v2PRoutUdpServerEntry, et1020v2PRoutPppSecretTable=et1020v2PRoutPppSecretTable, et1020v2PRoutPppSecretTableActions=et1020v2PRoutPppSecretTableActions, at1020v2PRoutTracertDataTos=at1020v2PRoutTracertDataTos, at1020v2PRoutUnBlacklistDataEntry=at1020v2PRoutUnBlacklistDataEntry, et1020v2PRoutDnsIpV6Router=et1020v2PRoutDnsIpV6Router, et1020v2PRoutQualMonDestinationsEntry=et1020v2PRoutQualMonDestinationsEntry, ft1020v2PRoutAlarmPrevious=ft1020v2PRoutAlarmPrevious, et1020v2PRoutRoutingTableMask=et1020v2PRoutRoutingTableMask, pt1020v2PRoutQualMonJitter=pt1020v2PRoutQualMonJitter, st1020v2PRoutDhcpRelayAssignedIp=st1020v2PRoutDhcpRelayAssignedIp, ft1020v2PRoutAlarmE2QMonDelayOn=ft1020v2PRoutAlarmE2QMonDelayOn, et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn=et1020v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn, at1020v2PRoutTracertDataMaxHops=at1020v2PRoutTracertDataMaxHops, et1020v2PRoutDhcpDyn=et1020v2PRoutDhcpDyn, at1020v2PRoutSendRipReqAction=at1020v2PRoutSendRipReqAction, ft1020v2PRoutAlarmEntry=ft1020v2PRoutAlarmEntry, et1020v2PRoutAddrPoolsEntry=et1020v2PRoutAddrPoolsEntry, at1020v2PRoutPingDataTos=at1020v2PRoutPingDataTos, pt1020v2PRoutRadiusAuthServer=pt1020v2PRoutRadiusAuthServer, et1020v2PRoutRoutingTableGateway=et1020v2PRoutRoutingTableGateway, et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff=et1020v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff, pt1020v2PRoutQualMonUpDownJitterUpAvrg=pt1020v2PRoutQualMonUpDownJitterUpAvrg, pt1020v2PRoutQualMonUpDownLossDown=pt1020v2PRoutQualMonUpDownLossDown, st1020v2PRoutDnsUpdCliSSCTable=st1020v2PRoutDnsUpdCliSSCTable, et1020v2PRoutTacacsAuthServersEncModeSecret=et1020v2PRoutTacacsAuthServersEncModeSecret, et1020v2PRoutAddrPoolsTableIx=et1020v2PRoutAddrPoolsTableIx, et1020v2PRoutDhcpStatNetbiosNT=et1020v2PRoutDhcpStatNetbiosNT, st1020v2PRoutPoolReservations=st1020v2PRoutPoolReservations, et1020v2PRoutRipNeighborsSSCTable=et1020v2PRoutRipNeighborsSSCTable, pt1020v2PRoutIgmpProxySSC=pt1020v2PRoutIgmpProxySSC, et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff=et1020v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff, pt1020v2PRoutRadiusAuthRequests=pt1020v2PRoutRadiusAuthRequests, ft1020v2PRoutAlarmE2QMonLossPfx=ft1020v2PRoutAlarmE2QMonLossPfx, pt1020v2PRoutPingResultsRepTimMin=pt1020v2PRoutPingResultsRepTimMin, et1020v2PRoutQualMonDestinationsTableIx=et1020v2PRoutQualMonDestinationsTableIx, at1020v2PRoutPingDataHostName=at1020v2PRoutPingDataHostName, pt1020v2PRoutQualMonLoggingDate=pt1020v2PRoutQualMonLoggingDate, et1020v2PRoutQualMonMonitor=et1020v2PRoutQualMonMonitor, st1020v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket=st1020v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket, et1020v2PRoutDhcpDynNetbiosNS=et1020v2PRoutDhcpDynNetbiosNS, et1020v2PRoutAddrPoolsPoolListActions=et1020v2PRoutAddrPoolsPoolListActions, pt1020v2PRoutUdpServerSessionsFirstActivityTime=pt1020v2PRoutUdpServerSessionsFirstActivityTime, st1020v2PRoutInterfacesIfDescr=st1020v2PRoutInterfacesIfDescr, pt1020v2PRoutTacacsAuthAuthenticationStartPkts=pt1020v2PRoutTacacsAuthAuthenticationStartPkts, pt1020v2PRoutQualMonJitterPosMax=pt1020v2PRoutQualMonJitterPosMax, et1020v2PRoutDhcpDynDomainName=et1020v2PRoutDhcpDynDomainName, pt1020v2PRoutQualMonError=pt1020v2PRoutQualMonError, at1020v2PRoutTracertDataResolveHosts=at1020v2PRoutTracertDataResolveHosts, t1020RouterRootv2=t1020RouterRootv2, pt1020v2PRoutRoutingTable=pt1020v2PRoutRoutingTable, st1020v2PRoutDnsDomains=st1020v2PRoutDnsDomains, pt1020v2PRoutUdpServerTableIx=pt1020v2PRoutUdpServerTableIx, et1020v2PRoutDhcpDynNetbiosNS2=et1020v2PRoutDhcpDynNetbiosNS2, pt1020v2PRoutRoutingTableEntry=pt1020v2PRoutRoutingTableEntry, st1020v2PRoutInterfacesSecondaryIpNetMask=st1020v2PRoutInterfacesSecondaryIpNetMask, et1020v2PRoutTacacsAuthServersSource=et1020v2PRoutTacacsAuthServersSource, et1020v2PRoutDhcpStatSSCTable=et1020v2PRoutDhcpStatSSCTable, et1020v2PRoutLogMode=et1020v2PRoutLogMode, ft1020v2PRoutAlarmE2PingActiveOn=ft1020v2PRoutAlarmE2PingActiveOn, pt1020v2PRoutTracertResultsNrTx=pt1020v2PRoutTracertResultsNrTx, et1020v2PRoutAddrPoolsPoolListNetMask=et1020v2PRoutAddrPoolsPoolListNetMask, pt1020v2PRoutRadiusAuthEntry=pt1020v2PRoutRadiusAuthEntry, et1020v2PRoutRadiusAcctServerSource=et1020v2PRoutRadiusAcctServerSource, pt1020v2PRoutRadiusAcctSSC=pt1020v2PRoutRadiusAcctSSC, st1020v2PRoutPoolReservationsType=st1020v2PRoutPoolReservationsType, et1020v2PRoutDnsSSC=et1020v2PRoutDnsSSC, st1020v2PRoutIgmpTable=st1020v2PRoutIgmpTable, et1020v2PRoutDhcpStatInterface=et1020v2PRoutDhcpStatInterface, at1020v2PRoutClearTracert=at1020v2PRoutClearTracert, pt1020v2PRoutTracertResultsComment=pt1020v2PRoutTracertResultsComment, ft1020v2PRoutAlarmSSC=ft1020v2PRoutAlarmSSC, at1020v2PRoutTracertDataEntry=at1020v2PRoutTracertDataEntry, st1020v2PRoutDhcpStatInterface=st1020v2PRoutDhcpStatInterface, et1020v2PRoutHostsTableIx=et1020v2PRoutHostsTableIx, pt1020v2PRoutQualMonLoggingLossDelay=pt1020v2PRoutQualMonLoggingLossDelay, st1020v2PRoutDnsServersStatus=st1020v2PRoutDnsServersStatus, at1020v2PRoutStopPing=at1020v2PRoutStopPing, st1020v2PRoutDhcpRelayServerIp=st1020v2PRoutDhcpRelayServerIp, et1020v2PRoutDhcpDynNetbiosNT=et1020v2PRoutDhcpDynNetbiosNT, et1020v2PRoutDhcpStatOptions=et1020v2PRoutDhcpStatOptions, et1020v2PRoutDnsUpdCliDnsProvDynDnsMxName=et1020v2PRoutDnsUpdCliDnsProvDynDnsMxName, et1020v2PRoutDhcpDynIpStartAddress=et1020v2PRoutDhcpDynIpStartAddress, et1020v2PRoutLog=et1020v2PRoutLog, et1020v2PRoutRadiusRetries=et1020v2PRoutRadiusRetries, ft1020v2PRoutAlarmE2QMonJitter=ft1020v2PRoutAlarmE2QMonJitter)
