#
# PySNMP MIB module R1645v2-QUALMON (http://pysnmp.sf.net)
# ASN.1 source file:///opt/xee/dev/mibs/asn1/oneaccess/R1645v2-QUALMON
# Produced by pysmi-0.0.6 at Mon Jan 18 23:39:49 2016
# On host ubuntu platform Linux version 3.19.0-31-generic by user dkor
# Using Python version 2.7.9 (default, Apr  2 2015, 15:33:21) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( Ipv6AddressPrefix, Ipv6Address, ) = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6Address")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, IpAddress, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
( LocalIndex, tlsTrapDescription, VariableLengthTableActions, GlobalIndex, tlsCntTreeGlobalIndex, tlsSeverityLevel, TableIndex, ObjectRevision, FixedLengthTableActions, telindus, ContainmentPath, tlsTrapSeverityLevel, ) = mibBuilder.importSymbols("TELINDUS-SMI", "LocalIndex", "tlsTrapDescription", "VariableLengthTableActions", "GlobalIndex", "tlsCntTreeGlobalIndex", "tlsSeverityLevel", "TableIndex", "ObjectRevision", "FixedLengthTableActions", "telindus", "ContainmentPath", "tlsTrapSeverityLevel")
r1645Rootv2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 776, 1126))
if mibBuilder.loadTexts: r1645Rootv2.setLastUpdated('201410030518Z')
if mibBuilder.loadTexts: r1645Rootv2.setOrganization('OneAccess')
if mibBuilder.loadTexts: r1645Rootv2.setContactInfo('http://www.oneaccess-net.com/telindus/')
if mibBuilder.loadTexts: r1645Rootv2.setDescription('...')
r1645v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093))
r1645v2PRoutMOProp = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 1))
r1645v2PRoutMOPropEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 1, 1))
r1645v2PRoutMOPropPath = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 1, 1, 3), ContainmentPath()).setMaxAccess("readonly")
if mibBuilder.loadTexts: r1645v2PRoutMOPropPath.setDescription('Textual description of the containment tree from the instance of\r\n       the root object down to the instance of the current object.')
r1645v2PRoutMOPropRev = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 1, 1, 4), ObjectRevision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: r1645v2PRoutMOPropRev.setDescription('This value corresponds with the revision of the MANAGED OBJECT.')
er1645v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11))
er1645v2PRoutSendPortUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutSendPortUnreachable.setDescription("Path: router.editConf.sendPortUnreachable\r\n       Info: indicates if a ICMP Port Unreachable must be returned to a packet's source if\r\n                        the destination port is unknown\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
er1645v2PRoutSendAdminUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 56), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutSendAdminUnreachable.setDescription("Path: router.editConf.sendAdminUnreachable\r\n       Info: indicates if an ICMP can be returned to a packet's source if\r\n                        the packet is discarded\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
er1645v2PRoutSendHostUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutSendHostUnreachable.setDescription("Path: router.editConf.sendHostUnreachable\r\n       Info: indicates if a ICMP Host Unreachable must be returned to a packet's source if\r\n                        the destination host is unknown\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
er1645v2PRoutRipUpInt = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 35), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRipUpInt.setDescription('Path: router.editConf.ripUpdateInterval\r\n       Info: delay between RIP updates sent\r\n\r\n       Time in centi-second.')
er1645v2PRoutRipNeighbors = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 50))
er1645v2PRoutRipNeighborsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 50, 1), )
if mibBuilder.loadTexts: er1645v2PRoutRipNeighborsSSCTable.setDescription('rip neighbor table')
er1645v2PRoutRipNeighborsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 50, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutRipNeighborsTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutRipNeighborsEntry.setDescription('')
er1645v2PRoutRipNeighborsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 50, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRipNeighborsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutRipNeighborsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 50, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutRipNeighborsTableIx.setDescription('')
er1645v2PRoutRipNeighborsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 50, 1, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRipNeighborsIpAddress.setDescription('Path: router.editConf.ripNeighbors.ipAddress')
er1645v2PRoutMulticastRouting = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutMulticastRouting.setDescription('Path: router.editConf.multicastRouting\r\n       Info: indicates if multicast routing (PIM/IGMP) is supported\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
er1645v2PRoutSysSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutSysSecret.setDescription('Path: router.editConf.sysSecret\r\n       Info: gives our secret for PPP authentication')
er1645v2PRoutPppSecretTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 41))
er1645v2PRoutPppSecretTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 41, 1), )
if mibBuilder.loadTexts: er1645v2PRoutPppSecretTableSSCTable.setDescription('table to store secret values for PPP authentication')
er1645v2PRoutPppSecretTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 41, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutPppSecretTableTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutPppSecretTableEntry.setDescription('')
er1645v2PRoutPppSecretTableActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 41, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutPppSecretTableActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutPppSecretTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 41, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutPppSecretTableTableIx.setDescription('')
er1645v2PRoutPppSecretTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 41, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutPppSecretTableName.setDescription('Path: router.editConf.pppSecretTable.name')
er1645v2PRoutPppSecretTableSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 41, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutPppSecretTableSecret.setDescription('Path: router.editConf.pppSecretTable.secret')
er1645v2PRoutDhcpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51))
er1645v2PRoutDhcpStatSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1), )
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatSSCTable.setDescription('Initialisation DHCP server')
er1645v2PRoutDhcpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutDhcpStatTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatEntry.setDescription('')
er1645v2PRoutDhcpStatActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutDhcpStatTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatTableIx.setDescription('')
er1645v2PRoutDhcpStatIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatIpAddress.setDescription('Path: router.editConf.dhcpStatic.ipAddress')
er1645v2PRoutDhcpStatMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatMask.setDescription('Path: router.editConf.dhcpStatic.mask')
er1645v2PRoutDhcpStatGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatGateway.setDescription('Path: router.editConf.dhcpStatic.gateway')
er1645v2PRoutDhcpStatInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 268435456), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatInterface.setDescription('Path: router.editConf.dhcpStatic.interface')
er1645v2PRoutDhcpStatDnsSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 285212672), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("configured", 0), ("learned", 1), ("relay", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatDnsSetting.setDescription('Path: router.editConf.dhcpStatic.dnsSetting\r\n\r\n       Possibilities:\r\n               configured   (0)\r\n               learned   (1)\r\n               relay   (2)')
er1645v2PRoutDhcpStatNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatNameServer.setDescription('Path: router.editConf.dhcpStatic.nameServer')
er1645v2PRoutDhcpStatNameServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 234881024), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatNameServer2.setDescription('Path: router.editConf.dhcpStatic.nameServer2')
er1645v2PRoutDhcpStatTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 83886080), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatTftpServer.setDescription('Path: router.editConf.dhcpStatic.tftpServer')
er1645v2PRoutDhcpStatTftpServerOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 335544320), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatTftpServerOption.setDescription('Path: router.editConf.dhcpStatic.tftpServerOption')
er1645v2PRoutDhcpStatMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 100663296), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatMacAddress.setDescription('Path: router.editConf.dhcpStatic.macAddress\r\n\r\n       MAC address.')
er1645v2PRoutDhcpStatBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 117440512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatBootFile.setDescription('Path: router.editConf.dhcpStatic.bootFile')
er1645v2PRoutDhcpStatBootFileOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 352321536), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatBootFileOption.setDescription('Path: router.editConf.dhcpStatic.bootFileOption')
er1645v2PRoutDhcpStatHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 134217728), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatHostName.setDescription('Path: router.editConf.dhcpStatic.hostName')
er1645v2PRoutDhcpStatDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatDomainName.setDescription('Path: router.editConf.dhcpStatic.domainName')
er1645v2PRoutDhcpStatNetbiosNS = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 167772160), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatNetbiosNS.setDescription('Path: router.editConf.dhcpStatic.netbiosNameServer')
er1645v2PRoutDhcpStatNetbiosNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 251658240), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatNetbiosNS2.setDescription('Path: router.editConf.dhcpStatic.netbiosNameServer2')
er1645v2PRoutDhcpStatNetbiosNT = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 1, 1, 184549376), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4, 8,)).clone(namedValues=NamedValues(("nomnode", 0), ("bmnode", 1), ("pmnode", 2), ("mmnode", 4), ("hmnode", 8),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatNetbiosNT.setDescription('Path: router.editConf.dhcpStatic.netbiosNodeType\r\n\r\n       Possibilities:\r\n               no-node   (0)\r\n               B-node   (1)\r\n               P-node   (2)\r\n               M-node   (4)\r\n               H-node   (8)')
er1645v2PRoutDhcpStatOptions = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184), )
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptions.setDescription('')
er1645v2PRoutDhcpStatOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutDhcpStatTableIx"), (0, "R1645v2-QUALMON", "er1645v2PRoutDhcpStatOptionsTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsEntry.setDescription('')
er1645v2PRoutDhcpStatOptionsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutDhcpStatOptionsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsTableIx.setDescription('')
er1645v2PRoutDhcpStatOptionsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsCode.setDescription('Path: router.editConf.dhcpStatic.options.code')
er1645v2PRoutDhcpStatOptionsValueAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1, 33619968), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsValueAscii.setDescription('Path: router.editConf.dhcpStatic.options.value.ascii')
er1645v2PRoutDhcpStatOptionsValueDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1, 33685504), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsValueDecimal.setDescription('Path: router.editConf.dhcpStatic.options.value.decimal')
er1645v2PRoutDhcpStatOptionsValueHexData = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1, 33751040), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsValueHexData.setDescription('Path: router.editConf.dhcpStatic.options.value.hexData')
er1645v2PRoutDhcpStatOptionsValueIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 51, 402653184, 1, 33816576), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpStatOptionsValueIpAddress.setDescription('Path: router.editConf.dhcpStatic.options.value.ipAddress')
er1645v2PRoutDhcpDyn = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52))
er1645v2PRoutDhcpDynSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1), )
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynSSCTable.setDescription('Initialisation DHCP server')
er1645v2PRoutDhcpDynEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutDhcpDynTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynEntry.setDescription('')
er1645v2PRoutDhcpDynActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutDhcpDynTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynTableIx.setDescription('')
er1645v2PRoutDhcpDynIpcpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 301989888), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynIpcpSubnet.setDescription('Path: router.editConf.dhcpDynamic.ipcpSubnet')
er1645v2PRoutDhcpDynIpStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynIpStartAddress.setDescription('Path: router.editConf.dhcpDynamic.ipStartAddress')
er1645v2PRoutDhcpDynIpEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynIpEndAddress.setDescription('Path: router.editConf.dhcpDynamic.ipEndAddress')
er1645v2PRoutDhcpDynMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynMask.setDescription('Path: router.editConf.dhcpDynamic.mask')
er1645v2PRoutDhcpDynGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynGateway.setDescription('Path: router.editConf.dhcpDynamic.gateway')
er1645v2PRoutDhcpDynInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 268435456), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynInterface.setDescription('Path: router.editConf.dhcpDynamic.interface')
er1645v2PRoutDhcpDynDnsSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 285212672), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("configured", 0), ("learned", 1), ("relay", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynDnsSetting.setDescription('Path: router.editConf.dhcpDynamic.dnsSetting\r\n\r\n       Possibilities:\r\n               configured   (0)\r\n               learned   (1)\r\n               relay   (2)')
er1645v2PRoutDhcpDynNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 83886080), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynNameServer.setDescription('Path: router.editConf.dhcpDynamic.nameServer')
er1645v2PRoutDhcpDynNameServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 234881024), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynNameServer2.setDescription('Path: router.editConf.dhcpDynamic.nameServer2')
er1645v2PRoutDhcpDynTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 100663296), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynTftpServer.setDescription('Path: router.editConf.dhcpDynamic.tftpServer')
er1645v2PRoutDhcpDynTftpServerOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 335544320), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynTftpServerOption.setDescription('Path: router.editConf.dhcpDynamic.tftpServerOption')
er1645v2PRoutDhcpDynLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 117440512), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynLeaseTime.setDescription('Path: router.editConf.dhcpDynamic.leaseTime\r\n\r\n       Time in centi-second.')
er1645v2PRoutDhcpDynHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 134217728), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynHoldTime.setDescription('Path: router.editConf.dhcpDynamic.holdTime\r\n\r\n       Time in centi-second.')
er1645v2PRoutDhcpDynBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynBootFile.setDescription('Path: router.editConf.dhcpDynamic.bootFile')
er1645v2PRoutDhcpDynBootFileOption = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 352321536), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynBootFileOption.setDescription('Path: router.editConf.dhcpDynamic.bootFileOption')
er1645v2PRoutDhcpDynHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 167772160), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynHostName.setDescription('Path: router.editConf.dhcpDynamic.hostName')
er1645v2PRoutDhcpDynDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 184549376), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynDomainName.setDescription('Path: router.editConf.dhcpDynamic.domainName')
er1645v2PRoutDhcpDynNetbiosNS = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 201326592), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynNetbiosNS.setDescription('Path: router.editConf.dhcpDynamic.netbiosNameServer')
er1645v2PRoutDhcpDynNetbiosNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 251658240), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynNetbiosNS2.setDescription('Path: router.editConf.dhcpDynamic.netbiosNameServer2')
er1645v2PRoutDhcpDynNetbiosNT = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 1, 1, 218103808), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4, 8,)).clone(namedValues=NamedValues(("nomnode", 0), ("bmnode", 1), ("pmnode", 2), ("mmnode", 4), ("hmnode", 8),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynNetbiosNT.setDescription('Path: router.editConf.dhcpDynamic.netbiosNodeType\r\n\r\n       Possibilities:\r\n               no-node   (0)\r\n               B-node   (1)\r\n               P-node   (2)\r\n               M-node   (4)\r\n               H-node   (8)')
er1645v2PRoutDhcpDynOptions = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184), )
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptions.setDescription('')
er1645v2PRoutDhcpDynOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutDhcpDynTableIx"), (0, "R1645v2-QUALMON", "er1645v2PRoutDhcpDynOptionsTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsEntry.setDescription('')
er1645v2PRoutDhcpDynOptionsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutDhcpDynOptionsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsTableIx.setDescription('')
er1645v2PRoutDhcpDynOptionsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsCode.setDescription('Path: router.editConf.dhcpDynamic.options.code')
er1645v2PRoutDhcpDynOptionsValueAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1, 33619968), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsValueAscii.setDescription('Path: router.editConf.dhcpDynamic.options.value.ascii')
er1645v2PRoutDhcpDynOptionsValueDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1, 33685504), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsValueDecimal.setDescription('Path: router.editConf.dhcpDynamic.options.value.decimal')
er1645v2PRoutDhcpDynOptionsValueHexData = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1, 33751040), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsValueHexData.setDescription('Path: router.editConf.dhcpDynamic.options.value.hexData')
er1645v2PRoutDhcpDynOptionsValueIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 52, 402653184, 1, 33816576), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpDynOptionsValueIpAddress.setDescription('Path: router.editConf.dhcpDynamic.options.value.ipAddress')
er1645v2PRoutDhcpCheckAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 53), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("arpOnly", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpCheckAddress.setDescription('Path: router.editConf.dhcpCheckAddress\r\n       Info: Should the DCHP server check if the given address is free\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               arpOnly   (2)')
er1645v2PRoutDhcpCustomVendorId = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 81), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDhcpCustomVendorId.setDescription('Path: router.editConf.dhcpCustomVendorId\r\n       Info: custom-defined DCHP Vendor Id')
er1645v2PRoutQualMon = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77))
er1645v2PRoutQualMonSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 1))
er1645v2PRoutQualMonEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 1, 1))
er1645v2PRoutQualMonMonitor = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonMonitor.setDescription('Path: router.editConf.qualityMonitor.monitor\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
er1645v2PRoutQualMonType = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("sequential", 0), ("concurrent", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonType.setDescription('Path: router.editConf.qualityMonitor.type\r\n\r\n       Possibilities:\r\n               sequential   (0)\r\n               concurrent   (1)')
er1645v2PRoutQualMonDestinations = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648), )
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinations.setDescription('')
er1645v2PRoutQualMonDestinationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutQualMonDestinationsTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsEntry.setDescription('')
er1645v2PRoutQualMonDestinationsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutQualMonDestinationsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsTableIx.setDescription('')
er1645v2PRoutQualMonDestinationsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 234881024), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsName.setDescription('Path: router.editConf.qualityMonitor.destinations.name')
er1645v2PRoutQualMonDestinationsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 369098752), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("enabled", 1), ("onDemand", 2), ("disabled", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsAdminStatus.setDescription('Path: router.editConf.qualityMonitor.destinations.adminStatus\r\n\r\n       Possibilities:\r\n               enabled   (1)\r\n               onDemand   (2)\r\n               disabled   (3)')
er1645v2PRoutQualMonDestinationsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsIpAddress.setDescription('Path: router.editConf.qualityMonitor.destinations.ipAddress')
er1645v2PRoutQualMonDestinationsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsHostName.setDescription('Path: router.editConf.qualityMonitor.destinations.hostName')
er1645v2PRoutQualMonDestinationsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 184549376), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsSource.setDescription('Path: router.editConf.qualityMonitor.destinations.source')
er1645v2PRoutQualMonDestinationsTos = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 167772160), Integer32().subtype(subtypeSpec=SingleValueConstraint(32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsTos.setDescription('Path: router.editConf.qualityMonitor.destinations.tos\r\n\r\n       Possibilities:\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
er1645v2PRoutQualMonDestinationsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 218103808), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("queue1", 0), ("queue2", 1), ("queue3", 2), ("queue4", 3), ("queue5", 4), ("lowDelayQueue", 5), ("lowDelay2Queue", 6), ("systemQueue", 7),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsPriority.setDescription('Path: router.editConf.qualityMonitor.destinations.priority\r\n\r\n       Possibilities:\r\n               queue1   (0)\r\n               queue2   (1)\r\n               queue3   (2)\r\n               queue4   (3)\r\n               queue5   (4)\r\n               lowDelayQueue   (5)\r\n               lowDelay2Queue   (6)\r\n               systemQueue   (7)')
er1645v2PRoutQualMonDestinationsProtocolIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 50397184), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsProtocolIcmp.setDescription('Path: router.editConf.qualityMonitor.destinations.protocol.icmp')
er1645v2PRoutQualMonDestinationsProtocolUdpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 50462720), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsProtocolUdpEcho.setDescription('Path: router.editConf.qualityMonitor.destinations.protocol.udpEcho')
er1645v2PRoutQualMonDestinationsProtocolUdpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 50528256), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsProtocolUdpServerPort.setDescription('Path: router.editConf.qualityMonitor.destinations.protocol.udpServerPort')
er1645v2PRoutQualMonDestinationsTxInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 402653184), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsTxInterface.setDescription('Path: router.editConf.qualityMonitor.destinations.txInterface')
er1645v2PRoutQualMonDestinationsTxGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 419430400), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsTxGateway.setDescription('Path: router.editConf.qualityMonitor.destinations.txGateway')
er1645v2PRoutQualMonDestinationsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 67108864), Integer32()).setUnits('100msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsInterval.setDescription('Path: router.editConf.qualityMonitor.destinations.interval\r\n\r\n       unit name = 100msec')
er1645v2PRoutQualMonDestinationsTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 150994944), Integer32()).setUnits('100msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsTimeOut.setDescription('Path: router.editConf.qualityMonitor.destinations.timeOut\r\n\r\n       unit name = 100msec')
er1645v2PRoutQualMonDestinationsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLength.setDescription('Path: router.editConf.qualityMonitor.destinations.length')
er1645v2PRoutQualMonDestinationsIdleSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 268435456), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsIdleSamples.setDescription('Path: router.editConf.qualityMonitor.destinations.idleSamples')
er1645v2PRoutQualMonDestinationsLossAlarmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 100728832), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLossAlarmSamples.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.samples')
er1645v2PRoutQualMonDestinationsLossAlarmAlarmOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 100794368), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLossAlarmAlarmOn.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmOn')
er1645v2PRoutQualMonDestinationsLossAlarmAlarmOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 100859904), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLossAlarmAlarmOff.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmOff')
er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 100925440), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOn.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmUpOn')
er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 100990976), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOff.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmUpOff')
er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 101056512), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOn.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmDownOn')
er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 101122048), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOff.setDescription('Path: router.editConf.qualityMonitor.destinations.lossAlarm.alarmDownOff')
er1645v2PRoutQualMonDestinationsDelayAlarmSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117506048), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmSamples.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.samples')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117571584), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayAvrgOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117637120), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayAvrgOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117702656), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMaxOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117768192), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMaxOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118095872), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMinMaxOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118161408), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayMinMaxOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117833728), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterAvrgOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117899264), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterAvrgOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 117964800), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterMaxOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118030336), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterMaxOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118226944), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpAvrgOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118292480), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpAvrgOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118358016), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpMaxOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118423552), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterUpMaxOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118489088), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownAvrgOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118554624), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownAvrgOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118620160), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownMaxOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118685696), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.jitterDownMaxOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118751232), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpAvrgOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118816768), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpAvrgOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118882304), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpMaxOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 118947840), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayUpMaxOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 119013376), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownAvrgOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 119078912), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownAvrgOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 119144448), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownMaxOn\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 119209984), Integer32()).setUnits('msec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff.setDescription('Path: router.editConf.qualityMonitor.destinations.delayAlarm.delayDownMaxOff\r\n\r\n       unit name = msec')
er1645v2PRoutQualMonDestinationsAlarmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 251658240), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsAlarmMask.setDescription('Path: router.editConf.qualityMonitor.destinations.alarmMask\r\n\r\n       Bit meanings:\r\n               bit 0 = loss,\r\n               bit 1 = delayAvrg,\r\n               bit 2 = delayMax,\r\n               bit 3 = delayMinMax,\r\n               bit 4 = jitterAvrg,\r\n               bit 5 = jitterPosMax,\r\n               bit 6 = jitterNegMax,\r\n               bit 7 = lossUp,\r\n               bit 8 = jitterUpAvrg,\r\n               bit 9 = jitterUpPosMax,\r\n               bit 10 = jitterUpNegMax,\r\n               bit 11 = lossDown,\r\n               bit 12 = jitterDownAvrg,\r\n               bit 13 = jitterDownPosMax,\r\n               bit 14 = jitterDownNegMax,\r\n               bit 15 = delayUpAvrg,\r\n               bit 16 = delayUpMax,\r\n               bit 17 = delayDownAvrg,\r\n               bit 18 = delayDownMax')
er1645v2PRoutQualMonDestinationsLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 201326592), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 3, 5, 10, 15, 30, 60,)).clone(namedValues=NamedValues(("disabled", 0), ("s3min", 3), ("s5min", 5), ("s10min", 10), ("s15min", 15), ("s30min", 30), ("s60min", 60),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLogging.setDescription('Path: router.editConf.qualityMonitor.destinations.logging\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               3min   (3)\r\n               5min   (5)\r\n               10min   (10)\r\n               15min   (15)\r\n               30min   (30)\r\n               60min   (60)')
er1645v2PRoutQualMonDestinationsLoggingDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 50331648, 1, 503316480), Integer32().subtype(subtypeSpec=SingleValueConstraint(4, 8, 16, 32, 128, 512, 1024,)).clone(namedValues=NamedValues(("s4", 4), ("s8", 8), ("s16", 16), ("s32", 32), ("s128", 128), ("s512", 512), ("s1024", 1024),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonDestinationsLoggingDepth.setDescription('Path: router.editConf.qualityMonitor.destinations.loggingDepth\r\n\r\n       Possibilities:\r\n               4   (4)\r\n               8   (8)\r\n               16   (16)\r\n               32   (32)\r\n               128   (128)\r\n               512   (512)\r\n               1024   (1024)')
er1645v2PRoutQualMonUdpServerPort = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 67108864), )
if mibBuilder.loadTexts: er1645v2PRoutQualMonUdpServerPort.setDescription('')
er1645v2PRoutQualMonUdpServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 67108864, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutQualMonUdpServerPortTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutQualMonUdpServerPortEntry.setDescription('')
er1645v2PRoutQualMonUdpServerPortActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 67108864, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonUdpServerPortActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutQualMonUdpServerPortTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 67108864, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutQualMonUdpServerPortTableIx.setDescription('')
er1645v2PRoutQualMonUdpServerPortDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 67108864, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonUdpServerPortDestinationPort.setDescription('Path: router.editConf.qualityMonitor.udpServerPort.destinationPort')
er1645v2PRoutQualMonUdpServerPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 67108864, 1, 218103808), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("queue1", 0), ("queue2", 1), ("queue3", 2), ("queue4", 3), ("queue5", 4), ("lowDelayQueue", 5), ("lowDelay2Queue", 6), ("systemQueue", 7),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonUdpServerPortPriority.setDescription('Path: router.editConf.qualityMonitor.udpServerPort.priority\r\n\r\n       Possibilities:\r\n               queue1   (0)\r\n               queue2   (1)\r\n               queue3   (2)\r\n               queue4   (3)\r\n               queue5   (4)\r\n               lowDelayQueue   (5)\r\n               lowDelay2Queue   (6)\r\n               systemQueue   (7)')
er1645v2PRoutQualMonUdpServerPortTos = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 77, 67108864, 1, 167772160), Integer32().subtype(subtypeSpec=SingleValueConstraint(-1, 32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("keepTos", -1), ("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutQualMonUdpServerPortTos.setDescription('Path: router.editConf.qualityMonitor.udpServerPort.tos\r\n\r\n       Possibilities:\r\n               keepTos   (-1)\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
er1645v2PRoutHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 49))
er1645v2PRoutHostsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 49, 1), )
if mibBuilder.loadTexts: er1645v2PRoutHostsSSCTable.setDescription('table of hosts with their ip address')
er1645v2PRoutHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 49, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutHostsTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutHostsEntry.setDescription('')
er1645v2PRoutHostsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 49, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutHostsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutHostsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 49, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutHostsTableIx.setDescription('')
er1645v2PRoutHostsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 49, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutHostsHostname.setDescription('Path: router.editConf.hosts.hostname')
er1645v2PRoutHostsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 49, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutHostsIpAddress.setDescription('Path: router.editConf.hosts.ipAddress')
er1645v2PRoutDefaultRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 13))
er1645v2PRoutDefaultRouteSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 13, 1))
er1645v2PRoutDefaultRouteEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 13, 1, 1))
er1645v2PRoutDefaultRouteGateway = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 13, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDefaultRouteGateway.setDescription('Path: router.editConf.defaultRoute.gateway')
er1645v2PRoutDefaultRouteInterface = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 13, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDefaultRouteInterface.setDescription('Path: router.editConf.defaultRoute.interface')
er1645v2PRoutDefaultRoutePreference = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 13, 1, 1, 50331648), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDefaultRoutePreference.setDescription('Path: router.editConf.defaultRoute.preference')
er1645v2PRoutDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 13, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDefaultRouteMetric.setDescription('Path: router.editConf.defaultRoute.metric')
er1645v2PRoutRoutingTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14))
er1645v2PRoutRoutingTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1), )
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableSSCTable.setDescription('routingTable')
er1645v2PRoutRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutRoutingTableTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableEntry.setDescription('')
er1645v2PRoutRoutingTableActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutRoutingTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableTableIx.setDescription('')
er1645v2PRoutRoutingTableRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 117440512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableRemark.setDescription('Path: router.editConf.routingTable.remark')
er1645v2PRoutRoutingTableNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableNetwork.setDescription('Path: router.editConf.routingTable.network')
er1645v2PRoutRoutingTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableMask.setDescription('Path: router.editConf.routingTable.mask')
er1645v2PRoutRoutingTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableGateway.setDescription('Path: router.editConf.routingTable.gateway')
er1645v2PRoutRoutingTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 67108864), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableIf.setDescription('Path: router.editConf.routingTable.interface')
er1645v2PRoutRoutingTablePref = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTablePref.setDescription('Path: router.editConf.routingTable.preference')
er1645v2PRoutRoutingTableMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 100663296), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableMetric.setDescription('Path: router.editConf.routingTable.metric')
er1645v2PRoutRoutingTableProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableProxyArp.setDescription('Path: router.editConf.routingTable.proxyArp\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
er1645v2PRoutRoutingTableTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 14, 1, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingTableTimeWindow.setDescription('Path: router.editConf.routingTable.timeWindow')
er1645v2PRoutHelperProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 15))
er1645v2PRoutHelperProtocolsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 15, 1), )
if mibBuilder.loadTexts: er1645v2PRoutHelperProtocolsSSCTable.setDescription('list of protocols to be forwarded by the IP helpers')
er1645v2PRoutHelperProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 15, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutHelperProtocolsTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutHelperProtocolsEntry.setDescription('')
er1645v2PRoutHelperProtocolsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 15, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutHelperProtocolsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutHelperProtocolsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 15, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutHelperProtocolsTableIx.setDescription('')
er1645v2PRoutHelperProtocolsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 15, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutHelperProtocolsType.setDescription('Path: router.editConf.helperProtocols.protocol')
er1645v2PRoutSendTtlExceeded = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutSendTtlExceeded.setDescription("Path: router.editConf.sendTtlExceeded\r\n       Info: indicates if a ICMP TTL exceeded must be returned to a packet's spurce if the TTL reaches 0 \r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)")
er1645v2PRoutRoutingProtocol = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("none", 0), ("rip2", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRoutingProtocol.setDescription('Path: router.editConf.routingProtocol\r\n       Info: indicates which dynamic routing protocol should be used\r\n\r\n       Possibilities:\r\n               none   (0)\r\n               rip2   (1)')
er1645v2PRoutRipHoldDownTime = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 78), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRipHoldDownTime.setDescription('Path: router.editConf.ripHoldDownTime\r\n       Info: Time to wait before accepting better routes in order to prevent instable route-flapping\r\n\r\n       Time in centi-second.')
er1645v2PRoutAlarmMask = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 135), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAlarmMask.setDescription('Path: router.editConf.alarmMask\r\n       Info: routAlarmMask\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
er1645v2PRoutAlarmLev = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 170))
er1645v2PRoutAlarmLevSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 170, 1))
er1645v2PRoutAlarmLevEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 170, 1, 1))
er1645v2PRoutAlarmLevPingActive = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 170, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAlarmLevPingActive.setDescription('Path: router.editConf.alarmLevel.pingActive')
er1645v2PRoutAlarmLevQMonLoss = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 170, 1, 1, 33554432), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAlarmLevQMonLoss.setDescription('Path: router.editConf.alarmLevel.qMonLoss')
er1645v2PRoutAlarmLevQMonDelay = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 170, 1, 1, 50331648), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAlarmLevQMonDelay.setDescription('Path: router.editConf.alarmLevel.qMonDelay')
er1645v2PRoutAlarmLevQMonJitter = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 170, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAlarmLevQMonJitter.setDescription('Path: router.editConf.alarmLevel.qMonJitter')
er1645v2PRoutR2ScrtTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42))
er1645v2PRoutR2ScrtTblSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42, 1), )
if mibBuilder.loadTexts: er1645v2PRoutR2ScrtTblSSCTable.setDescription('table to store secret values for RIPv2 authentication')
er1645v2PRoutR2ScrtTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutR2ScrtTblTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutR2ScrtTblEntry.setDescription('')
er1645v2PRoutR2ScrtTblActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutR2ScrtTblActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutR2ScrtTblTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutR2ScrtTblTableIx.setDescription('')
er1645v2PRoutR2ScrtTblKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutR2ScrtTblKeyId.setDescription('Path: router.editConf.ripv2SecretTable.keyId')
er1645v2PRoutR2ScrtTblSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutR2ScrtTblSecret.setDescription('Path: router.editConf.ripv2SecretTable.secret')
er1645v2PRoutR2ScrtTblIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 42, 1, 1, 50331648), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutR2ScrtTblIf.setDescription('Path: router.editConf.ripv2SecretTable.interface')
er1645v2PRoutAlternativeRoutes = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 57), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("backup", 0), ("roundRobin", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAlternativeRoutes.setDescription('Path: router.editConf.alternativeRoutes\r\n       Info: indicates if load balancing has to be applied whenever multiple\r\n                        routes are available\r\n\r\n       Possibilities:\r\n               backup   (0)\r\n               roundRobin   (1)')
er1645v2PRoutRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59))
er1645v2PRoutRadiusSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1))
er1645v2PRoutRadiusEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1))
er1645v2PRoutRadiusAcctServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 1694564352), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAcctServerAddress.setDescription('Path: router.editConf.radius.acctServer.address')
er1645v2PRoutRadiusAcctServerSource = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 1694760960), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAcctServerSource.setDescription('Path: router.editConf.radius.acctServer.source')
er1645v2PRoutRadiusAcctServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 1694629888), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAcctServerSecret.setDescription('Path: router.editConf.radius.acctServer.secret')
er1645v2PRoutRadiusAcctServerEncModeSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 1694892032), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 128,)).clone(namedValues=NamedValues(("none", 1), ("encrypt", 2), ("encType1", 3), ("invalid", 128),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAcctServerEncModeSecret.setDescription('Path: router.editConf.radius.acctServer.encModeSecret\r\n\r\n       Possibilities:\r\n               none   (1)\r\n               encrypt   (2)\r\n               encType1   (3)\r\n               invalid   (128)')
er1645v2PRoutRadiusAcctServerEncSecret = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 1694957568), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAcctServerEncSecret.setDescription('Path: router.editConf.radius.acctServer.encSecret')
er1645v2PRoutRadiusAcctServerTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 1694695424), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAcctServerTimeOut.setDescription('Path: router.editConf.radius.acctServer.timeOut\r\n\r\n       Time in centi-second.')
er1645v2PRoutRadiusRetries = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 16777216), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusRetries.setDescription('Path: router.editConf.radius.retries')
er1645v2PRoutRadiusAcctUpdate = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 33554432), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAcctUpdate.setDescription('Path: router.editConf.radius.acctUpdate\r\n\r\n       Time in centi-second.')
er1645v2PRoutRadiusLogin = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 50331648), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fallback", 2), ("reverseFallback", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusLogin.setDescription('Path: router.editConf.radius.login\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               fallback   (2)\r\n               reverseFallback   (3)')
er1645v2PRoutRadiusPpp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1, 1, 67108864), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusPpp.setDescription('Path: router.editConf.radius.ppp\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
er1645v2PRoutRadiusAuthServers = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600), )
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServers.setDescription('')
er1645v2PRoutRadiusAuthServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutRadiusAuthServersTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersEntry.setDescription('')
er1645v2PRoutRadiusAuthServersActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutRadiusAuthServersTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersTableIx.setDescription('')
er1645v2PRoutRadiusAuthServersAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersAddress.setDescription('Path: router.editConf.radius.authServers.address')
er1645v2PRoutRadiusAuthServersSource = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 67108864), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersSource.setDescription('Path: router.editConf.radius.authServers.source')
er1645v2PRoutRadiusAuthServersSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersSecret.setDescription('Path: router.editConf.radius.authServers.secret')
er1645v2PRoutRadiusAuthServersEncModeSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 128,)).clone(namedValues=NamedValues(("none", 1), ("encrypt", 2), ("encType1", 3), ("invalid", 128),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersEncModeSecret.setDescription('Path: router.editConf.radius.authServers.encModeSecret\r\n\r\n       Possibilities:\r\n               none   (1)\r\n               encrypt   (2)\r\n               encType1   (3)\r\n               invalid   (128)')
er1645v2PRoutRadiusAuthServersEncSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 117440512), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersEncSecret.setDescription('Path: router.editConf.radius.authServers.encSecret')
er1645v2PRoutRadiusAuthServersTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 59, 1677721600, 1, 50331648), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutRadiusAuthServersTimeOut.setDescription('Path: router.editConf.radius.authServers.timeOut\r\n\r\n       Time in centi-second.')
er1645v2PRoutTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70))
er1645v2PRoutTacacsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 1))
er1645v2PRoutTacacsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 1, 1))
er1645v2PRoutTacacsLogin = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fallback", 2), ("reverseFallback", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsLogin.setDescription('Path: router.editConf.tacacs.login\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               fallback   (2)\r\n               reverseFallback   (3)')
er1645v2PRoutTacacsAuthServers = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216), )
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServers.setDescription('')
er1645v2PRoutTacacsAuthServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutTacacsAuthServersTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersEntry.setDescription('')
er1645v2PRoutTacacsAuthServersActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutTacacsAuthServersTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersTableIx.setDescription('')
er1645v2PRoutTacacsAuthServersAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersAddress.setDescription('Path: router.editConf.tacacs.authServers.address')
er1645v2PRoutTacacsAuthServersSource = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersSource.setDescription('Path: router.editConf.tacacs.authServers.source')
er1645v2PRoutTacacsAuthServersSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 50331648), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersSecret.setDescription('Path: router.editConf.tacacs.authServers.secret')
er1645v2PRoutTacacsAuthServersEncModeSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 128,)).clone(namedValues=NamedValues(("none", 1), ("encrypt", 2), ("encType1", 3), ("invalid", 128),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersEncModeSecret.setDescription('Path: router.editConf.tacacs.authServers.encModeSecret\r\n\r\n       Possibilities:\r\n               none   (1)\r\n               encrypt   (2)\r\n               encType1   (3)\r\n               invalid   (128)')
er1645v2PRoutTacacsAuthServersEncSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 150994944), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersEncSecret.setDescription('Path: router.editConf.tacacs.authServers.encSecret')
er1645v2PRoutTacacsAuthServersTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 70, 16777216, 1, 67108864), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutTacacsAuthServersTimeOut.setDescription('Path: router.editConf.tacacs.authServers.timeOut\r\n\r\n       Time in centi-second.')
er1645v2PRoutDns = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64))
er1645v2PRoutDnsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1))
er1645v2PRoutDnsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1))
er1645v2PRoutDnsPrimaryDns = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsPrimaryDns.setDescription('Path: router.editConf.dns.primaryDns')
er1645v2PRoutDnsSecondaryDns = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsSecondaryDns.setDescription('Path: router.editConf.dns.secondaryDns')
er1645v2PRoutDnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1, 50331648), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsDomainName.setDescription('Path: router.editConf.dns.domainName')
er1645v2PRoutDnsIpV6Router = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1, 67108864), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsIpV6Router.setDescription('Path: router.editConf.dns.ipV6Router')
er1645v2PRoutDnsPreference = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsPreference.setDescription('Path: router.editConf.dns.preference')
er1645v2PRoutDnsProxy = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsProxy.setDescription('Path: router.editConf.dns.proxy\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
er1645v2PRoutDnsCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 64, 1, 1, 117440512), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsCacheSize.setDescription('Path: router.editConf.dns.cacheSize')
er1645v2PRoutLog = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 67))
er1645v2PRoutLogSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 67, 1))
er1645v2PRoutLogEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 67, 1, 1))
er1645v2PRoutLogMode = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 67, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutLogMode.setDescription('Path: router.editConf.log.mode\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
er1645v2PRoutLogDhcpSyslogMask = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 67, 1, 1, 33554432), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutLogDhcpSyslogMask.setDescription('Path: router.editConf.log.dhcpSyslogMask\r\n\r\n       Bit meanings:\r\n               bit 0 = lease,\r\n               bit 1 = renew,\r\n               bit 2 = rebind,\r\n               bit 3 = expired')
er1645v2PRoutAddrPools = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108))
er1645v2PRoutAddrPoolsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 1), )
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsSSCTable.setDescription('ip address pool union')
er1645v2PRoutAddrPoolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutAddrPoolsTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsEntry.setDescription('')
er1645v2PRoutAddrPoolsActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutAddrPoolsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsTableIx.setDescription('')
er1645v2PRoutAddrPoolsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsName.setDescription('Path: router.editConf.addrPools.name')
er1645v2PRoutAddrPoolsPoolIntervalFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 1, 1, 33686016), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolIntervalFrom.setDescription('Path: router.editConf.addrPools.pool.interval.from')
er1645v2PRoutAddrPoolsPoolIntervalTo = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 1, 1, 33686272), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolIntervalTo.setDescription('Path: router.editConf.addrPools.pool.interval.to')
er1645v2PRoutAddrPoolsPoolList = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 33619968), )
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolList.setDescription('')
er1645v2PRoutAddrPoolsPoolListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 33619968, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutAddrPoolsTableIx"), (0, "R1645v2-QUALMON", "er1645v2PRoutAddrPoolsPoolListTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolListEntry.setDescription('')
er1645v2PRoutAddrPoolsPoolListActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 33619968, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolListActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutAddrPoolsPoolListTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 33619968, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolListTableIx.setDescription('')
er1645v2PRoutAddrPoolsPoolListLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 33619968, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolListLocal.setDescription('Path: router.editConf.addrPools.pool.list.local')
er1645v2PRoutAddrPoolsPoolListRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 33619968, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolListRemote.setDescription('Path: router.editConf.addrPools.pool.list.remote')
er1645v2PRoutAddrPoolsPoolListNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 108, 33619968, 1, 67108864), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutAddrPoolsPoolListNetMask.setDescription('Path: router.editConf.addrPools.pool.list.netMask')
er1645v2PRoutDnsUpdCli = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80))
er1645v2PRoutDnsUpdCliSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1), )
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliSSCTable.setDescription('DNS Update Client config table')
er1645v2PRoutDnsUpdCliEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "er1645v2PRoutDnsUpdCliTableIx"))
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliEntry.setDescription('')
er1645v2PRoutDnsUpdCliActions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 2), VariableLengthTableActions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliActions.setDescription('By way of this field, some manipulations\r\n       on this table may be performed.')
er1645v2PRoutDnsUpdCliTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliTableIx.setDescription('')
er1645v2PRoutDnsUpdCliName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliName.setDescription('Path: router.editConf.dnsUpdateClient.name')
er1645v2PRoutDnsUpdCliDnsProvDynDnsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33620224), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disabled", 0), ("offline", 1), ("online", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsMode.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.mode\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               offline   (1)\r\n               online   (2)')
er1645v2PRoutDnsUpdCliDnsProvDynDnsSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33620480), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1), ("custom", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsSystem.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.system\r\n\r\n       Possibilities:\r\n               dynamic   (0)\r\n               static   (1)\r\n               custom   (2)')
er1645v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33620736), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.hostNameFqdn')
er1645v2PRoutDnsUpdCliDnsProvDynDnsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33620992), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsInterface.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.interface')
er1645v2PRoutDnsUpdCliDnsProvDynDnsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33621248), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsUserName.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.userName')
er1645v2PRoutDnsUpdCliDnsProvDynDnsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33621504), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsPassword.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.password')
er1645v2PRoutDnsUpdCliDnsProvDynDnsTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33621760), Integer32().subtype(subtypeSpec=SingleValueConstraint(80, 8245,)).clone(namedValues=NamedValues(("http", 80), ("httpProxyBypass", 8245),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsTcpPort.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.tcpPort\r\n\r\n       Possibilities:\r\n               http   (80)\r\n               httpProxyBypass   (8245)')
er1645v2PRoutDnsUpdCliDnsProvDynDnsMxName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33622017), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsMxName.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.mx.name')
er1645v2PRoutDnsUpdCliDnsProvDynDnsMxBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 11, 80, 1, 1, 33622018), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("no", 0), ("yes", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: er1645v2PRoutDnsUpdCliDnsProvDynDnsMxBackup.setDescription('Path: router.editConf.dnsUpdateClient.dnsProvider.dynDns.mx.backup\r\n\r\n       Possibilities:\r\n               no   (0)\r\n               yes   (1)')
sr1645v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14))
sr1645v2PRoutDhcpBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54))
sr1645v2PRoutDhcpBindingSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingSSCTable.setDescription('table containing DHCP client information')
sr1645v2PRoutDhcpBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDhcpBindingTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingEntry.setDescription('')
sr1645v2PRoutDhcpBindingTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingTableIx.setDescription('')
sr1645v2PRoutDhcpBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingIpAddress.setDescription('Path: router.status.dhcpBinding.ipAddress')
sr1645v2PRoutDhcpBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 33554432), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingMacAddress.setDescription('Path: router.status.dhcpBinding.macAddress\r\n\r\n       MAC address.')
sr1645v2PRoutDhcpBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 50331648), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingLeaseTime.setDescription('Path: router.status.dhcpBinding.leaseTime\r\n\r\n       Time in centi-second.')
sr1645v2PRoutDhcpBindingHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingHostName.setDescription('Path: router.status.dhcpBinding.hostName')
sr1645v2PRoutDhcpBindingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 100663296), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingInterface.setDescription('Path: router.status.dhcpBinding.interface')
sr1645v2PRoutDhcpBindingState = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("onHold", 0), ("leased", 1), ("reserved", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingState.setDescription('Path: router.status.dhcpBinding.state\r\n\r\n       Possibilities:\r\n               onHold   (0)\r\n               leased   (1)\r\n               reserved   (2)')
sr1645v2PRoutDhcpBindingCheckAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 54, 1, 1, 117440512), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("idle", 0), ("pending", 1), ("validated", 2), ("rejected", 3), ("skipped", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBindingCheckAddress.setDescription('Path: router.status.dhcpBinding.checkAddress\r\n\r\n       Possibilities:\r\n               idle   (0)\r\n               pending   (1)\r\n               validated   (2)\r\n               rejected   (3)\r\n               skipped   (4)')
sr1645v2PRoutDhcpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55))
sr1645v2PRoutDhcpStatSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatSSCTable.setDescription('DHCP statistics over addresses free, leased and in hold')
sr1645v2PRoutDhcpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDhcpStatTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatEntry.setDescription('')
sr1645v2PRoutDhcpStatTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatTableIx.setDescription('')
sr1645v2PRoutDhcpStatStartRange = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatStartRange.setDescription('Path: router.status.dhcpStatistics.startRange')
sr1645v2PRoutDhcpStatEndRange = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatEndRange.setDescription('Path: router.status.dhcpStatistics.endRange')
sr1645v2PRoutDhcpStatInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1, 100663296), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatInterface.setDescription('Path: router.status.dhcpStatistics.interface')
sr1645v2PRoutDhcpStatFree = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatFree.setDescription('Path: router.status.dhcpStatistics.free')
sr1645v2PRoutDhcpStatLeased = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatLeased.setDescription('Path: router.status.dhcpStatistics.leased')
sr1645v2PRoutDhcpStatHold = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 55, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpStatHold.setDescription('Path: router.status.dhcpStatistics.hold')
sr1645v2PRoutDhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71))
sr1645v2PRoutDhcpRelaySSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelaySSCTable.setDescription('dhcpRelayInfo')
sr1645v2PRoutDhcpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDhcpRelayTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelayEntry.setDescription('')
sr1645v2PRoutDhcpRelayTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelayTableIx.setDescription('')
sr1645v2PRoutDhcpRelaySourceIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelaySourceIntf.setDescription('Path: router.status.dhcpRelayInfo.sourceIntf')
sr1645v2PRoutDhcpRelayMac = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1, 33554432), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelayMac.setDescription('Path: router.status.dhcpRelayInfo.mac\r\n\r\n       MAC address.')
sr1645v2PRoutDhcpRelayAssignedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelayAssignedIp.setDescription('Path: router.status.dhcpRelayInfo.assignedIp')
sr1645v2PRoutDhcpRelayServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1, 67108864), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelayServerIp.setDescription('Path: router.status.dhcpRelayInfo.serverIp')
sr1645v2PRoutDhcpRelayDhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("discover", 1), ("offer", 2), ("request", 3), ("decline", 4), ("ack", 5), ("nak", 6), ("release", 7), ("inform", 8), ("idle", 9),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelayDhcpStatus.setDescription('Path: router.status.dhcpRelayInfo.dhcpStatus\r\n\r\n       Possibilities:\r\n               discover   (1)\r\n               offer   (2)\r\n               request   (3)\r\n               decline   (4)\r\n               ack   (5)\r\n               nak   (6)\r\n               release   (7)\r\n               inform   (8)\r\n               idle   (9)')
sr1645v2PRoutDhcpRelayLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 71, 1, 1, 117440512), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpRelayLeaseTime.setDescription('Path: router.status.dhcpRelayInfo.leaseTime\r\n\r\n       Time in centi-second.')
sr1645v2PRoutDhcpBlacklist = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 75))
sr1645v2PRoutDhcpBlacklistSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 75, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBlacklistSSCTable.setDescription('table containing DHCP Blacklist information')
sr1645v2PRoutDhcpBlacklistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 75, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDhcpBlacklistTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBlacklistEntry.setDescription('')
sr1645v2PRoutDhcpBlacklistTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 75, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBlacklistTableIx.setDescription('')
sr1645v2PRoutDhcpBlacklistIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 75, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBlacklistIpAddress.setDescription('Path: router.status.dhcpBlacklist.ipAddress')
sr1645v2PRoutDhcpBlacklistMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 75, 1, 1, 33554432), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBlacklistMacAddress.setDescription('Path: router.status.dhcpBlacklist.macAddress\r\n\r\n       MAC address.')
sr1645v2PRoutDhcpBlacklistReason = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 75, 1, 1, 50331648), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("alienAck", 2), ("declined", 3), ("ping", 4), ("networkOrBroadcast", 5),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDhcpBlacklistReason.setDescription('Path: router.status.dhcpBlacklist.reason\r\n\r\n       Possibilities:\r\n               none   (0)\r\n               arp   (1)\r\n               alienAck   (2)\r\n               declined   (3)\r\n               ping   (4)\r\n               networkOrBroadcast   (5)')
sr1645v2PRoutIgmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 58))
sr1645v2PRoutIgmpTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 58, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutIgmpTableSSCTable.setDescription('igmpTable')
sr1645v2PRoutIgmpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 58, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutIgmpTableTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutIgmpTableEntry.setDescription('')
sr1645v2PRoutIgmpTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 58, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutIgmpTableTableIx.setDescription('')
sr1645v2PRoutIgmpTableMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 58, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutIgmpTableMulticast.setDescription('Path: router.status.igmpTable.multicast')
sr1645v2PRoutIgmpTableMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 58, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutIgmpTableMembers.setDescription('Path: router.status.igmpTable.members')
sr1645v2PRoutIgmpTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 58, 1, 1, 33554432), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutIgmpTableIf.setDescription('Path: router.status.igmpTable.interface')
sr1645v2PRoutInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199))
sr1645v2PRoutInterfacesSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesSSCTable.setDescription('info on routing interfaces')
sr1645v2PRoutInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutInterfacesTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesEntry.setDescription('')
sr1645v2PRoutInterfacesTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesTableIx.setDescription('')
sr1645v2PRoutInterfacesIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1, 1694498816), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesIfDescr.setDescription('Path: router.status.interfaces.ifDescr')
sr1645v2PRoutInterfacesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1, 1711276032), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,), SingleValueConstraint(256, 257,))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnmx25", 4), ("rfc877mx25", 5), ("ethernetmcsmacd", 6), ("iso88023mcsmacd", 7), ("iso88024mtokenBus", 8), ("iso88025mtokenRing", 9), ("is088026mman", 10), ("starlan", 11), ("proteonm10Mbit", 12), ("proteonm80Mbit", 13), ("hyperChannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernetm3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("framemrelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54), ("ieee80212", 55), ("fibreChannel", 56), ("hippiInterface", 57), ("frameRelayInterconnect", 58), ("aflane8023", 59), ("aflane8025", 60), ("cctEmul", 61), ("fastEther", 62), ("isdn", 63), ("v11", 64), ("v36", 65), ("g703at64k", 66), ("g703at2mb", 67), ("qllc", 68), ("fastEtherFX", 69), ("channel", 70), ("ieee80211", 71), ("ibm370parChan", 72), ("escon", 73), ("dlsw", 74), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ipSwitch", 78), ("rsrb", 79), ("atmmlogical", 80), ("ds0", 81), ("ds0Bundle", 82), ("bsc", 83), ("async", 84), ("cnr", 85), ("iso88025Dtr", 86), ("eplrs", 87), ("arap", 88), ("propCnls", 89), ("hostPad", 90), ("termPad", 91), ("frameRelayMPI", 92), ("x213", 93), ("adsl", 94), ("radsl", 95), ("sdsl", 96), ("vdsl", 97), ("iso88025CRFPInt", 98), ("myrinet", 99), ("voiceEM", 100), ("voiceFXO", 101), ("voiceFXS", 102), ("voiceEncap", 103), ("voiceOverIp", 104), ("atmDxi", 105), ("atmFuni", 106), ("atmIma", 107), ("pppMultilinkBundle", 108), ("ipOverCdlc", 109), ("ipOverClaw", 110), ("stackToStack", 111), ("virtualIpAddress", 112), ("mpc", 113), ("ipOverAtm", 114), ("iso88025Fiber", 115), ("tdlc", 116), ("gigabitEthernet", 117), ("hdlc", 118), ("lapf", 119), ("v37", 120), ("x25mlp", 121), ("x25huntGroup", 122), ("trasnpHdlc", 123), ("interleave", 124), ("fast", 125), ("ip", 126), ("docsCableMaclayer", 127), ("docsCableDownstream", 128), ("docsCableUpstream", 129), ("a12MppSwitch", 130), ("tunnel", 131), ("coffee", 132), ("ces", 133), ("atmSubInterface", 134), ("l2vlan", 135), ("l3ipvlan", 136), ("l3ipxvlan", 137), ("digitalPowerline", 138), ("mediaMailOverIp", 139), ("dtm", 140), ("dcn", 141), ("ipForward", 142), ("msdsl", 143), ("ieee1394", 144), ("ifmgsn", 145), ("dvbRccMacLayer", 146), ("dvbRccDownstream", 147), ("dvbRccUpstream", 148), ("atmVirtual", 149), ("mplsTunnel", 150), ("srp", 151), ("voiceOverAtm", 152), ("voiceOverFrameRelay", 153), ("idsl", 154), ("compositeLink", 155), ("ss7SigLink", 156), ("propWirelessP2P", 157), ("frForward", 158), ("rfc1483", 159), ("usb", 160), ("ieee8023adLag", 161), ("bgppolicyaccounting", 162), ("frf16MfrBundle", 163), ("h323Gatekeeper", 164), ("h323Proxy", 165), ("mpls", 166), ("mfSigLink", 167), ("hdsl2", 168), ("shdsl", 169), ("ds1FDL", 170), ("pos", 171), ("dvbAsiIn", 172), ("dvbAsiOut", 173), ("plc", 174), ("nfas", 175), ("tr008", 176), ("gr303RDT", 177), ("gr303IDT", 178), ("isup", 179), ("propDocsWirelessMaclayer", 180), ("propDocsWirelessDownstream", 181), ("propDocsWirelessUpstream", 182), ("hiperlan2", 183), ("propBWAp2Mp", 184), ("sonetOverheadChannel", 185), ("digitalWrapperOverheadChannel", 186), ("aal2", 187), ("radioMAC", 188), ("atmRadio", 189), ("imt", 190), ("mvl", 191), ("reachDSL", 192), ("frDlciEndPt", 193), ("atmVciEndPt", 194), ("opticalChannel", 195), ("opticalTransport", 196), ("propAtm", 197), ("voiceOverCable", 198), ("infiniband", 199), ("teLink", 200), ("q2931", 201), ("virtualTg", 202), ("sipTg", 203), ("sipSig", 204), ("docsCableUpstreamChannel", 205), ("econet", 206), ("pon155", 207), ("pon622", 208), ("bridge", 209), ("linegroup", 210), ("voiceEMFGD", 211), ("voiceFGDEANA", 212), ("voiceDID", 213), ("mpegTransport", 214), ("sixToFour", 215), ("gtp", 216), ("pdnEtherLoop1", 217), ("pdnEtherLoop2", 218), ("opticalChannelGroup", 219), ("homepna", 220), ("gfp", 221), ("ciscoISLvlan", 222), ("actelisMetaLOOP", 223), ("fcipLink", 224), ("rpr", 225), ("qam", 226), ("lmp", 227), ("cblVectaStar", 228), ("docsCableMCmtsDownstream", 229), ("adsl2", 230), ("macSecControlledIF", 231), ("macSecUncontrolledIF", 232), ("aviciOpticalEther", 233), ("atmbond", 234), ("voiceFGDOS", 235), ("mocaVersion1", 236), ("ieee80216WMAN", 237), ("adsl2plus", 238), ("dvbRcsMacLayer", 239), ("dvbTdm", 240), ("dvbRcsTdma", 241), ("x86Laps", 242), ("wwanPP", 243), ("wwanPP2", 244), ("voiceEBS", 245), ("ifPwType", 246), ("ilan", 247), ("pip", 248), ("aluELP", 249), ("gpon", 250), ("vdsl2", 251), ("capwapDot11Profile", 252), ("capwapDot11Bss", 253), ("capwapWtpVirtualRadio", 254), ("bits", 255),) + NamedValues(("docsCableUpstreamRfPort", 256), ("cableDownstreamRfPort", 257),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesIfType.setDescription('Path: router.status.interfaces.ifType\r\n\r\n       Possibilities:\r\n               other   (1)\r\n               regular1822   (2)\r\n               hdh1822   (3)\r\n               ddn-x25   (4)\r\n               rfc877-x25   (5)\r\n               ethernet-csmacd   (6)\r\n               iso88023-csmacd   (7)\r\n               iso88024-tokenBus   (8)\r\n               iso88025-tokenRing   (9)\r\n               is088026-man   (10)\r\n               starlan   (11)\r\n               proteon-10Mbit   (12)\r\n               proteon-80Mbit   (13)\r\n               hyperChannel   (14)\r\n               fddi   (15)\r\n               lapb   (16)\r\n               sdlc   (17)\r\n               ds1   (18)\r\n               e1   (19)\r\n               basicISDN   (20)\r\n               primaryISDN   (21)\r\n               propPointToPointSerial   (22)\r\n               ppp   (23)\r\n               softwareLoopback   (24)\r\n               eon   (25)\r\n               ethernet-3Mbit   (26)\r\n               nsip   (27)\r\n               slip   (28)\r\n               ultra   (29)\r\n               ds3   (30)\r\n               sip   (31)\r\n               frame-relay   (32)\r\n               rs232   (33)\r\n               para   (34)\r\n               arcnet   (35)\r\n               arcnetPlus   (36)\r\n               atm   (37)\r\n               miox25   (38)\r\n               sonet   (39)\r\n               x25ple   (40)\r\n               iso88022llc   (41)\r\n               localTalk   (42)\r\n               smdsDxi   (43)\r\n               frameRelayService   (44)\r\n               v35   (45)\r\n               hssi   (46)\r\n               hippi   (47)\r\n               modem   (48)\r\n               aal5   (49)\r\n               sonetPath   (50)\r\n               sonetVT   (51)\r\n               smdsIcip   (52)\r\n               propVirtual   (53)\r\n               propMultiplexor   (54)\r\n               ieee80212   (55)\r\n               fibreChannel   (56)\r\n               hippiInterface   (57)\r\n               frameRelayInterconnect   (58)\r\n               aflane8023   (59)\r\n               aflane8025   (60)\r\n               cctEmul   (61)\r\n               fastEther   (62)\r\n               isdn   (63)\r\n               v11   (64)\r\n               v36   (65)\r\n               g703at64k   (66)\r\n               g703at2mb   (67)\r\n               qllc   (68)\r\n               fastEtherFX   (69)\r\n               channel   (70)\r\n               ieee80211   (71)\r\n               ibm370parChan   (72)\r\n               escon   (73)\r\n               dlsw   (74)\r\n               isdns   (75)\r\n               isdnu   (76)\r\n               lapd   (77)\r\n               ipSwitch   (78)\r\n               rsrb   (79)\r\n               atm-logical   (80)\r\n               ds0   (81)\r\n               ds0Bundle   (82)\r\n               bsc   (83)\r\n               async   (84)\r\n               cnr   (85)\r\n               iso88025Dtr   (86)\r\n               eplrs   (87)\r\n               arap   (88)\r\n               propCnls   (89)\r\n               hostPad   (90)\r\n               termPad   (91)\r\n               frameRelayMPI   (92)\r\n               x213   (93)\r\n               adsl   (94)\r\n               radsl   (95)\r\n               sdsl   (96)\r\n               vdsl   (97)\r\n               iso88025CRFPInt   (98)\r\n               myrinet   (99)\r\n               voiceEM   (100)\r\n               voiceFXO   (101)\r\n               voiceFXS   (102)\r\n               voiceEncap   (103)\r\n               voiceOverIp   (104)\r\n               atmDxi   (105)\r\n               atmFuni   (106)\r\n               atmIma   (107)\r\n               pppMultilinkBundle   (108)\r\n               ipOverCdlc   (109)\r\n               ipOverClaw   (110)\r\n               stackToStack   (111)\r\n               virtualIpAddress   (112)\r\n               mpc   (113)\r\n               ipOverAtm   (114)\r\n               iso88025Fiber   (115)\r\n               tdlc   (116)\r\n               gigabitEthernet   (117)\r\n               hdlc   (118)\r\n               lapf   (119)\r\n               v37   (120)\r\n               x25mlp   (121)\r\n               x25huntGroup   (122)\r\n               trasnpHdlc   (123)\r\n               interleave   (124)\r\n               fast   (125)\r\n               ip   (126)\r\n               docsCableMaclayer   (127)\r\n               docsCableDownstream   (128)\r\n               docsCableUpstream   (129)\r\n               a12MppSwitch   (130)\r\n               tunnel   (131)\r\n               coffee   (132)\r\n               ces   (133)\r\n               atmSubInterface   (134)\r\n               l2vlan   (135)\r\n               l3ipvlan   (136)\r\n               l3ipxvlan   (137)\r\n               digitalPowerline   (138)\r\n               mediaMailOverIp   (139)\r\n               dtm   (140)\r\n               dcn   (141)\r\n               ipForward   (142)\r\n               msdsl   (143)\r\n               ieee1394   (144)\r\n               if-gsn   (145)\r\n               dvbRccMacLayer   (146)\r\n               dvbRccDownstream   (147)\r\n               dvbRccUpstream   (148)\r\n               atmVirtual   (149)\r\n               mplsTunnel   (150)\r\n               srp   (151)\r\n               voiceOverAtm   (152)\r\n               voiceOverFrameRelay   (153)\r\n               idsl   (154)\r\n               compositeLink   (155)\r\n               ss7SigLink   (156)\r\n               propWirelessP2P   (157)\r\n               frForward   (158)\r\n               rfc1483   (159)\r\n               usb   (160)\r\n               ieee8023adLag   (161)\r\n               bgppolicyaccounting   (162)\r\n               frf16MfrBundle   (163)\r\n               h323Gatekeeper   (164)\r\n               h323Proxy   (165)\r\n               mpls   (166)\r\n               mfSigLink   (167)\r\n               hdsl2   (168)\r\n               shdsl   (169)\r\n               ds1FDL   (170)\r\n               pos   (171)\r\n               dvbAsiIn   (172)\r\n               dvbAsiOut   (173)\r\n               plc   (174)\r\n               nfas   (175)\r\n               tr008   (176)\r\n               gr303RDT   (177)\r\n               gr303IDT   (178)\r\n               isup   (179)\r\n               propDocsWirelessMaclayer   (180)\r\n               propDocsWirelessDownstream   (181)\r\n               propDocsWirelessUpstream   (182)\r\n               hiperlan2   (183)\r\n               propBWAp2Mp   (184)\r\n               sonetOverheadChannel   (185)\r\n               digitalWrapperOverheadChannel   (186)\r\n               aal2   (187)\r\n               radioMAC   (188)\r\n               atmRadio   (189)\r\n               imt   (190)\r\n               mvl   (191)\r\n               reachDSL   (192)\r\n               frDlciEndPt   (193)\r\n               atmVciEndPt   (194)\r\n               opticalChannel   (195)\r\n               opticalTransport   (196)\r\n               propAtm   (197)\r\n               voiceOverCable   (198)\r\n               infiniband   (199)\r\n               teLink   (200)\r\n               q2931   (201)\r\n               virtualTg   (202)\r\n               sipTg   (203)\r\n               sipSig   (204)\r\n               docsCableUpstreamChannel   (205)\r\n               econet   (206)\r\n               pon155   (207)\r\n               pon622   (208)\r\n               bridge   (209)\r\n               linegroup   (210)\r\n               voiceEMFGD   (211)\r\n               voiceFGDEANA   (212)\r\n               voiceDID   (213)\r\n               mpegTransport   (214)\r\n               sixToFour   (215)\r\n               gtp   (216)\r\n               pdnEtherLoop1   (217)\r\n               pdnEtherLoop2   (218)\r\n               opticalChannelGroup   (219)\r\n               homepna   (220)\r\n               gfp   (221)\r\n               ciscoISLvlan   (222)\r\n               actelisMetaLOOP   (223)\r\n               fcipLink   (224)\r\n               rpr   (225)\r\n               qam   (226)\r\n               lmp   (227)\r\n               cblVectaStar   (228)\r\n               docsCableMCmtsDownstream   (229)\r\n               adsl2   (230)\r\n               macSecControlledIF   (231)\r\n               macSecUncontrolledIF   (232)\r\n               aviciOpticalEther   (233)\r\n               atmbond   (234)\r\n               voiceFGDOS   (235)\r\n               mocaVersion1   (236)\r\n               ieee80216WMAN   (237)\r\n               adsl2plus   (238)\r\n               dvbRcsMacLayer   (239)\r\n               dvbTdm   (240)\r\n               dvbRcsTdma   (241)\r\n               x86Laps   (242)\r\n               wwanPP   (243)\r\n               wwanPP2   (244)\r\n               voiceEBS   (245)\r\n               ifPwType   (246)\r\n               ilan   (247)\r\n               pip   (248)\r\n               aluELP   (249)\r\n               gpon   (250)\r\n               vdsl2   (251)\r\n               capwapDot11Profile   (252)\r\n               capwapDot11Bss   (253)\r\n               capwapWtpVirtualRadio   (254)\r\n               bits   (255)\r\n               docsCableUpstreamRfPort   (256)\r\n               cableDownstreamRfPort   (257)')
sr1645v2PRoutInterfacesIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1, 1795162112), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesIfOperStatus.setDescription('Path: router.status.interfaces.ifOperStatus\r\n\r\n       Possibilities:\r\n               up   (1)\r\n               down   (2)\r\n               testing   (3)\r\n               unknown   (4)\r\n               dormant   (5)\r\n               notPresent   (6)\r\n               lowerLayerDown   (7)')
sr1645v2PRoutInterfacesIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1, 1811939328), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesIfLastChange.setDescription('Path: router.status.interfaces.ifLastChange\r\n\r\n       Time in centi-second.')
sr1645v2PRoutInterfacesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1, 2030043136), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesAddress.setDescription('Path: router.status.interfaces.address')
sr1645v2PRoutInterfacesMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 1, 1, 2063597568), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesMask.setDescription('Path: router.status.interfaces.mask')
sr1645v2PRoutInterfacesSecondaryIp = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 385875968), )
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesSecondaryIp.setDescription('')
sr1645v2PRoutInterfacesSecondaryIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 385875968, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutInterfacesTableIx"), (0, "R1645v2-QUALMON", "sr1645v2PRoutInterfacesSecondaryIpTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesSecondaryIpEntry.setDescription('')
sr1645v2PRoutInterfacesSecondaryIpTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 385875968, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesSecondaryIpTableIx.setDescription('')
sr1645v2PRoutInterfacesSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 385875968, 1, 2030043136), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesSecondaryIpAddress.setDescription('Path: router.status.interfaces.secondaryIp.address')
sr1645v2PRoutInterfacesSecondaryIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 199, 385875968, 1, 2063597568), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutInterfacesSecondaryIpNetMask.setDescription('Path: router.status.interfaces.secondaryIp.netMask')
sr1645v2PRoutRoutingTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32))
sr1645v2PRoutRoutingTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableSSCTable.setDescription('routingTable')
sr1645v2PRoutRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutRoutingTableTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableEntry.setDescription('')
sr1645v2PRoutRoutingTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableTableIx.setDescription('')
sr1645v2PRoutRoutingTableNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableNetwork.setDescription('Path: router.status.routingTable.network')
sr1645v2PRoutRoutingTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableMask.setDescription('Path: router.status.routingTable.mask')
sr1645v2PRoutRoutingTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableGateway.setDescription('Path: router.status.routingTable.gateway')
sr1645v2PRoutRoutingTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableIf.setDescription('Path: router.status.routingTable.interface')
sr1645v2PRoutRoutingTableEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 83886080), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,)).clone(namedValues=NamedValues(("none", 0), ("framemrelay", 1), ("ppp", 2), ("ethernet", 3), ("x25", 4), ("atm", 5), ("policysdependent", 6), ("pppoA", 7), ("pppoE", 8), ("sasdependent", 9), ("gre", 10),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableEncap.setDescription('Path: router.status.routingTable.encapsulation\r\n\r\n       Possibilities:\r\n               none   (0)\r\n               frame-relay   (1)\r\n               ppp   (2)\r\n               ethernet   (3)\r\n               x25   (4)\r\n               atm   (5)\r\n               policy dependent   (6)\r\n               pppoA   (7)\r\n               pppoE   (8)\r\n               sa dependent   (9)\r\n               gre   (10)')
sr1645v2PRoutRoutingTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("discard", 2), ("spoofing", 3), ("holdDown", 4), ("closed", 5),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableStatus.setDescription('Path: router.status.routingTable.status\r\n\r\n       Possibilities:\r\n               down   (0)\r\n               up   (1)\r\n               discard   (2)\r\n               spoofing   (3)\r\n               holdDown   (4)\r\n               closed   (5)')
sr1645v2PRoutRoutingTablePref = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTablePref.setDescription('Path: router.status.routingTable.preference')
sr1645v2PRoutRoutingTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,)).clone(namedValues=NamedValues(("internal", 0), ("local", 1), ("host", 2), ("static", 3), ("rip", 4), ("ospf", 5), ("bgp", 6), ("float", 7), ("dial", 8), ("policy", 9), ("nat", 10), ("radius", 11), ("orchid", 12), ("reject", 13), ("ipsec", 14), ("floatIpsec", 15), ("mgmtProxy", 16), ("ipV6natpt", 17), ("pim", 18), ("none", 19), ("fixedDial", 20), ("fixedOutPolicy", 21), ("fixedInterface", 22), ("fixedIpsec", 23), ("staticTimed", 24), ("everyCat", 25),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableType.setDescription('Path: router.status.routingTable.type\r\n\r\n       Possibilities:\r\n               internal   (0)\r\n               local   (1)\r\n               host   (2)\r\n               static   (3)\r\n               rip   (4)\r\n               ospf   (5)\r\n               bgp   (6)\r\n               float   (7)\r\n               dial   (8)\r\n               policy   (9)\r\n               nat   (10)\r\n               radius   (11)\r\n               orchid   (12)\r\n               reject   (13)\r\n               ipsec   (14)\r\n               floatIpsec   (15)\r\n               mgmtProxy   (16)\r\n               ipV6natpt   (17)\r\n               pim   (18)\r\n               none   (19)\r\n               fixedDial   (20)\r\n               fixedOutPolicy   (21)\r\n               fixedInterface   (22)\r\n               fixedIpsec   (23)\r\n               staticTimed   (24)\r\n               everyCat   (25)')
sr1645v2PRoutRoutingTableMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableMetric.setDescription('Path: router.status.routingTable.metric')
sr1645v2PRoutRoutingTableTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 32, 1, 1, 167772160), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRoutingTableTimeOut.setDescription('Path: router.status.routingTable.timeOut\r\n\r\n       Time in centi-second.')
sr1645v2PRoutRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 61))
sr1645v2PRoutRadiusSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 61, 1))
sr1645v2PRoutRadiusEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 61, 1, 1))
sr1645v2PRoutRadiusAuthServer = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 61, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRadiusAuthServer.setDescription('Path: router.status.radius.authServer')
sr1645v2PRoutRadiusAcctServer = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 61, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRadiusAcctServer.setDescription('Path: router.status.radius.acctServer')
sr1645v2PRoutRadiusPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 61, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutRadiusPendingRequests.setDescription('Path: router.status.radius.pendingRequests')
sr1645v2PRoutDnsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65))
sr1645v2PRoutDnsCacheSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheSSCTable.setDescription('DNS cache table')
sr1645v2PRoutDnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDnsCacheTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheEntry.setDescription('')
sr1645v2PRoutDnsCacheTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheTableIx.setDescription('')
sr1645v2PRoutDnsCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheIpAddress.setDescription('Path: router.status.dnsCache.ipAddress')
sr1645v2PRoutDnsCacheIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1, 83886080), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheIpV6Address.setDescription('Path: router.status.dnsCache.ipV6Address\r\n\r\n       ipv6 address')
sr1645v2PRoutDnsCacheHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1, 33554432), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheHostname.setDescription('Path: router.status.dnsCache.hostname')
sr1645v2PRoutDnsCacheTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1, 50331648), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheTtl.setDescription('Path: router.status.dnsCache.ttl\r\n\r\n       Time in centi-second.')
sr1645v2PRoutDnsCacheInfiniteTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1, 67108864), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("static", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheInfiniteTimeOut.setDescription('Path: router.status.dnsCache.infiniteTimeOut\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)\r\n               static   (2)')
sr1645v2PRoutDnsCacheMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 65, 1, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsCacheMatches.setDescription('Path: router.status.dnsCache.matches\r\n\r\n       32 bit unsigned wrappable counter.')
sr1645v2PRoutDnsServers = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66))
sr1645v2PRoutDnsServersSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersSSCTable.setDescription('DNS server list')
sr1645v2PRoutDnsServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDnsServersTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersEntry.setDescription('')
sr1645v2PRoutDnsServersTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersTableIx.setDescription('')
sr1645v2PRoutDnsServersPrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersPrimaryDns.setDescription('Path: router.status.dnsServers.primaryDns')
sr1645v2PRoutDnsServersSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersSecondaryDns.setDescription('Path: router.status.dnsServers.secondaryDns')
sr1645v2PRoutDnsServersType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1, 50331648), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("ppp", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersType.setDescription('Path: router.status.dnsServers.type\r\n\r\n       Possibilities:\r\n               static   (0)\r\n               dhcp   (1)\r\n               ppp   (2)')
sr1645v2PRoutDnsServersRcvdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersRcvdInterface.setDescription('Path: router.status.dnsServers.rcvdInterface')
sr1645v2PRoutDnsServersPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersPreference.setDescription('Path: router.status.dnsServers.preference')
sr1645v2PRoutDnsServersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 66, 1, 1, 100663296), Integer32().subtype(subtypeSpec=SingleValueConstraint(2, 3, 5, 6,)).clone(namedValues=NamedValues(("primActive", 2), ("secActive", 3), ("inactive", 5), ("failed", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsServersStatus.setDescription('Path: router.status.dnsServers.status\r\n\r\n       Possibilities:\r\n               primActive   (2)\r\n               secActive   (3)\r\n               inactive   (5)\r\n               failed   (6)')
sr1645v2PRoutDnsDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 72))
sr1645v2PRoutDnsDomainsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 72, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDnsDomainsSSCTable.setDescription('DNS domain table')
sr1645v2PRoutDnsDomainsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 72, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDnsDomainsTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDnsDomainsEntry.setDescription('')
sr1645v2PRoutDnsDomainsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 72, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDnsDomainsTableIx.setDescription('')
sr1645v2PRoutDnsDomainsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 72, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsDomainsName.setDescription('Path: router.status.dnsDomains.name')
sr1645v2PRoutDnsDomainsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 72, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("ppp", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsDomainsType.setDescription('Path: router.status.dnsDomains.type\r\n\r\n       Possibilities:\r\n               static   (0)\r\n               dhcp   (1)\r\n               ppp   (2)')
sr1645v2PRoutDnsDomainsRcvdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 72, 1, 1, 50331648), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsDomainsRcvdInterface.setDescription('Path: router.status.dnsDomains.rcvdInterface')
sr1645v2PRoutAddrPools = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109))
sr1645v2PRoutAddrPoolsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutAddrPoolsSSCTable.setDescription('ip pool status')
sr1645v2PRoutAddrPoolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutAddrPoolsTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutAddrPoolsEntry.setDescription('')
sr1645v2PRoutAddrPoolsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutAddrPoolsTableIx.setDescription('')
sr1645v2PRoutAddrPoolsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutAddrPoolsName.setDescription('Path: router.status.addrPools.name')
sr1645v2PRoutAddrPoolsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("list", 1), ("interval", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutAddrPoolsType.setDescription('Path: router.status.addrPools.type\r\n\r\n       Possibilities:\r\n               list   (1)\r\n               interval   (2)')
sr1645v2PRoutAddrPoolsNrOfAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutAddrPoolsNrOfAddresses.setDescription('Path: router.status.addrPools.nrOfAddresses\r\n\r\n       32 bit unsigned wrappable counter.')
sr1645v2PRoutAddrPoolsAvailAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 109, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutAddrPoolsAvailAddresses.setDescription('Path: router.status.addrPools.availAddresses\r\n\r\n       32 bit unsigned wrappable counter.')
sr1645v2PRoutPoolReservations = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103))
sr1645v2PRoutPoolReservationsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsSSCTable.setDescription('ip pool occupied addresses')
sr1645v2PRoutPoolReservationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutPoolReservationsTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsEntry.setDescription('')
sr1645v2PRoutPoolReservationsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsTableIx.setDescription('')
sr1645v2PRoutPoolReservationsName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsName.setDescription('Path: router.status.poolReservations.name')
sr1645v2PRoutPoolReservationsType = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("list", 1), ("interval", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsType.setDescription('Path: router.status.poolReservations.type\r\n\r\n       Possibilities:\r\n               list   (1)\r\n               interval   (2)')
sr1645v2PRoutPoolReservationsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsLocal.setDescription('Path: router.status.poolReservations.local')
sr1645v2PRoutPoolReservationsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1, 67108864), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsRemote.setDescription('Path: router.status.poolReservations.remote')
sr1645v2PRoutPoolReservationsNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1, 83886080), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsNetMask.setDescription('Path: router.status.poolReservations.netMask')
sr1645v2PRoutPoolReservationsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 103, 1, 1, 100663296), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutPoolReservationsInterface.setDescription('Path: router.status.poolReservations.interface')
sr1645v2PRoutDnsUpdCli = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82))
sr1645v2PRoutDnsUpdCliSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1), )
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliSSCTable.setDescription('DNS Update Client status table')
sr1645v2PRoutDnsUpdCliEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "sr1645v2PRoutDnsUpdCliTableIx"))
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliEntry.setDescription('')
sr1645v2PRoutDnsUpdCliTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliTableIx.setDescription('')
sr1645v2PRoutDnsUpdCliName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliName.setDescription('Path: router.status.dnsUpdateClient.name')
sr1645v2PRoutDnsUpdCliDnsProvDynDnsState = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 33620224), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("disabled", 0), ("enabledIdle", 1), ("updating", 2), ("stopped", 3), ("unbound", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliDnsProvDynDnsState.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.state\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabledIdle   (1)\r\n               updating   (2)\r\n               stopped   (3)\r\n               unbound   (4)')
sr1645v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 33620480), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("closed", 0), ("listen", 1), ("synSent", 2), ("synReceived", 3), ("established", 4), ("finWait1", 5), ("finWait2", 6), ("closing", 7), ("timeWait", 8), ("closeWait", 9), ("lastAck", 10), ("notFound", 11), ("dnsReqSent", 12),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.tcpSocket\r\n\r\n       Possibilities:\r\n               closed   (0)\r\n               listen   (1)\r\n               synSent   (2)\r\n               synReceived   (3)\r\n               established   (4)\r\n               finWait1   (5)\r\n               finWait2   (6)\r\n               closing   (7)\r\n               timeWait   (8)\r\n               closeWait   (9)\r\n               lastAck   (10)\r\n               notFound   (11)\r\n               dnsReqSent   (12)')
sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 33620736), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.updateReturnCode')
sr1645v2PRoutDnsUpdCliDnsProvDynDnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 33620992), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliDnsProvDynDnsHostName.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.hostName')
sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 33621248), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.updateServer')
sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 33621504), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.lastUpdateIpAddress')
sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 14, 82, 1, 1, 33621760), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed.setDescription('Path: router.status.dnsUpdateClient.dnsProvider.dynDns.lastUpdateTimePassed\r\n\r\n       Time in centi-second.')
pr1645v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12))
pr1645v2PRoutQualMon = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79))
pr1645v2PRoutQualMonSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1), )
if mibBuilder.loadTexts: pr1645v2PRoutQualMonSSCTable.setDescription('quality monitor')
pr1645v2PRoutQualMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutQualMonTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutQualMonEntry.setDescription('')
pr1645v2PRoutQualMonTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutQualMonTableIx.setDescription('')
pr1645v2PRoutQualMonName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 301989888), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonName.setDescription('Path: router.performance.qualityMonitor.name')
pr1645v2PRoutQualMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 369098752), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 3, 2, 6, 8, 9,)).clone(namedValues=NamedValues(("run", 1), ("runOnDemand", 3), ("halted", 2), ("cleared", 6), ("disabled", 8), ("runIdle", 9),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonStatus.setDescription('Path: router.performance.qualityMonitor.status\r\n\r\n       Possibilities:\r\n               run   (1)\r\n               runOnDemand   (3)\r\n               halted   (2)\r\n               cleared   (6)\r\n               disabled   (8)\r\n               runIdle   (9)')
pr1645v2PRoutQualMonIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonIpAddress.setDescription('Path: router.performance.qualityMonitor.ipAddress')
pr1645v2PRoutQualMonHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 33554432), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonHostName.setDescription('Path: router.performance.qualityMonitor.hostName')
pr1645v2PRoutQualMonSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 83886080), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonSourceIp.setDescription('Path: router.performance.qualityMonitor.sourceIp')
pr1645v2PRoutQualMonSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 352321536), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonSourceId.setDescription('Path: router.performance.qualityMonitor.sourceId\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonNbrTxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonNbrTxPckt.setDescription('Path: router.performance.qualityMonitor.nbrOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonNbrRxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonNbrRxPckt.setDescription('Path: router.performance.qualityMonitor.nbrOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonError = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 285212672), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonError.setDescription('Path: router.performance.qualityMonitor.error\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 201326592), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonDelay.setDescription('Path: router.performance.qualityMonitor.delay\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 218103808), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonJitter.setDescription('Path: router.performance.qualityMonitor.jitter\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoss.setDescription('Path: router.performance.qualityMonitor.loss\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 268435456), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLossDelay.setDescription('Path: router.performance.qualityMonitor.lossDelay\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 184549376), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonDelayMin.setDescription('Path: router.performance.qualityMonitor.delayMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonDelayAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonDelayAvrg.setDescription('Path: router.performance.qualityMonitor.delayAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 134217728), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonDelayMax.setDescription('Path: router.performance.qualityMonitor.delayMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonJitterNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 234881024), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonJitterNegMax.setDescription('Path: router.performance.qualityMonitor.jitterNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonJitterAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonJitterAvrg.setDescription('Path: router.performance.qualityMonitor.jitterAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonJitterPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 167772160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonJitterPosMax.setDescription('Path: router.performance.qualityMonitor.jitterPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 504627200), Integer32().subtype(subtypeSpec=SingleValueConstraint(3, 1, 2, 4,)).clone(namedValues=NamedValues(("notInUse", 3), ("onlyJitter", 1), ("jitterAndLoss", 2), ("all", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownStatus.setDescription('Path: router.performance.qualityMonitor.upDown.status\r\n\r\n       Possibilities:\r\n               notInUse   (3)\r\n               onlyJitter   (1)\r\n               jitterAndLoss   (2)\r\n               all   (4)')
pr1645v2PRoutQualMonUpDownLossUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503971840), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownLossUp.setDescription('Path: router.performance.qualityMonitor.upDown.lossUp\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonUpDownLossDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 504037376), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownLossDelayUp.setDescription('Path: router.performance.qualityMonitor.upDown.lossDelayUp\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonUpDownDelayUpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 505282560), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownDelayUpMin.setDescription('Path: router.performance.qualityMonitor.upDown.delayUpMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownDelayUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 505348096), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownDelayUpAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.delayUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownDelayUpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 505413632), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownDelayUpMax.setDescription('Path: router.performance.qualityMonitor.upDown.delayUpMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503775232), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterUp.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUp\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterUpNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503382016), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterUpNegMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUpNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503447552), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterUpAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterUpPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503513088), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterUpPosMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterUpPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownLossDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 504102912), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownLossDown.setDescription('Path: router.performance.qualityMonitor.upDown.lossDown\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonUpDownLossDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 504168448), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownLossDelayDown.setDescription('Path: router.performance.qualityMonitor.upDown.lossDelayDown\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonUpDownDelayDownMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 505610240), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownDelayDownMin.setDescription('Path: router.performance.qualityMonitor.upDown.delayDownMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownDelayDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 505675776), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownDelayDownAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.delayDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownDelayDownMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 505741312), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownDelayDownMax.setDescription('Path: router.performance.qualityMonitor.upDown.delayDownMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503840768), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterDown.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDown\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterDownNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503578624), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterDownNegMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDownNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503644160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterDownAvrg.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonUpDownJitterDownPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 503709696), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonUpDownJitterDownPosMax.setDescription('Path: router.performance.qualityMonitor.upDown.jitterDownPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 251658240), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonAlarm.setDescription('Path: router.performance.qualityMonitor.alarm\r\n\r\n       Bit meanings:\r\n               bit 0 = loss,\r\n               bit 1 = delayAvrg,\r\n               bit 2 = delayMax,\r\n               bit 3 = delayMinMax,\r\n               bit 4 = jitterAvrg,\r\n               bit 5 = jitterPosMax,\r\n               bit 6 = jitterNegMax,\r\n               bit 7 = lossUp,\r\n               bit 8 = jitterUpAvrg,\r\n               bit 9 = jitterUpPosMax,\r\n               bit 10 = jitterUpNegMax,\r\n               bit 11 = lossDown,\r\n               bit 12 = jitterDownAvrg,\r\n               bit 13 = jitterDownPosMax,\r\n               bit 14 = jitterDownNegMax,\r\n               bit 15 = delayUpAvrg,\r\n               bit 16 = delayUpMax,\r\n               bit 17 = delayDownAvrg,\r\n               bit 18 = delayDownMax')
pr1645v2PRoutQualMonLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 1, 1, 318767104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLastError.setDescription('Path: router.performance.qualityMonitor.lastError')
pr1645v2PRoutQualMonLogging = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320), )
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLogging.setDescription('')
pr1645v2PRoutQualMonLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutQualMonTableIx"), (0, "R1645v2-QUALMON", "pr1645v2PRoutQualMonLoggingTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingEntry.setDescription('')
pr1645v2PRoutQualMonLoggingTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingTableIx.setDescription('')
pr1645v2PRoutQualMonLoggingSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 16777216), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingSysUpTime.setDescription('Path: router.performance.qualityMonitor.logging.sysUpTime\r\n\r\n       Time in centi-second.')
pr1645v2PRoutQualMonLoggingNbrTxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingNbrTxPckt.setDescription('Path: router.performance.qualityMonitor.logging.nbrOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingNbrRxPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingNbrRxPckt.setDescription('Path: router.performance.qualityMonitor.logging.nbrOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingError = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 285212672), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingError.setDescription('Path: router.performance.qualityMonitor.logging.error\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingLoss.setDescription('Path: router.performance.qualityMonitor.logging.loss\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 268435456), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingLossDelay.setDescription('Path: router.performance.qualityMonitor.logging.lossDelay\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 184549376), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingDelayMin.setDescription('Path: router.performance.qualityMonitor.logging.delayMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingDelayAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingDelayAvrg.setDescription('Path: router.performance.qualityMonitor.logging.delayAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 134217728), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingDelayMax.setDescription('Path: router.performance.qualityMonitor.logging.delayMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingJitterNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 234881024), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingJitterNegMax.setDescription('Path: router.performance.qualityMonitor.logging.jitterNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingJitterAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingJitterAvrg.setDescription('Path: router.performance.qualityMonitor.logging.jitterAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingJitterPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 167772160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingJitterPosMax.setDescription('Path: router.performance.qualityMonitor.logging.jitterPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 504627200), Integer32().subtype(subtypeSpec=SingleValueConstraint(3, 1, 2, 4,)).clone(namedValues=NamedValues(("notInUse", 3), ("onlyJitter", 1), ("jitterAndLoss", 2), ("all", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownStatus.setDescription('Path: router.performance.qualityMonitor.logging.upDown.status\r\n\r\n       Possibilities:\r\n               notInUse   (3)\r\n               onlyJitter   (1)\r\n               jitterAndLoss   (2)\r\n               all   (4)')
pr1645v2PRoutQualMonLoggingUpDownLossUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 503971840), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownLossUp.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossUp\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingUpDownLossDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 504037376), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownLossDelayUp.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossDelayUp\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingUpDownDelayUpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 505282560), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownDelayUpMin.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayUpMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownDelayUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 505348096), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownDelayUpAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownDelayUpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 505413632), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownDelayUpMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayUpMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownJitterUpNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 503382016), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownJitterUpNegMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterUpNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownJitterUpAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 503447552), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownJitterUpAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterUpAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownJitterUpPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 503513088), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownJitterUpPosMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterUpPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownLossDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 504102912), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownLossDown.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossDown\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingUpDownLossDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 504168448), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownLossDelayDown.setDescription('Path: router.performance.qualityMonitor.logging.upDown.lossDelayDown\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutQualMonLoggingUpDownDelayDownMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 505610240), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownDelayDownMin.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayDownMin\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownDelayDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 505675776), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownDelayDownAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownDelayDownMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 505741312), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownDelayDownMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.delayDownMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownJitterDownNegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 503578624), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownJitterDownNegMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterDownNegMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownJitterDownAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 503644160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownJitterDownAvrg.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterDownAvrg\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingUpDownJitterDownPosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 503709696), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingUpDownJitterDownPosMax.setDescription('Path: router.performance.qualityMonitor.logging.upDown.jitterDownPosMax\r\n\r\n       unit name = sec\r\n       formula = 1000 / ; 1000 *')
pr1645v2PRoutQualMonLoggingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 79, 335544320, 1, 520093696), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutQualMonLoggingDate.setDescription('Path: router.performance.qualityMonitor.logging.date')
pr1645v2PRoutUdpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16))
pr1645v2PRoutUdpServerSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 1), )
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSSCTable.setDescription('udpServer')
pr1645v2PRoutUdpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutUdpServerTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerEntry.setDescription('')
pr1645v2PRoutUdpServerTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerTableIx.setDescription('')
pr1645v2PRoutUdpServerDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerDestinationPort.setDescription('Path: router.performance.udpServer.destinationPort')
pr1645v2PRoutUdpServerActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 1, 1, 33554432), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerActiveSessions.setDescription('Path: router.performance.udpServer.activeSessions\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutUdpServerNbrPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 1, 1, 50331648), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerNbrPckt.setDescription('Path: router.performance.udpServer.nbrOfPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pr1645v2PRoutUdpServerSessions = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864), )
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessions.setDescription('')
pr1645v2PRoutUdpServerSessionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutUdpServerTableIx"), (0, "R1645v2-QUALMON", "pr1645v2PRoutUdpServerSessionsTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessionsEntry.setDescription('')
pr1645v2PRoutUdpServerSessionsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessionsTableIx.setDescription('')
pr1645v2PRoutUdpServerSessionsSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessionsSourceIpAddress.setDescription('Path: router.performance.udpServer.sessions.sourceIpAddress')
pr1645v2PRoutUdpServerSessionsSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessionsSourcePort.setDescription('Path: router.performance.udpServer.sessions.sourcePort')
pr1645v2PRoutUdpServerSessionsNbrPckt = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864, 1, 50331648), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessionsNbrPckt.setDescription('Path: router.performance.udpServer.sessions.nbrOfPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pr1645v2PRoutUdpServerSessionsFirstActivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864, 1, 67108864), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessionsFirstActivityTime.setDescription('Path: router.performance.udpServer.sessions.firstActivityTime\r\n\r\n       Time in centi-second.')
pr1645v2PRoutUdpServerSessionsLastActivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 16, 67108864, 1, 83886080), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutUdpServerSessionsLastActivityTime.setDescription('Path: router.performance.udpServer.sessions.lastActivityTime\r\n\r\n       Time in centi-second.')
pr1645v2PRoutIgmpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 69))
pr1645v2PRoutIgmpProxySSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 69, 1))
pr1645v2PRoutIgmpProxyEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 69, 1, 1))
pr1645v2PRoutIgmpProxyInIgmp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 69, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIgmpProxyInIgmp.setDescription('Path: router.performance.igmpProxy.inIgmp')
pr1645v2PRoutIgmpProxyOutIgmp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 69, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIgmpProxyOutIgmp.setDescription('Path: router.performance.igmpProxy.outIgmp')
pr1645v2PRoutIgmpProxyInData = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 69, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIgmpProxyInData.setDescription('Path: router.performance.igmpProxy.inData')
pr1645v2PRoutIgmpProxyInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 69, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIgmpProxyInDiscards.setDescription('Path: router.performance.igmpProxy.inDiscards')
pr1645v2PRoutIpFragments = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87))
pr1645v2PRoutIpFragmentsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1))
pr1645v2PRoutIpFragmentsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1, 1))
pr1645v2PRoutIpFragmentsReceivedFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1, 1, 16777216), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIpFragmentsReceivedFrames.setDescription('Path: router.performance.ipFragments.receivedFrames\r\n\r\n       64 bit unsigned wrappable counter.')
pr1645v2PRoutIpFragmentsReassembledFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1, 1, 33554432), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIpFragmentsReassembledFrames.setDescription('Path: router.performance.ipFragments.reassembledFrames\r\n\r\n       64 bit unsigned wrappable counter.')
pr1645v2PRoutIpFragmentsExpiredFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1, 1, 50331648), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIpFragmentsExpiredFrames.setDescription('Path: router.performance.ipFragments.expiredFrames\r\n\r\n       64 bit unsigned wrappable counter.')
pr1645v2PRoutIpFragmentsPendingFrames = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIpFragmentsPendingFrames.setDescription('Path: router.performance.ipFragments.pendingFrames\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutIpFragmentsReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1, 1, 83886080), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIpFragmentsReceivedPackets.setDescription('Path: router.performance.ipFragments.receivedPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pr1645v2PRoutIpFragmentsExcessivelyFragPackets = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 87, 1, 1, 100663296), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutIpFragmentsExcessivelyFragPackets.setDescription('Path: router.performance.ipFragments.excessivelyFragPackets\r\n\r\n       64 bit unsigned wrappable counter.')
pr1645v2PRoutTracertResults = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153))
pr1645v2PRoutTracertResultsSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1), )
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsSSCTable.setDescription('Traceroute statistics')
pr1645v2PRoutTracertResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutTracertResultsTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsEntry.setDescription('')
pr1645v2PRoutTracertResultsTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsTableIx.setDescription('')
pr1645v2PRoutTracertResultsTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsTtl.setDescription('Path: router.performance.tracertResults.ttl')
pr1645v2PRoutTracertResultsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsIpAddress.setDescription('Path: router.performance.tracertResults.ipAddress')
pr1645v2PRoutTracertResultsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 50331648), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsHostName.setDescription('Path: router.performance.tracertResults.hostName')
pr1645v2PRoutTracertResultsNrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsNrTx.setDescription('Path: router.performance.tracertResults.numOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTracertResultsNrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 83886080), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsNrRx.setDescription('Path: router.performance.tracertResults.numOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTracertResultsRepTimMin = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 100663296), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsRepTimMin.setDescription('Path: router.performance.tracertResults.replyTimeMin\r\n\r\n       Time in centi-second.')
pr1645v2PRoutTracertResultsRepTimMax = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 117440512), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsRepTimMax.setDescription('Path: router.performance.tracertResults.replyTimeMax\r\n\r\n       Time in centi-second.')
pr1645v2PRoutTracertResultsRepTimAvrg = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 134217728), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsRepTimAvrg.setDescription('Path: router.performance.tracertResults.replyTimeAvrg\r\n\r\n       Time in centi-second.')
pr1645v2PRoutTracertResultsSr = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 150994944), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsSr.setDescription('Path: router.performance.tracertResults.successRate\r\n\r\n       unit name = %')
pr1645v2PRoutTracertResultsComment = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 153, 1, 1, 167772160), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTracertResultsComment.setDescription('Path: router.performance.tracertResults.comment')
pr1645v2PRoutRoutingTable = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33))
pr1645v2PRoutRoutingTableSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1), )
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableSSCTable.setDescription('routingTable')
pr1645v2PRoutRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutRoutingTableTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableEntry.setDescription('')
pr1645v2PRoutRoutingTableTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableTableIx.setDescription('')
pr1645v2PRoutRoutingTableNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableNetwork.setDescription('Path: router.performance.routingTable.network')
pr1645v2PRoutRoutingTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1, 33554432), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableMask.setDescription('Path: router.performance.routingTable.mask')
pr1645v2PRoutRoutingTableGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1, 50331648), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableGateway.setDescription('Path: router.performance.routingTable.gateway')
pr1645v2PRoutRoutingTableIf = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1, 67108864), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableIf.setDescription('Path: router.performance.routingTable.interface')
pr1645v2PRoutRoutingTableUses = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1, 83886080), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableUses.setDescription('Path: router.performance.routingTable.uses\r\n\r\n       32 bit unsigned gauge value.')
pr1645v2PRoutRoutingTableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 33, 1, 1, 100663296), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRoutingTableOctets.setDescription('Path: router.performance.routingTable.octets\r\n\r\n       32 bit unsigned gauge value.')
pr1645v2PRoutPingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46))
pr1645v2PRoutPingResultsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1))
pr1645v2PRoutPingResultsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1))
pr1645v2PRoutPingResultsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutPingResultsIpAddr.setDescription('Path: router.performance.pingResults.ipAddress')
pr1645v2PRoutPingResultsNbrTxPckt = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1, 33554432), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutPingResultsNbrTxPckt.setDescription('Path: router.performance.pingResults.numOfTxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutPingResultsNbrRxPckt = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutPingResultsNbrRxPckt.setDescription('Path: router.performance.pingResults.numOfRxPackets\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutPingResultsRepTimMin = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1, 67108864), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutPingResultsRepTimMin.setDescription('Path: router.performance.pingResults.replyTimeMin\r\n\r\n       Time in centi-second.')
pr1645v2PRoutPingResultsRepTimMax = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1, 83886080), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutPingResultsRepTimMax.setDescription('Path: router.performance.pingResults.replyTimeMax\r\n\r\n       Time in centi-second.')
pr1645v2PRoutPingResultsRepTimAvrg = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1, 100663296), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutPingResultsRepTimAvrg.setDescription('Path: router.performance.pingResults.replyTimeAvrg\r\n\r\n       Time in centi-second.')
pr1645v2PRoutPingResultsLastError = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 46, 1, 1, 117440512), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutPingResultsLastError.setDescription('Path: router.performance.pingResults.lastError')
pr1645v2PRoutRadiusAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63))
pr1645v2PRoutRadiusAuthSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1), )
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthSSCTable.setDescription('radius statistics')
pr1645v2PRoutRadiusAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutRadiusAuthTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthEntry.setDescription('')
pr1645v2PRoutRadiusAuthTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthTableIx.setDescription('')
pr1645v2PRoutRadiusAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 1677721600), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthServer.setDescription('Path: router.performance.radiusAuth.server')
pr1645v2PRoutRadiusAuthVrfRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 134217728), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthVrfRouter.setDescription('Path: router.performance.radiusAuth.vrfRouter')
pr1645v2PRoutRadiusAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthRequests.setDescription('Path: router.performance.radiusAuth.requests')
pr1645v2PRoutRadiusAuthAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthAccepts.setDescription('Path: router.performance.radiusAuth.accepts')
pr1645v2PRoutRadiusAuthRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthRejects.setDescription('Path: router.performance.radiusAuth.rejects')
pr1645v2PRoutRadiusAuthChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthChallenges.setDescription('Path: router.performance.radiusAuth.challenges')
pr1645v2PRoutRadiusAuthBadAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthBadAuth.setDescription('Path: router.performance.radiusAuth.badAuthenticators')
pr1645v2PRoutRadiusAuthTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 100663296), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthTimeOuts.setDescription('Path: router.performance.radiusAuth.timeOuts')
pr1645v2PRoutRadiusAuthDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 63, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAuthDroppedPackets.setDescription('Path: router.performance.radiusAuth.droppedPackets')
pr1645v2PRoutRadiusAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62))
pr1645v2PRoutRadiusAcctSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1))
pr1645v2PRoutRadiusAcctEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1))
pr1645v2PRoutRadiusAcctServer = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1, 1677721600), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAcctServer.setDescription('Path: router.performance.radiusAcct.server')
pr1645v2PRoutRadiusAcctVrfRouter = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1, 16777216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAcctVrfRouter.setDescription('Path: router.performance.radiusAcct.vrfRouter')
pr1645v2PRoutRadiusAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1, 134217728), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAcctRequests.setDescription('Path: router.performance.radiusAcct.requests')
pr1645v2PRoutRadiusAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1, 150994944), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAcctResponses.setDescription('Path: router.performance.radiusAcct.responses')
pr1645v2PRoutRadiusAcctBadAuth = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1, 83886080), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAcctBadAuth.setDescription('Path: router.performance.radiusAcct.badAuthenticators')
pr1645v2PRoutRadiusAcctTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1, 100663296), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAcctTimeOuts.setDescription('Path: router.performance.radiusAcct.timeOuts')
pr1645v2PRoutRadiusAcctDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 62, 1, 1, 117440512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutRadiusAcctDroppedPackets.setDescription('Path: router.performance.radiusAcct.droppedPackets')
pr1645v2PRoutTacacsAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68))
pr1645v2PRoutTacacsAuthSSCTable = MibTable((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1), )
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthSSCTable.setDescription('tacacs auth server perf table')
pr1645v2PRoutTacacsAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1), ).setIndexNames((0, "R1645v2-QUALMON", "pr1645v2PRoutTacacsAuthTableIx"))
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthEntry.setDescription('')
pr1645v2PRoutTacacsAuthTableIx = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 11), TableIndex())
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthTableIx.setDescription('')
pr1645v2PRoutTacacsAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 16777216), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthServer.setDescription('Path: router.performance.tacacsAuth.server')
pr1645v2PRoutTacacsAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthPort.setDescription('Path: router.performance.tacacsAuth.port')
pr1645v2PRoutTacacsAuthVrfRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 184549376), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthVrfRouter.setDescription('Path: router.performance.tacacsAuth.vrfRouter')
pr1645v2PRoutTacacsAuthRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 50331648), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthRequests.setDescription('Path: router.performance.tacacsAuth.requests\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 67108864), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthAccepts.setDescription('Path: router.performance.tacacsAuth.accepts\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 83886080), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthFails.setDescription('Path: router.performance.tacacsAuth.fails\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 100663296), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthTimeOuts.setDescription('Path: router.performance.tacacsAuth.timeOuts\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthAuthenticationStartPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 117506048), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthAuthenticationStartPkts.setDescription('Path: router.performance.tacacsAuth.authentication.startPkts\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthAuthenticationContinuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 117571584), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthAuthenticationContinuePkts.setDescription('Path: router.performance.tacacsAuth.authentication.continuePkts\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthAuthenticationReplyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 117637120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthAuthenticationReplyPkts.setDescription('Path: router.performance.tacacsAuth.authentication.replyPkts\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthAuthorizationRequestPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 134283264), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthAuthorizationRequestPkts.setDescription('Path: router.performance.tacacsAuth.authorization.requestPkts\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthAuthorizationResponsePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 134348800), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthAuthorizationResponsePkts.setDescription('Path: router.performance.tacacsAuth.authorization.responsePkts\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 150994944), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthDrops.setDescription('Path: router.performance.tacacsAuth.drops\r\n\r\n       32 bit unsigned wrappable counter.')
pr1645v2PRoutTacacsAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 12, 68, 1, 1, 167772160), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pr1645v2PRoutTacacsAuthErrors.setDescription('Path: router.performance.tacacsAuth.errors\r\n\r\n       32 bit unsigned wrappable counter.')
ar1645v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16))
ar1645v2PRoutSendIgmpLeave = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 114), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutSendIgmpLeave.setDescription('Path: router.actions.sendIgmpLeave\r\n       Info: send igmp leave over selected interfaces')
ar1645v2PRoutIgmpDataLeave = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 115))
ar1645v2PRoutIgmpDataLeaveSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 115, 1))
ar1645v2PRoutIgmpDataLeaveEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 115, 1, 1))
ar1645v2PRoutIgmpDataLeaveInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 115, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutIgmpDataLeaveInterfaces.setDescription('Path: router.actions.igmpDataLeave.interfaces')
ar1645v2PRoutIgmpDataLeaveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 115, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutIgmpDataLeaveIpAddress.setDescription('Path: router.actions.igmpDataLeave.ipAddress')
ar1645v2PRoutSendIgmpRep = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 112), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutSendIgmpRep.setDescription('Path: router.actions.sendIgmpRep\r\n       Info: send igmp report over selected interfaces')
ar1645v2PRoutIgmpDataRep = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 113))
ar1645v2PRoutIgmpDataRepSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 113, 1))
ar1645v2PRoutIgmpDataRepEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 113, 1, 1))
ar1645v2PRoutIgmpDataRepInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 113, 1, 1, 16777216), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutIgmpDataRepInterfaces.setDescription('Path: router.actions.igmpDataRep.interfaces')
ar1645v2PRoutIgmpDataRepIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 113, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutIgmpDataRepIpAddress.setDescription('Path: router.actions.igmpDataRep.ipAddress')
ar1645v2PRoutQmOnDemand = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 8043), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutQmOnDemand.setDescription('Path: router.actions.qmOnDemand\r\n       Info: start sending pings')
ar1645v2PRoutAction = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 8044))
ar1645v2PRoutActionSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 8044, 1))
ar1645v2PRoutActionEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 8044, 1, 1))
ar1645v2PRoutActionAction = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 8044, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("restart", 1), ("restartLossWindow", 2), ("stop", 3), ("stopAndClear", 4),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutActionAction.setDescription('Path: router.actions.action.action\r\n\r\n       Possibilities:\r\n               restart   (1)\r\n               restartLossWindow   (2)\r\n               stop   (3)\r\n               stopAndClear   (4)')
ar1645v2PRoutActionName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 8044, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutActionName.setDescription('Path: router.actions.action.name')
ar1645v2PRoutClearTracert = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 154), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutClearTracert.setDescription('Path: router.actions.clearTracert\r\n       Info: Clear traceroute results')
ar1645v2PRoutStopTracert = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 152), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutStopTracert.setDescription('Path: router.actions.stopTracert\r\n       Info: stop ongoing traceroutes')
ar1645v2PRoutStartTracert = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 150), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutStartTracert.setDescription('Path: router.actions.startTracert\r\n       Info: start traceroute')
ar1645v2PRoutTracertData = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151))
ar1645v2PRoutTracertDataSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1))
ar1645v2PRoutTracertDataEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1))
ar1645v2PRoutTracertDataIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataIpAddress.setDescription('Path: router.actions.tracertData.ipAddress')
ar1645v2PRoutTracertDataHostName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataHostName.setDescription('Path: router.actions.tracertData.hostName')
ar1645v2PRoutTracertDataSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 50331648), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataSourceIp.setDescription('Path: router.actions.tracertData.sourceIp')
ar1645v2PRoutTracertDataStartTtl = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataStartTtl.setDescription('Path: router.actions.tracertData.startTtl')
ar1645v2PRoutTracertDataMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 83886080), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataMaxHops.setDescription('Path: router.actions.tracertData.maxHops')
ar1645v2PRoutTracertDataQueriesPerHop = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 100663296), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataQueriesPerHop.setDescription('Path: router.actions.tracertData.queriesPerHop')
ar1645v2PRoutTracertDataResolveHosts = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 117440512), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1,)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataResolveHosts.setDescription('Path: router.actions.tracertData.resolveHosts\r\n\r\n       Possibilities:\r\n               disabled   (0)\r\n               enabled   (1)')
ar1645v2PRoutTracertDataDnsTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 134217728), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataDnsTimeOut.setDescription('Path: router.actions.tracertData.dnsTimeOut\r\n\r\n       Time in centi-second.')
ar1645v2PRoutTracertDataIcmpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 150994944), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataIcmpTimeOut.setDescription('Path: router.actions.tracertData.icmpTimeOut\r\n\r\n       Time in centi-second.')
ar1645v2PRoutTracertDataTos = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 167772160), Integer32().subtype(subtypeSpec=SingleValueConstraint(32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataTos.setDescription('Path: router.actions.tracertData.tos\r\n\r\n       Possibilities:\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
ar1645v2PRoutTracertDataDataLength = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 151, 1, 1, 184549376), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTracertDataDataLength.setDescription('Path: router.actions.tracertData.dataLength')
ar1645v2PRoutUnBlacklist = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutUnBlacklist.setDescription('Path: router.actions.unBlacklist\r\n       Info: delete an entry/range of entries from the DHCP Blacklist')
ar1645v2PRoutUnBlacklistData = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 48))
ar1645v2PRoutUnBlacklistDataSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 48, 1))
ar1645v2PRoutUnBlacklistDataEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 48, 1, 1))
ar1645v2PRoutUnBlacklistDataStartIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 48, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutUnBlacklistDataStartIp.setDescription('Path: router.actions.unBlacklistData.startIp')
ar1645v2PRoutUnBlacklistDataStopIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 48, 1, 1, 33554432), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutUnBlacklistDataStopIp.setDescription('Path: router.actions.unBlacklistData.stopIp')
ar1645v2PRoutUnBlacklistDataMac = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 48, 1, 1, 50331648), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutUnBlacklistDataMac.setDescription('Path: router.actions.unBlacklistData.mac\r\n\r\n       MAC address.')
ar1645v2PRoutStopPing = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutStopPing.setDescription('Path: router.actions.stopPing\r\n       Info: stop sending pings')
ar1645v2PRoutStartPing = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutStartPing.setDescription('Path: router.actions.startPing\r\n       Info: start sending pings')
ar1645v2PRoutPingData = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44))
ar1645v2PRoutPingDataSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1))
ar1645v2PRoutPingDataEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1))
ar1645v2PRoutPingDataIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataIpAddress.setDescription('Path: router.actions.pingData.ipAddress')
ar1645v2PRoutPingDataHostName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 100663296), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataHostName.setDescription('Path: router.actions.pingData.hostName')
ar1645v2PRoutPingDataSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 117440512), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataSourceIp.setDescription('Path: router.actions.pingData.sourceIp')
ar1645v2PRoutPingDataTos = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 134217728), Integer32().subtype(subtypeSpec=SingleValueConstraint(32, 64, 96, 128, 160, 192, 224, 40, 48, 56, 72, 80, 88, 104, 112, 120, 136, 144, 152, 184,)).clone(namedValues=NamedValues(("cs1", 32), ("cs2", 64), ("cs3", 96), ("cs4", 128), ("cs5", 160), ("cs6", 192), ("cs7", 224), ("af11", 40), ("af12", 48), ("af13", 56), ("af21", 72), ("af22", 80), ("af23", 88), ("af31", 104), ("af32", 112), ("af33", 120), ("af41", 136), ("af42", 144), ("af43", 152), ("ef", 184),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataTos.setDescription('Path: router.actions.pingData.tos\r\n\r\n       Possibilities:\r\n               cs1   (32)\r\n               cs2   (64)\r\n               cs3   (96)\r\n               cs4   (128)\r\n               cs5   (160)\r\n               cs6   (192)\r\n               cs7   (224)\r\n               af11   (40)\r\n               af12   (48)\r\n               af13   (56)\r\n               af21   (72)\r\n               af22   (80)\r\n               af23   (88)\r\n               af31   (104)\r\n               af32   (112)\r\n               af33   (120)\r\n               af41   (136)\r\n               af42   (144)\r\n               af43   (152)\r\n               ef   (184)')
ar1645v2PRoutPingDataFragment = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 150994944), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("yes", 1), ("no", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataFragment.setDescription('Path: router.actions.pingData.fragment\r\n\r\n       Possibilities:\r\n               yes   (1)\r\n               no   (2)')
ar1645v2PRoutPingDataTtl = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 167772160), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataTtl.setDescription('Path: router.actions.pingData.ttl')
ar1645v2PRoutPingDataIterations = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 33554432), Integer32().subtype(subtypeSpec=SingleValueConstraint(0,)).clone(namedValues=NamedValues(("unlimited", 0),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataIterations.setDescription('Path: router.actions.pingData.iterations\r\n\r\n       Possibilities:\r\n               unlimited   (0)')
ar1645v2PRoutPingDataInterval = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 50331648), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataInterval.setDescription('Path: router.actions.pingData.interval')
ar1645v2PRoutPingDataDataLength = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 67108864), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataDataLength.setDescription('Path: router.actions.pingData.dataLength')
ar1645v2PRoutPingDataTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 44, 1, 1, 83886080), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPingDataTimeOut.setDescription('Path: router.actions.pingData.timeOut\r\n\r\n       Time in centi-second.')
ar1645v2PRoutRestartDhcpClient = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 88), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutRestartDhcpClient.setDescription('Path: router.actions.restartDhcpClient\r\n       Info: restart the dhcp client')
ar1645v2PRoutInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 89), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutInterfaceName.setDescription('Path: router.actions.interfaceName\r\n       Info: Name of the interface')
ar1645v2PRoutSendRipReqAction = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 301), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutSendRipReqAction.setDescription('Path: router.actions.sendRipReqAction\r\n       Info: send RIP request to specific router')
ar1645v2PRoutRequestArguments = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 302))
ar1645v2PRoutRequestArgumentsSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 302, 1))
ar1645v2PRoutRequestArgumentsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 302, 1, 1))
ar1645v2PRoutRequestArgumentsRouterIp = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 302, 1, 1, 16777216), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutRequestArgumentsRouterIp.setDescription('Path: router.actions.requestArguments.routerIp')
ar1645v2PRoutRequestArgumentsOutIf = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 302, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutRequestArgumentsOutIf.setDescription('Path: router.actions.requestArguments.outgoingInterface')
ar1645v2PRoutClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 263), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutClearCounters.setDescription('Path: router.actions.clearCounters\r\n       Info: reset counters')
ar1645v2PRoutClearDnsCache = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 155), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutClearDnsCache.setDescription('Path: router.actions.clearDnsCache\r\n       Info: clear the DNS cache table')
ar1645v2PRoutFreeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 106), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutFreeIpAddress.setDescription('Path: router.actions.freeIpAddress\r\n       Info: Free ip address')
ar1645v2PRoutAddr = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 107), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutAddr.setDescription('Path: router.actions.address\r\n       Info: ip address attribute')
ar1645v2PRoutTakeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 104), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutTakeIpAddress.setDescription('Path: router.actions.takeIpAddress\r\n       Info: Take ip address from pool')
ar1645v2PRoutPool = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 105))
ar1645v2PRoutPoolSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 105, 1))
ar1645v2PRoutPoolEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 105, 1, 1))
ar1645v2PRoutPoolPoolType = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 105, 1, 1, 16777216), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("list", 1), ("interval", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPoolPoolType.setDescription('Path: router.actions.poolTypeName.poolType\r\n\r\n       Possibilities:\r\n               list   (1)\r\n               interval   (2)')
ar1645v2PRoutPoolPoolName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 105, 1, 1, 33554432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutPoolPoolName.setDescription('Path: router.actions.poolTypeName.poolName')
ar1645v2PRoutForceDnsUpdate = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 84), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutForceDnsUpdate.setDescription('Path: router.actions.forceDnsUpdate\r\n       Info: Force a DNS Update')
ar1645v2PRoutDnsUpdateName = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 16, 85), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ar1645v2PRoutDnsUpdateName.setDescription('Path: router.actions.dnsUpdateName\r\n       Info: Name of DNS Update table entry')
fr1645v2PRout = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13))
fr1645v2PRoutAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202))
fr1645v2PRoutAlarmSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1))
fr1645v2PRoutAlarmEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1))
fr1645v2PRoutAlarmDiscriminator = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 16777216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmDiscriminator.setDescription('Path: router.alarms.alarmInfo.discriminator')
fr1645v2PRoutAlarmCurrent = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 33554432), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmCurrent.setDescription('Path: router.alarms.alarmInfo.currentAlarms\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
fr1645v2PRoutAlarmPrevious = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 50331648), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmPrevious.setDescription('Path: router.alarms.alarmInfo.previousAlarms\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
fr1645v2PRoutAlarmMask = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 67108864), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmMask.setDescription('Path: router.alarms.alarmInfo.alarmMask\r\n\r\n       Bit meanings:\r\n               bit 0 = pingActive,\r\n               bit 1 = qMonLoss,\r\n               bit 2 = qMonDelay,\r\n               bit 3 = qMonJitter')
fr1645v2PRoutAlarmLevPingActive = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 83951616), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmLevPingActive.setDescription('Path: router.alarms.alarmInfo.alarmLevel.pingActive')
fr1645v2PRoutAlarmLevQMonLoss = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 84017152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmLevQMonLoss.setDescription('Path: router.alarms.alarmInfo.alarmLevel.qMonLoss')
fr1645v2PRoutAlarmLevQMonDelay = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 84082688), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmLevQMonDelay.setDescription('Path: router.alarms.alarmInfo.alarmLevel.qMonDelay')
fr1645v2PRoutAlarmLevQMonJitter = MibScalar((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 1, 1, 84148224), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fr1645v2PRoutAlarmLevQMonJitter.setDescription('Path: router.alarms.alarmInfo.alarmLevel.qMonJitter')
fr1645v2PRoutAlarmE2 = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2))
fr1645v2PRoutAlarmE2Entry = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1))
fr1645v2PRoutAlarmE2PingActive = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 10))
fr1645v2PRoutAlarmE2PingActivePfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 10, 0))
fr1645v2PRoutAlarmE2PingActiveOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 10, 0, 1)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2PingActiveOff.setDescription("This trap signifies that bit 'pingActive'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the ON to the OFF state.")
fr1645v2PRoutAlarmE2PingActiveOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 10, 0, 2)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2PingActiveOn.setDescription("This trap signifies that bit 'pingActive'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the OFF to the ON state.")
fr1645v2PRoutAlarmE2QMonLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 11))
fr1645v2PRoutAlarmE2QMonLossPfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 11, 0))
fr1645v2PRoutAlarmE2QMonLossOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 11, 0, 1)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2QMonLossOff.setDescription("This trap signifies that bit 'qMonLoss'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the ON to the OFF state.")
fr1645v2PRoutAlarmE2QMonLossOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 11, 0, 2)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2QMonLossOn.setDescription("This trap signifies that bit 'qMonLoss'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the OFF to the ON state.")
fr1645v2PRoutAlarmE2QMonDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 12))
fr1645v2PRoutAlarmE2QMonDelayPfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 12, 0))
fr1645v2PRoutAlarmE2QMonDelayOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 12, 0, 1)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2QMonDelayOff.setDescription("This trap signifies that bit 'qMonDelay'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the ON to the OFF state.")
fr1645v2PRoutAlarmE2QMonDelayOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 12, 0, 2)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2QMonDelayOn.setDescription("This trap signifies that bit 'qMonDelay'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the OFF to the ON state.")
fr1645v2PRoutAlarmE2QMonJitter = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 13))
fr1645v2PRoutAlarmE2QMonJitterPfx = MibIdentifier((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 13, 0))
fr1645v2PRoutAlarmE2QMonJitterOff = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 13, 0, 1)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2QMonJitterOff.setDescription("This trap signifies that bit 'qMonJitter'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the ON to the OFF state.")
fr1645v2PRoutAlarmE2QMonJitterOn = NotificationType((1, 3, 6, 1, 4, 1, 776, 1126, 2093, 13, 202, 2, 1, 13, 0, 2)).setObjects(*(("R1645v2-QUALMON", "ifIndex"), ("R1645v2-QUALMON", "tlsCntTreeGlobalIndex"), ("R1645v2-QUALMON", "tlsTrapDescription"), ("R1645v2-QUALMON", "tlsSeverityLevel"), ("R1645v2-QUALMON", "tlsTrapSeverityLevel"),))
if mibBuilder.loadTexts: fr1645v2PRoutAlarmE2QMonJitterOn.setDescription("This trap signifies that bit 'qMonJitter'\r\n                representing an alarm condition in the alarm word\r\n                of attribute 'alarmInfo' of managed object 'poolRouter2'\r\n                (root='router1645') has changed from the OFF to the ON state.")
mibBuilder.exportSymbols("R1645v2-QUALMON", sr1645v2PRoutIgmpTableMembers=sr1645v2PRoutIgmpTableMembers, ar1645v2PRoutPingDataDataLength=ar1645v2PRoutPingDataDataLength, ar1645v2PRoutRequestArgumentsOutIf=ar1645v2PRoutRequestArgumentsOutIf, pr1645v2PRoutTacacsAuthServer=pr1645v2PRoutTacacsAuthServer, er1645v2PRoutPppSecretTableTableIx=er1645v2PRoutPppSecretTableTableIx, pr1645v2PRoutTracertResultsRepTimMax=pr1645v2PRoutTracertResultsRepTimMax, pr1645v2PRoutQualMonLoggingDelayMin=pr1645v2PRoutQualMonLoggingDelayMin, er1645v2PRoutTacacsEntry=er1645v2PRoutTacacsEntry, sr1645v2PRoutDnsUpdCliSSCTable=sr1645v2PRoutDnsUpdCliSSCTable, fr1645v2PRoutAlarmE2QMonDelayOn=fr1645v2PRoutAlarmE2QMonDelayOn, er1645v2PRoutDhcpStatSSCTable=er1645v2PRoutDhcpStatSSCTable, er1645v2PRoutQualMonDestinationsActions=er1645v2PRoutQualMonDestinationsActions, ar1645v2PRoutIgmpDataRepIpAddress=ar1645v2PRoutIgmpDataRepIpAddress, pr1645v2PRoutIgmpProxyEntry=pr1645v2PRoutIgmpProxyEntry, er1645v2PRoutQualMonDestinations=er1645v2PRoutQualMonDestinations, er1645v2PRoutAddrPoolsPoolIntervalTo=er1645v2PRoutAddrPoolsPoolIntervalTo, sr1645v2PRoutInterfacesMask=sr1645v2PRoutInterfacesMask, sr1645v2PRoutDnsCache=sr1645v2PRoutDnsCache, pr1645v2PRoutPingResultsRepTimAvrg=pr1645v2PRoutPingResultsRepTimAvrg, pr1645v2PRoutPingResultsRepTimMin=pr1645v2PRoutPingResultsRepTimMin, r1645v2PRoutMOPropPath=r1645v2PRoutMOPropPath, er1645v2PRoutAddrPoolsName=er1645v2PRoutAddrPoolsName, pr1645v2PRoutQualMonLoggingUpDownDelayDownMax=pr1645v2PRoutQualMonLoggingUpDownDelayDownMax, sr1645v2PRoutDhcpRelayEntry=sr1645v2PRoutDhcpRelayEntry, r1645v2PRout=r1645v2PRout, pr1645v2PRoutQualMonJitterAvrg=pr1645v2PRoutQualMonJitterAvrg, er1645v2PRoutQualMonDestinationsDelayAlarmSamples=er1645v2PRoutQualMonDestinationsDelayAlarmSamples, er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff=er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOff, ar1645v2PRoutRestartDhcpClient=ar1645v2PRoutRestartDhcpClient, pr1645v2PRoutRadiusAuthDroppedPackets=pr1645v2PRoutRadiusAuthDroppedPackets, er1645v2PRoutDefaultRoute=er1645v2PRoutDefaultRoute, pr1645v2PRoutIgmpProxyInData=pr1645v2PRoutIgmpProxyInData, pr1645v2PRoutQualMonLoggingSysUpTime=pr1645v2PRoutQualMonLoggingSysUpTime, pr1645v2PRoutTacacsAuthAuthenticationStartPkts=pr1645v2PRoutTacacsAuthAuthenticationStartPkts, pr1645v2PRout=pr1645v2PRout, er1645v2PRoutDhcpStatNameServer=er1645v2PRoutDhcpStatNameServer, sr1645v2PRoutPoolReservationsSSCTable=sr1645v2PRoutPoolReservationsSSCTable, er1645v2PRoutAlarmLevQMonLoss=er1645v2PRoutAlarmLevQMonLoss, ar1645v2PRoutIgmpDataRep=ar1645v2PRoutIgmpDataRep, pr1645v2PRoutUdpServerSessionsEntry=pr1645v2PRoutUdpServerSessionsEntry, pr1645v2PRoutUdpServerNbrPckt=pr1645v2PRoutUdpServerNbrPckt, sr1645v2PRoutDhcpRelayMac=sr1645v2PRoutDhcpRelayMac, fr1645v2PRoutAlarmE2QMonDelay=fr1645v2PRoutAlarmE2QMonDelay, ar1645v2PRoutSendRipReqAction=ar1645v2PRoutSendRipReqAction, sr1645v2PRoutIgmpTableSSCTable=sr1645v2PRoutIgmpTableSSCTable, er1645v2PRoutQualMonDestinationsPriority=er1645v2PRoutQualMonDestinationsPriority, er1645v2PRoutDhcpStatOptionsValueAscii=er1645v2PRoutDhcpStatOptionsValueAscii, pr1645v2PRoutRadiusAcctSSC=pr1645v2PRoutRadiusAcctSSC, sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress=sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateIpAddress, er1645v2PRoutAddrPoolsPoolListLocal=er1645v2PRoutAddrPoolsPoolListLocal, pr1645v2PRoutRadiusAcctBadAuth=pr1645v2PRoutRadiusAcctBadAuth, er1645v2PRoutDhcpStatBootFile=er1645v2PRoutDhcpStatBootFile, er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff=er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOff, sr1645v2PRoutDnsServersType=sr1645v2PRoutDnsServersType, sr1645v2PRoutDhcpRelaySSCTable=sr1645v2PRoutDhcpRelaySSCTable, ar1645v2PRoutDnsUpdateName=ar1645v2PRoutDnsUpdateName, er1645v2PRoutDhcpStatOptions=er1645v2PRoutDhcpStatOptions, er1645v2PRoutMulticastRouting=er1645v2PRoutMulticastRouting, er1645v2PRoutPppSecretTable=er1645v2PRoutPppSecretTable, pr1645v2PRoutUdpServerActiveSessions=pr1645v2PRoutUdpServerActiveSessions, er1645v2PRoutQualMonDestinationsProtocolUdpServerPort=er1645v2PRoutQualMonDestinationsProtocolUdpServerPort, ar1645v2PRoutUnBlacklistDataSSC=ar1645v2PRoutUnBlacklistDataSSC, pr1645v2PRoutQualMonTableIx=pr1645v2PRoutQualMonTableIx, pr1645v2PRoutQualMonUpDownDelayDownMin=pr1645v2PRoutQualMonUpDownDelayDownMin, ar1645v2PRoutTracertDataQueriesPerHop=ar1645v2PRoutTracertDataQueriesPerHop, sr1645v2PRoutRadiusPendingRequests=sr1645v2PRoutRadiusPendingRequests, sr1645v2PRoutDhcpStatTableIx=sr1645v2PRoutDhcpStatTableIx, er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff=er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOff, fr1645v2PRoutAlarmE2QMonDelayPfx=fr1645v2PRoutAlarmE2QMonDelayPfx, er1645v2PRoutQualMonEntry=er1645v2PRoutQualMonEntry, er1645v2PRoutTacacsAuthServersSecret=er1645v2PRoutTacacsAuthServersSecret, er1645v2PRoutLog=er1645v2PRoutLog, er1645v2PRoutQualMonDestinationsSource=er1645v2PRoutQualMonDestinationsSource, er1645v2PRoutRoutingTableRemark=er1645v2PRoutRoutingTableRemark, sr1645v2PRoutDhcpStatStartRange=sr1645v2PRoutDhcpStatStartRange, pr1645v2PRoutQualMonUpDownLossDelayUp=pr1645v2PRoutQualMonUpDownLossDelayUp, er1645v2PRoutHostsHostname=er1645v2PRoutHostsHostname, sr1645v2PRoutRoutingTablePref=sr1645v2PRoutRoutingTablePref, er1645v2PRoutDhcpStatDnsSetting=er1645v2PRoutDhcpStatDnsSetting, er1645v2PRoutDhcpDynOptionsActions=er1645v2PRoutDhcpDynOptionsActions, sr1645v2PRoutDnsDomainsRcvdInterface=sr1645v2PRoutDnsDomainsRcvdInterface, er1645v2PRoutSysSecret=er1645v2PRoutSysSecret, pr1645v2PRoutTracertResultsNrTx=pr1645v2PRoutTracertResultsNrTx, er1645v2PRoutDhcpDynBootFileOption=er1645v2PRoutDhcpDynBootFileOption, pr1645v2PRoutTacacsAuthPort=pr1645v2PRoutTacacsAuthPort, sr1645v2PRoutInterfaces=sr1645v2PRoutInterfaces, er1645v2PRoutRoutingTableIf=er1645v2PRoutRoutingTableIf, er1645v2PRoutDhcpStatNameServer2=er1645v2PRoutDhcpStatNameServer2, er1645v2PRoutDnsProxy=er1645v2PRoutDnsProxy, er1645v2PRoutDnsUpdCliDnsProvDynDnsMxName=er1645v2PRoutDnsUpdCliDnsProvDynDnsMxName, pr1645v2PRoutQualMonUpDownDelayDownMax=pr1645v2PRoutQualMonUpDownDelayDownMax, pr1645v2PRoutQualMonDelayMin=pr1645v2PRoutQualMonDelayMin, ar1645v2PRoutStartPing=ar1645v2PRoutStartPing, sr1645v2PRoutDhcpStatSSCTable=sr1645v2PRoutDhcpStatSSCTable, er1645v2PRoutDnsEntry=er1645v2PRoutDnsEntry, ar1645v2PRoutTracertDataStartTtl=ar1645v2PRoutTracertDataStartTtl, er1645v2PRoutLogDhcpSyslogMask=er1645v2PRoutLogDhcpSyslogMask, ar1645v2PRoutUnBlacklistDataEntry=ar1645v2PRoutUnBlacklistDataEntry, er1645v2PRoutDhcpDynDomainName=er1645v2PRoutDhcpDynDomainName, r1645v2PRoutMOProp=r1645v2PRoutMOProp, er1645v2PRoutRipNeighborsIpAddress=er1645v2PRoutRipNeighborsIpAddress, r1645v2PRoutMOPropRev=r1645v2PRoutMOPropRev, er1645v2PRoutDhcpStatTftpServer=er1645v2PRoutDhcpStatTftpServer, er1645v2PRoutR2ScrtTblEntry=er1645v2PRoutR2ScrtTblEntry, ar1645v2PRoutIgmpDataRepInterfaces=ar1645v2PRoutIgmpDataRepInterfaces, pr1645v2PRoutQualMonLoggingUpDownJitterDownNegMax=pr1645v2PRoutQualMonLoggingUpDownJitterDownNegMax, er1645v2PRoutTacacsAuthServersTableIx=er1645v2PRoutTacacsAuthServersTableIx, er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff=er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOff, ar1645v2PRoutPoolPoolType=ar1645v2PRoutPoolPoolType, er1645v2PRoutDefaultRouteSSC=er1645v2PRoutDefaultRouteSSC, sr1645v2PRoutIgmpTableMulticast=sr1645v2PRoutIgmpTableMulticast, pr1645v2PRoutQualMonNbrRxPckt=pr1645v2PRoutQualMonNbrRxPckt, er1645v2PRoutDnsUpdCli=er1645v2PRoutDnsUpdCli, sr1645v2PRoutDnsUpdCliName=sr1645v2PRoutDnsUpdCliName, ar1645v2PRoutTracertDataSSC=ar1645v2PRoutTracertDataSSC, pr1645v2PRoutTracertResults=pr1645v2PRoutTracertResults, er1645v2PRoutHostsTableIx=er1645v2PRoutHostsTableIx, sr1645v2PRoutDhcpStatHold=sr1645v2PRoutDhcpStatHold, sr1645v2PRoutAddrPoolsNrOfAddresses=sr1645v2PRoutAddrPoolsNrOfAddresses, sr1645v2PRoutAddrPoolsType=sr1645v2PRoutAddrPoolsType, pr1645v2PRoutTacacsAuthSSCTable=pr1645v2PRoutTacacsAuthSSCTable, er1645v2PRoutRoutingTableMask=er1645v2PRoutRoutingTableMask, fr1645v2PRoutAlarmE2QMonLossOff=fr1645v2PRoutAlarmE2QMonLossOff, sr1645v2PRoutDnsServersStatus=sr1645v2PRoutDnsServersStatus, ar1645v2PRoutClearCounters=ar1645v2PRoutClearCounters, pr1645v2PRoutTracertResultsComment=pr1645v2PRoutTracertResultsComment, pr1645v2PRoutRadiusAuthTableIx=pr1645v2PRoutRadiusAuthTableIx, pr1645v2PRoutRadiusAuth=pr1645v2PRoutRadiusAuth, sr1645v2PRoutDhcpBindingSSCTable=sr1645v2PRoutDhcpBindingSSCTable, PYSNMP_MODULE_ID=r1645Rootv2, er1645v2PRoutDefaultRoutePreference=er1645v2PRoutDefaultRoutePreference, sr1645v2PRoutInterfacesSSCTable=sr1645v2PRoutInterfacesSSCTable, r1645v2PRoutMOPropEntry=r1645v2PRoutMOPropEntry, ar1645v2PRoutRequestArgumentsRouterIp=ar1645v2PRoutRequestArgumentsRouterIp, fr1645v2PRoutAlarmMask=fr1645v2PRoutAlarmMask, sr1645v2PRoutDhcpRelayLeaseTime=sr1645v2PRoutDhcpRelayLeaseTime, sr1645v2PRoutDhcpBinding=sr1645v2PRoutDhcpBinding, pr1645v2PRoutQualMonName=pr1645v2PRoutQualMonName, er1645v2PRoutRadiusAcctServerAddress=er1645v2PRoutRadiusAcctServerAddress, sr1645v2PRoutDhcpStatFree=sr1645v2PRoutDhcpStatFree, sr1645v2PRoutDhcpBindingTableIx=sr1645v2PRoutDhcpBindingTableIx, sr1645v2PRoutAddrPoolsTableIx=sr1645v2PRoutAddrPoolsTableIx, pr1645v2PRoutQualMonUpDownDelayUpMin=pr1645v2PRoutQualMonUpDownDelayUpMin, er1645v2PRoutDhcpStatActions=er1645v2PRoutDhcpStatActions, ar1645v2PRoutRequestArgumentsEntry=ar1645v2PRoutRequestArgumentsEntry, pr1645v2PRoutIpFragmentsExpiredFrames=pr1645v2PRoutIpFragmentsExpiredFrames, sr1645v2PRoutRoutingTableNetwork=sr1645v2PRoutRoutingTableNetwork, sr1645v2PRoutDhcpStatEndRange=sr1645v2PRoutDhcpStatEndRange, sr1645v2PRoutDnsServersTableIx=sr1645v2PRoutDnsServersTableIx, sr1645v2PRoutRadiusAcctServer=sr1645v2PRoutRadiusAcctServer, er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff=er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOff, sr1645v2PRoutRadiusAuthServer=sr1645v2PRoutRadiusAuthServer, sr1645v2PRoutInterfacesIfDescr=sr1645v2PRoutInterfacesIfDescr, sr1645v2PRoutDnsCacheIpV6Address=sr1645v2PRoutDnsCacheIpV6Address, er1645v2PRoutAlarmLev=er1645v2PRoutAlarmLev, er1645v2PRoutAlarmLevSSC=er1645v2PRoutAlarmLevSSC, ar1645v2PRoutPool=ar1645v2PRoutPool, er1645v2PRoutR2ScrtTblSecret=er1645v2PRoutR2ScrtTblSecret, sr1645v2PRoutInterfacesIfType=sr1645v2PRoutInterfacesIfType, pr1645v2PRoutTracertResultsEntry=pr1645v2PRoutTracertResultsEntry, sr1645v2PRoutRadiusSSC=sr1645v2PRoutRadiusSSC, sr1645v2PRoutDnsDomainsTableIx=sr1645v2PRoutDnsDomainsTableIx, fr1645v2PRoutAlarmSSC=fr1645v2PRoutAlarmSSC, sr1645v2PRoutDnsDomainsEntry=sr1645v2PRoutDnsDomainsEntry, sr1645v2PRoutPoolReservations=sr1645v2PRoutPoolReservations, ar1645v2PRoutActionSSC=ar1645v2PRoutActionSSC, pr1645v2PRoutQualMonUpDownJitterUpPosMax=pr1645v2PRoutQualMonUpDownJitterUpPosMax, sr1645v2PRoutInterfacesTableIx=sr1645v2PRoutInterfacesTableIx, sr1645v2PRoutDhcpBindingInterface=sr1645v2PRoutDhcpBindingInterface, er1645v2PRoutHelperProtocolsEntry=er1645v2PRoutHelperProtocolsEntry, fr1645v2PRoutAlarmLevQMonJitter=fr1645v2PRoutAlarmLevQMonJitter, er1645v2PRoutQualMonUdpServerPortPriority=er1645v2PRoutQualMonUdpServerPortPriority, sr1645v2PRoutDhcpBlacklistSSCTable=sr1645v2PRoutDhcpBlacklistSSCTable, er1645v2PRoutPppSecretTableSecret=er1645v2PRoutPppSecretTableSecret, sr1645v2PRoutIgmpTableTableIx=sr1645v2PRoutIgmpTableTableIx, er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff=er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOff, er1645v2PRoutQualMonUdpServerPort=er1645v2PRoutQualMonUdpServerPort, ar1645v2PRoutTakeIpAddress=ar1645v2PRoutTakeIpAddress, sr1645v2PRoutDnsDomainsName=sr1645v2PRoutDnsDomainsName, pr1645v2PRoutQualMonLoss=pr1645v2PRoutQualMonLoss, ar1645v2PRoutPingData=ar1645v2PRoutPingData, er1645v2PRoutRoutingTableProxyArp=er1645v2PRoutRoutingTableProxyArp, pr1645v2PRoutPingResultsNbrRxPckt=pr1645v2PRoutPingResultsNbrRxPckt, er1645v2PRoutAddrPoolsEntry=er1645v2PRoutAddrPoolsEntry, er1645v2PRoutRoutingProtocol=er1645v2PRoutRoutingProtocol, er1645v2PRoutRadiusAuthServersEncModeSecret=er1645v2PRoutRadiusAuthServersEncModeSecret, er1645v2PRoutDhcpDynOptionsValueDecimal=er1645v2PRoutDhcpDynOptionsValueDecimal, sr1645v2PRoutDhcpBindingCheckAddress=sr1645v2PRoutDhcpBindingCheckAddress, sr1645v2PRoutInterfacesSecondaryIpNetMask=sr1645v2PRoutInterfacesSecondaryIpNetMask, sr1645v2PRoutDnsServersSecondaryDns=sr1645v2PRoutDnsServersSecondaryDns, fr1645v2PRoutAlarmE2QMonJitter=fr1645v2PRoutAlarmE2QMonJitter, pr1645v2PRoutRadiusAuthEntry=pr1645v2PRoutRadiusAuthEntry, sr1645v2PRoutRoutingTableMetric=sr1645v2PRoutRoutingTableMetric, pr1645v2PRoutQualMonLoggingTableIx=pr1645v2PRoutQualMonLoggingTableIx, er1645v2PRoutDnsUpdCliDnsProvDynDnsSystem=er1645v2PRoutDnsUpdCliDnsProvDynDnsSystem, sr1645v2PRoutDhcpStatLeased=sr1645v2PRoutDhcpStatLeased, sr1645v2PRoutDnsDomains=sr1645v2PRoutDnsDomains, ar1645v2PRoutSendIgmpLeave=ar1645v2PRoutSendIgmpLeave, pr1645v2PRoutPingResults=pr1645v2PRoutPingResults, ar1645v2PRoutStartTracert=ar1645v2PRoutStartTracert, er1645v2PRoutRadiusAcctServerTimeOut=er1645v2PRoutRadiusAcctServerTimeOut, pr1645v2PRoutQualMonLoggingUpDownJitterUpPosMax=pr1645v2PRoutQualMonLoggingUpDownJitterUpPosMax, er1645v2PRoutQualMonDestinationsProtocolIcmp=er1645v2PRoutQualMonDestinationsProtocolIcmp, pr1645v2PRoutQualMonLoggingError=pr1645v2PRoutQualMonLoggingError, er1645v2PRoutLogMode=er1645v2PRoutLogMode, sr1645v2PRoutPoolReservationsLocal=sr1645v2PRoutPoolReservationsLocal, er1645v2PRoutHostsIpAddress=er1645v2PRoutHostsIpAddress, pr1645v2PRoutIgmpProxyInDiscards=pr1645v2PRoutIgmpProxyInDiscards, er1645v2PRoutRadiusEntry=er1645v2PRoutRadiusEntry, sr1645v2PRoutDhcpBindingLeaseTime=sr1645v2PRoutDhcpBindingLeaseTime, er1645v2PRoutAddrPoolsPoolList=er1645v2PRoutAddrPoolsPoolList, pr1645v2PRoutIgmpProxyOutIgmp=pr1645v2PRoutIgmpProxyOutIgmp, pr1645v2PRoutTacacsAuthAuthenticationContinuePkts=pr1645v2PRoutTacacsAuthAuthenticationContinuePkts, er1645v2PRoutPppSecretTableSSCTable=er1645v2PRoutPppSecretTableSSCTable, pr1645v2PRoutRadiusAcctVrfRouter=pr1645v2PRoutRadiusAcctVrfRouter, fr1645v2PRoutAlarmE2PingActivePfx=fr1645v2PRoutAlarmE2PingActivePfx, pr1645v2PRoutRadiusAcctResponses=pr1645v2PRoutRadiusAcctResponses, pr1645v2PRoutRadiusAuthRejects=pr1645v2PRoutRadiusAuthRejects, er1645v2PRoutDhcpDynNetbiosNT=er1645v2PRoutDhcpDynNetbiosNT, ar1645v2PRoutInterfaceName=ar1645v2PRoutInterfaceName, ar1645v2PRoutTracertDataMaxHops=ar1645v2PRoutTracertDataMaxHops, sr1645v2PRoutDnsCacheTtl=sr1645v2PRoutDnsCacheTtl, er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn=er1645v2PRoutQualMonDestinationsDelayAlarmDelayMinMaxOn, ar1645v2PRoutPingDataIterations=ar1645v2PRoutPingDataIterations, er1645v2PRoutDhcpStatBootFileOption=er1645v2PRoutDhcpStatBootFileOption, er1645v2PRoutRoutingTablePref=er1645v2PRoutRoutingTablePref, er1645v2PRoutHostsEntry=er1645v2PRoutHostsEntry, er1645v2PRoutDhcpDynActions=er1645v2PRoutDhcpDynActions, er1645v2PRoutDhcpDynInterface=er1645v2PRoutDhcpDynInterface, pr1645v2PRoutQualMonNbrTxPckt=pr1645v2PRoutQualMonNbrTxPckt, er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn=er1645v2PRoutQualMonDestinationsDelayAlarmDelayAvrgOn, ar1645v2PRoutClearTracert=ar1645v2PRoutClearTracert, er1645v2PRoutRadiusAcctUpdate=er1645v2PRoutRadiusAcctUpdate, pr1645v2PRoutRadiusAuthChallenges=pr1645v2PRoutRadiusAuthChallenges, pr1645v2PRoutQualMonUpDownJitterUpAvrg=pr1645v2PRoutQualMonUpDownJitterUpAvrg, er1645v2PRoutHelperProtocols=er1645v2PRoutHelperProtocols, pr1645v2PRoutTacacsAuthVrfRouter=pr1645v2PRoutTacacsAuthVrfRouter, pr1645v2PRoutQualMonLoggingLossDelay=pr1645v2PRoutQualMonLoggingLossDelay, pr1645v2PRoutQualMonError=pr1645v2PRoutQualMonError, pr1645v2PRoutTracertResultsTtl=pr1645v2PRoutTracertResultsTtl, sr1645v2PRoutInterfacesEntry=sr1645v2PRoutInterfacesEntry, pr1645v2PRoutRadiusAcctRequests=pr1645v2PRoutRadiusAcctRequests, pr1645v2PRoutTracertResultsRepTimAvrg=pr1645v2PRoutTracertResultsRepTimAvrg, sr1645v2PRoutDnsCacheMatches=sr1645v2PRoutDnsCacheMatches, er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn=er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOn, pr1645v2PRoutTacacsAuthAccepts=pr1645v2PRoutTacacsAuthAccepts, er1645v2PRoutTacacs=er1645v2PRoutTacacs, er1645v2PRoutDhcpStatOptionsTableIx=er1645v2PRoutDhcpStatOptionsTableIx, ar1645v2PRoutIgmpDataLeaveIpAddress=ar1645v2PRoutIgmpDataLeaveIpAddress, er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOn=er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOn, er1645v2PRoutDhcpStatIpAddress=er1645v2PRoutDhcpStatIpAddress, pr1645v2PRoutTacacsAuthAuthenticationReplyPkts=pr1645v2PRoutTacacsAuthAuthenticationReplyPkts, er1645v2PRoutDhcpDynTftpServer=er1645v2PRoutDhcpDynTftpServer, pr1645v2PRoutIpFragmentsReceivedPackets=pr1645v2PRoutIpFragmentsReceivedPackets)
mibBuilder.exportSymbols("R1645v2-QUALMON", ar1645v2PRoutPingDataEntry=ar1645v2PRoutPingDataEntry, pr1645v2PRoutRadiusAcctEntry=pr1645v2PRoutRadiusAcctEntry, sr1645v2PRoutInterfacesSecondaryIpTableIx=sr1645v2PRoutInterfacesSecondaryIpTableIx, er1645v2PRoutDnsSSC=er1645v2PRoutDnsSSC, sr1645v2PRoutDnsUpdCliTableIx=sr1645v2PRoutDnsUpdCliTableIx, er1645v2PRoutRadiusAuthServersEncSecret=er1645v2PRoutRadiusAuthServersEncSecret, er1645v2PRoutAddrPoolsPoolListActions=er1645v2PRoutAddrPoolsPoolListActions, sr1645v2PRoutAddrPoolsSSCTable=sr1645v2PRoutAddrPoolsSSCTable, er1645v2PRoutDhcpDynNameServer=er1645v2PRoutDhcpDynNameServer, sr1645v2PRoutDhcpStatEntry=sr1645v2PRoutDhcpStatEntry, pr1645v2PRoutTracertResultsTableIx=pr1645v2PRoutTracertResultsTableIx, sr1645v2PRoutPoolReservationsNetMask=sr1645v2PRoutPoolReservationsNetMask, sr1645v2PRoutDnsServersSSCTable=sr1645v2PRoutDnsServersSSCTable, sr1645v2PRoutInterfacesSecondaryIpAddress=sr1645v2PRoutInterfacesSecondaryIpAddress, pr1645v2PRoutTacacsAuthAuthorizationResponsePkts=pr1645v2PRoutTacacsAuthAuthorizationResponsePkts, er1645v2PRoutHostsActions=er1645v2PRoutHostsActions, er1645v2PRoutQualMonUdpServerPortTos=er1645v2PRoutQualMonUdpServerPortTos, er1645v2PRoutDhcpDynOptionsTableIx=er1645v2PRoutDhcpDynOptionsTableIx, pr1645v2PRoutQualMonUpDownDelayDownAvrg=pr1645v2PRoutQualMonUpDownDelayDownAvrg, er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff=er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOff, er1645v2PRoutDhcpStatOptionsValueDecimal=er1645v2PRoutDhcpStatOptionsValueDecimal, pr1645v2PRoutQualMonLoggingUpDownDelayUpAvrg=pr1645v2PRoutQualMonLoggingUpDownDelayUpAvrg, pr1645v2PRoutQualMonLoggingUpDownDelayDownAvrg=pr1645v2PRoutQualMonLoggingUpDownDelayDownAvrg, er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOn=er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOn, er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff=er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOff, er1645v2PRoutRoutingTableEntry=er1645v2PRoutRoutingTableEntry, sr1645v2PRoutAddrPoolsName=sr1645v2PRoutAddrPoolsName, sr1645v2PRoutDhcpRelay=sr1645v2PRoutDhcpRelay, er1645v2PRoutR2ScrtTblKeyId=er1645v2PRoutR2ScrtTblKeyId, er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff=er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownMaxOff, fr1645v2PRoutAlarm=fr1645v2PRoutAlarm, pr1645v2PRoutQualMonUpDownJitterUpNegMax=pr1645v2PRoutQualMonUpDownJitterUpNegMax, pr1645v2PRoutQualMonLoggingNbrTxPckt=pr1645v2PRoutQualMonLoggingNbrTxPckt, er1645v2PRoutRoutingTableGateway=er1645v2PRoutRoutingTableGateway, sr1645v2PRoutDnsServersPreference=sr1645v2PRoutDnsServersPreference, er1645v2PRoutTacacsAuthServersActions=er1645v2PRoutTacacsAuthServersActions, pr1645v2PRoutPingResultsEntry=pr1645v2PRoutPingResultsEntry, er1645v2PRoutRadiusAcctServerSource=er1645v2PRoutRadiusAcctServerSource, er1645v2PRoutHostsSSCTable=er1645v2PRoutHostsSSCTable, er1645v2PRoutDhcpStatGateway=er1645v2PRoutDhcpStatGateway, ar1645v2PRoutActionAction=ar1645v2PRoutActionAction, pr1645v2PRoutQualMonUpDownJitterUp=pr1645v2PRoutQualMonUpDownJitterUp, er1645v2PRoutRoutingTableSSCTable=er1645v2PRoutRoutingTableSSCTable, ar1645v2PRoutPingDataTtl=ar1645v2PRoutPingDataTtl, sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode=sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateReturnCode, er1645v2PRoutDhcpStatOptionsEntry=er1645v2PRoutDhcpStatOptionsEntry, sr1645v2PRoutDhcpStat=sr1645v2PRoutDhcpStat, pr1645v2PRoutQualMonLoggingUpDownDelayDownMin=pr1645v2PRoutQualMonLoggingUpDownDelayDownMin, er1645v2PRoutRipHoldDownTime=er1645v2PRoutRipHoldDownTime, er1645v2PRoutTacacsAuthServersSource=er1645v2PRoutTacacsAuthServersSource, sr1645v2PRoutDnsServersPrimaryDns=sr1645v2PRoutDnsServersPrimaryDns, er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOff=er1645v2PRoutQualMonDestinationsLossAlarmAlarmUpOff, sr1645v2PRoutRoutingTableStatus=sr1645v2PRoutRoutingTableStatus, er1645v2PRoutDns=er1645v2PRoutDns, ar1645v2PRoutPingDataTos=ar1645v2PRoutPingDataTos, fr1645v2PRoutAlarmE2=fr1645v2PRoutAlarmE2, er1645v2PRoutQualMonDestinationsTableIx=er1645v2PRoutQualMonDestinationsTableIx, sr1645v2PRoutDhcpBindingEntry=sr1645v2PRoutDhcpBindingEntry, er1645v2PRoutR2ScrtTblTableIx=er1645v2PRoutR2ScrtTblTableIx, pr1645v2PRoutUdpServerSessions=pr1645v2PRoutUdpServerSessions, pr1645v2PRoutQualMonLoggingUpDownJitterUpAvrg=pr1645v2PRoutQualMonLoggingUpDownJitterUpAvrg, fr1645v2PRoutAlarmLevQMonDelay=fr1645v2PRoutAlarmLevQMonDelay, er1645v2PRoutDhcpStatOptionsCode=er1645v2PRoutDhcpStatOptionsCode, er1645v2PRoutDhcpStatNetbiosNS2=er1645v2PRoutDhcpStatNetbiosNS2, sr1645v2PRoutDnsUpdCliEntry=sr1645v2PRoutDnsUpdCliEntry, er1645v2PRoutDhcpCustomVendorId=er1645v2PRoutDhcpCustomVendorId, er1645v2PRoutQualMonUdpServerPortTableIx=er1645v2PRoutQualMonUdpServerPortTableIx, er1645v2PRoutDhcpDynEntry=er1645v2PRoutDhcpDynEntry, er1645v2PRoutDhcpDyn=er1645v2PRoutDhcpDyn, er1645v2PRoutRadiusAuthServersAddress=er1645v2PRoutRadiusAuthServersAddress, er1645v2PRoutDhcpDynTableIx=er1645v2PRoutDhcpDynTableIx, pr1645v2PRoutIgmpProxyInIgmp=pr1645v2PRoutIgmpProxyInIgmp, er1645v2PRoutDhcpStatTftpServerOption=er1645v2PRoutDhcpStatTftpServerOption, pr1645v2PRoutRoutingTableTableIx=pr1645v2PRoutRoutingTableTableIx, er1645v2PRoutDhcpDynHostName=er1645v2PRoutDhcpDynHostName, er1645v2PRoutDhcpStatTableIx=er1645v2PRoutDhcpStatTableIx, er1645v2PRoutLogEntry=er1645v2PRoutLogEntry, pr1645v2PRoutQualMonLoggingDelayAvrg=pr1645v2PRoutQualMonLoggingDelayAvrg, sr1645v2PRoutDhcpBindingIpAddress=sr1645v2PRoutDhcpBindingIpAddress, pr1645v2PRoutRoutingTableMask=pr1645v2PRoutRoutingTableMask, sr1645v2PRoutAddrPools=sr1645v2PRoutAddrPools, er1645v2PRoutSendAdminUnreachable=er1645v2PRoutSendAdminUnreachable, pr1645v2PRoutUdpServerDestinationPort=pr1645v2PRoutUdpServerDestinationPort, er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn=er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpAvrgOn, fr1645v2PRoutAlarmEntry=fr1645v2PRoutAlarmEntry, er1645v2PRoutDhcpStatDomainName=er1645v2PRoutDhcpStatDomainName, ar1645v2PRoutPingDataFragment=ar1645v2PRoutPingDataFragment, pr1645v2PRoutQualMonUpDownJitterDownPosMax=pr1645v2PRoutQualMonUpDownJitterDownPosMax, er1645v2PRoutDhcpDynIpcpSubnet=er1645v2PRoutDhcpDynIpcpSubnet, sr1645v2PRoutDnsCacheInfiniteTimeOut=sr1645v2PRoutDnsCacheInfiniteTimeOut, ar1645v2PRoutTracertDataEntry=ar1645v2PRoutTracertDataEntry, ar1645v2PRoutIgmpDataLeave=ar1645v2PRoutIgmpDataLeave, sr1645v2PRoutDhcpBindingHostName=sr1645v2PRoutDhcpBindingHostName, er1645v2PRoutDefaultRouteEntry=er1645v2PRoutDefaultRouteEntry, er1645v2PRoutRipNeighborsSSCTable=er1645v2PRoutRipNeighborsSSCTable, sr1645v2PRoutDhcpBlacklistIpAddress=sr1645v2PRoutDhcpBlacklistIpAddress, er1645v2PRoutPppSecretTableEntry=er1645v2PRoutPppSecretTableEntry, er1645v2PRoutAddrPoolsSSCTable=er1645v2PRoutAddrPoolsSSCTable, fr1645v2PRoutAlarmE2Entry=fr1645v2PRoutAlarmE2Entry, ar1645v2PRoutTracertDataIpAddress=ar1645v2PRoutTracertDataIpAddress, er1645v2PRoutDnsCacheSize=er1645v2PRoutDnsCacheSize, er1645v2PRoutDnsUpdCliDnsProvDynDnsMxBackup=er1645v2PRoutDnsUpdCliDnsProvDynDnsMxBackup, pr1645v2PRoutQualMonLoggingJitterNegMax=pr1645v2PRoutQualMonLoggingJitterNegMax, er1645v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn=er1645v2PRoutDnsUpdCliDnsProvDynDnsHostNameFqdn, er1645v2PRoutHelperProtocolsSSCTable=er1645v2PRoutHelperProtocolsSSCTable, er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn=er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOn, er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff=er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOff, sr1645v2PRoutDnsCacheTableIx=sr1645v2PRoutDnsCacheTableIx, er1645v2PRoutDefaultRouteMetric=er1645v2PRoutDefaultRouteMetric, er1645v2PRoutTacacsAuthServersEncModeSecret=er1645v2PRoutTacacsAuthServersEncModeSecret, er1645v2PRoutRadiusAuthServersSecret=er1645v2PRoutRadiusAuthServersSecret, sr1645v2PRoutRoutingTableEncap=sr1645v2PRoutRoutingTableEncap, pr1645v2PRoutQualMonLoggingLoss=pr1645v2PRoutQualMonLoggingLoss, er1645v2PRoutRadiusAcctServerEncSecret=er1645v2PRoutRadiusAcctServerEncSecret, pr1645v2PRoutQualMonUpDownLossDelayDown=pr1645v2PRoutQualMonUpDownLossDelayDown, er1645v2PRoutRadiusPpp=er1645v2PRoutRadiusPpp, sr1645v2PRoutDhcpBlacklistReason=sr1645v2PRoutDhcpBlacklistReason, pr1645v2PRoutRadiusAcctDroppedPackets=pr1645v2PRoutRadiusAcctDroppedPackets, ar1645v2PRoutUnBlacklistDataMac=ar1645v2PRoutUnBlacklistDataMac, er1645v2PRoutQualMonDestinationsEntry=er1645v2PRoutQualMonDestinationsEntry, sr1645v2PRoutRoutingTableGateway=sr1645v2PRoutRoutingTableGateway, pr1645v2PRoutTacacsAuthAuthorizationRequestPkts=pr1645v2PRoutTacacsAuthAuthorizationRequestPkts, er1645v2PRoutDnsUpdCliDnsProvDynDnsPassword=er1645v2PRoutDnsUpdCliDnsProvDynDnsPassword, sr1645v2PRoutRadius=sr1645v2PRoutRadius, sr1645v2PRoutInterfacesSecondaryIp=sr1645v2PRoutInterfacesSecondaryIp, fr1645v2PRoutAlarmLevPingActive=fr1645v2PRoutAlarmLevPingActive, pr1645v2PRoutQualMonLoggingEntry=pr1645v2PRoutQualMonLoggingEntry, er1645v2PRoutRadiusAuthServersSource=er1645v2PRoutRadiusAuthServersSource, pr1645v2PRoutTracertResultsIpAddress=pr1645v2PRoutTracertResultsIpAddress, ar1645v2PRoutTracertDataTos=ar1645v2PRoutTracertDataTos, er1645v2PRoutSendTtlExceeded=er1645v2PRoutSendTtlExceeded, er1645v2PRoutHelperProtocolsTableIx=er1645v2PRoutHelperProtocolsTableIx, er1645v2PRoutHelperProtocolsType=er1645v2PRoutHelperProtocolsType, pr1645v2PRoutRadiusAuthSSCTable=pr1645v2PRoutRadiusAuthSSCTable, pr1645v2PRoutQualMonLoggingUpDownDelayUpMin=pr1645v2PRoutQualMonLoggingUpDownDelayUpMin, sr1645v2PRoutRoutingTableEntry=sr1645v2PRoutRoutingTableEntry, er1645v2PRoutQualMonDestinationsName=er1645v2PRoutQualMonDestinationsName, r1645Rootv2=r1645Rootv2, er1645v2PRoutLogSSC=er1645v2PRoutLogSSC, er1645v2PRoutDhcpDynSSCTable=er1645v2PRoutDhcpDynSSCTable, er1645v2PRoutDhcpStatOptionsValueHexData=er1645v2PRoutDhcpStatOptionsValueHexData, pr1645v2PRoutUdpServerSessionsLastActivityTime=pr1645v2PRoutUdpServerSessionsLastActivityTime, ar1645v2PRout=ar1645v2PRout, er1645v2PRoutDnsUpdCliName=er1645v2PRoutDnsUpdCliName, pr1645v2PRoutQualMonAlarm=pr1645v2PRoutQualMonAlarm, sr1645v2PRoutDhcpRelayServerIp=sr1645v2PRoutDhcpRelayServerIp, pr1645v2PRoutRadiusAuthVrfRouter=pr1645v2PRoutRadiusAuthVrfRouter, er1645v2PRoutRadiusAuthServersTimeOut=er1645v2PRoutRadiusAuthServersTimeOut, sr1645v2PRoutPoolReservationsName=sr1645v2PRoutPoolReservationsName, er1645v2PRoutDhcpStatOptionsValueIpAddress=er1645v2PRoutDhcpStatOptionsValueIpAddress, er1645v2PRoutRadiusAuthServers=er1645v2PRoutRadiusAuthServers, er1645v2PRoutQualMonDestinationsLoggingDepth=er1645v2PRoutQualMonDestinationsLoggingDepth, ar1645v2PRoutPingDataSSC=ar1645v2PRoutPingDataSSC, er1645v2PRoutAlternativeRoutes=er1645v2PRoutAlternativeRoutes, sr1645v2PRoutDhcpStatInterface=sr1645v2PRoutDhcpStatInterface, er1645v2PRoutQualMonSSC=er1645v2PRoutQualMonSSC, sr1645v2PRoutRoutingTableTableIx=sr1645v2PRoutRoutingTableTableIx, er1645v2PRoutRadiusSSC=er1645v2PRoutRadiusSSC, pr1645v2PRoutQualMonEntry=pr1645v2PRoutQualMonEntry, er1645v2PRoutDhcpDynIpEndAddress=er1645v2PRoutDhcpDynIpEndAddress, er1645v2PRoutDhcpDynNetbiosNS=er1645v2PRoutDhcpDynNetbiosNS, pr1645v2PRoutIgmpProxySSC=pr1645v2PRoutIgmpProxySSC, pr1645v2PRoutIpFragmentsPendingFrames=pr1645v2PRoutIpFragmentsPendingFrames, er1645v2PRoutDhcpDynMask=er1645v2PRoutDhcpDynMask, er1645v2PRoutQualMonDestinationsIdleSamples=er1645v2PRoutQualMonDestinationsIdleSamples, pr1645v2PRoutQualMonUpDownDelayUpAvrg=pr1645v2PRoutQualMonUpDownDelayUpAvrg, pr1645v2PRoutUdpServerEntry=pr1645v2PRoutUdpServerEntry, pr1645v2PRoutRadiusAcctServer=pr1645v2PRoutRadiusAcctServer, sr1645v2PRoutDnsUpdCliDnsProvDynDnsState=sr1645v2PRoutDnsUpdCliDnsProvDynDnsState, er1645v2PRoutPppSecretTableActions=er1645v2PRoutPppSecretTableActions, sr1645v2PRoutDnsCacheEntry=sr1645v2PRoutDnsCacheEntry, er1645v2PRoutQualMonDestinationsLossAlarmAlarmOn=er1645v2PRoutQualMonDestinationsLossAlarmAlarmOn, pr1645v2PRoutQualMonLoggingUpDownLossDelayUp=pr1645v2PRoutQualMonLoggingUpDownLossDelayUp, pr1645v2PRoutQualMonLastError=pr1645v2PRoutQualMonLastError, pr1645v2PRoutTacacsAuthDrops=pr1645v2PRoutTacacsAuthDrops, er1645v2PRoutAlarmLevPingActive=er1645v2PRoutAlarmLevPingActive, er1645v2PRoutDefaultRouteInterface=er1645v2PRoutDefaultRouteInterface, ar1645v2PRoutTracertDataResolveHosts=ar1645v2PRoutTracertDataResolveHosts, er1645v2PRoutRoutingTableActions=er1645v2PRoutRoutingTableActions, er1645v2PRoutR2ScrtTbl=er1645v2PRoutR2ScrtTbl, er1645v2PRoutAddrPoolsPoolListEntry=er1645v2PRoutAddrPoolsPoolListEntry, pr1645v2PRoutRadiusAuthTimeOuts=pr1645v2PRoutRadiusAuthTimeOuts, pr1645v2PRoutRoutingTableGateway=pr1645v2PRoutRoutingTableGateway, ar1645v2PRoutPoolEntry=ar1645v2PRoutPoolEntry, er1645v2PRoutDnsDomainName=er1645v2PRoutDnsDomainName, sr1645v2PRoutInterfacesSecondaryIpEntry=sr1645v2PRoutInterfacesSecondaryIpEntry, er1645v2PRoutQualMonDestinationsHostName=er1645v2PRoutQualMonDestinationsHostName, er1645v2PRoutDhcpDynNetbiosNS2=er1645v2PRoutDhcpDynNetbiosNS2, sr1645v2PRoutDnsDomainsSSCTable=sr1645v2PRoutDnsDomainsSSCTable, pr1645v2PRoutQualMonUpDownDelayUpMax=pr1645v2PRoutQualMonUpDownDelayUpMax, er1645v2PRoutR2ScrtTblIf=er1645v2PRoutR2ScrtTblIf, pr1645v2PRoutIpFragmentsExcessivelyFragPackets=pr1645v2PRoutIpFragmentsExcessivelyFragPackets, fr1645v2PRoutAlarmE2PingActiveOff=fr1645v2PRoutAlarmE2PingActiveOff, er1645v2PRoutRipUpInt=er1645v2PRoutRipUpInt, sr1645v2PRoutDnsUpdCli=sr1645v2PRoutDnsUpdCli, er1645v2PRoutDhcpStatEntry=er1645v2PRoutDhcpStatEntry, sr1645v2PRoutPoolReservationsTableIx=sr1645v2PRoutPoolReservationsTableIx, er1645v2PRoutDhcpStatHostName=er1645v2PRoutDhcpStatHostName, er1645v2PRoutDnsPrimaryDns=er1645v2PRoutDnsPrimaryDns, ar1645v2PRoutUnBlacklistDataStopIp=ar1645v2PRoutUnBlacklistDataStopIp, er1645v2PRoutRoutingTableMetric=er1645v2PRoutRoutingTableMetric, sr1645v2PRoutInterfacesIfLastChange=sr1645v2PRoutInterfacesIfLastChange, er1645v2PRoutQualMonDestinationsAdminStatus=er1645v2PRoutQualMonDestinationsAdminStatus, pr1645v2PRoutQualMonLoggingJitterPosMax=pr1645v2PRoutQualMonLoggingJitterPosMax, er1645v2PRoutR2ScrtTblSSCTable=er1645v2PRoutR2ScrtTblSSCTable, er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn=er1645v2PRoutQualMonDestinationsDelayAlarmDelayDownAvrgOn, fr1645v2PRoutAlarmE2QMonLoss=fr1645v2PRoutAlarmE2QMonLoss, sr1645v2PRoutPoolReservationsInterface=sr1645v2PRoutPoolReservationsInterface, pr1645v2PRoutTracertResultsHostName=pr1645v2PRoutTracertResultsHostName, pr1645v2PRoutQualMonJitter=pr1645v2PRoutQualMonJitter, pr1645v2PRoutQualMonSourceIp=pr1645v2PRoutQualMonSourceIp, er1645v2PRoutDhcpDynIpStartAddress=er1645v2PRoutDhcpDynIpStartAddress, er1645v2PRoutDhcpDynHoldTime=er1645v2PRoutDhcpDynHoldTime, er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn=er1645v2PRoutQualMonDestinationsDelayAlarmJitterAvrgOn, er1645v2PRoutDhcpDynDnsSetting=er1645v2PRoutDhcpDynDnsSetting, pr1645v2PRoutUdpServer=pr1645v2PRoutUdpServer, sr1645v2PRoutDhcpBindingMacAddress=sr1645v2PRoutDhcpBindingMacAddress, er1645v2PRoutDhcpStatInterface=er1645v2PRoutDhcpStatInterface, er1645v2PRoutQualMonDestinationsLogging=er1645v2PRoutQualMonDestinationsLogging, er1645v2PRoutDhcpDynTftpServerOption=er1645v2PRoutDhcpDynTftpServerOption, er1645v2PRoutTacacsAuthServersAddress=er1645v2PRoutTacacsAuthServersAddress, sr1645v2PRoutPoolReservationsEntry=sr1645v2PRoutPoolReservationsEntry, pr1645v2PRoutTacacsAuthEntry=pr1645v2PRoutTacacsAuthEntry, er1645v2PRoutRipNeighborsTableIx=er1645v2PRoutRipNeighborsTableIx, ar1645v2PRoutIgmpDataLeaveEntry=ar1645v2PRoutIgmpDataLeaveEntry, sr1645v2PRoutRoutingTableMask=sr1645v2PRoutRoutingTableMask, er1645v2PRoutPppSecretTableName=er1645v2PRoutPppSecretTableName, fr1645v2PRoutAlarmE2QMonJitterOn=fr1645v2PRoutAlarmE2QMonJitterOn, er1645v2PRoutQualMonDestinationsAlarmMask=er1645v2PRoutQualMonDestinationsAlarmMask, er1645v2PRoutTacacsAuthServersEncSecret=er1645v2PRoutTacacsAuthServersEncSecret, er1645v2PRoutAlarmLevQMonJitter=er1645v2PRoutAlarmLevQMonJitter, ar1645v2PRoutClearDnsCache=ar1645v2PRoutClearDnsCache, er1645v2PRoutAddrPoolsActions=er1645v2PRoutAddrPoolsActions, sr1645v2PRoutDnsUpdCliDnsProvDynDnsHostName=sr1645v2PRoutDnsUpdCliDnsProvDynDnsHostName, ar1645v2PRoutAddr=ar1645v2PRoutAddr, ar1645v2PRoutActionEntry=ar1645v2PRoutActionEntry, ar1645v2PRoutQmOnDemand=ar1645v2PRoutQmOnDemand, ar1645v2PRoutUnBlacklist=ar1645v2PRoutUnBlacklist, er1645v2PRoutQualMonType=er1645v2PRoutQualMonType, er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn=er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOn, er1645v2PRoutQualMonDestinationsTxGateway=er1645v2PRoutQualMonDestinationsTxGateway, ar1645v2PRoutForceDnsUpdate=ar1645v2PRoutForceDnsUpdate, er1645v2PRoutQualMonDestinationsTimeOut=er1645v2PRoutQualMonDestinationsTimeOut, pr1645v2PRoutRadiusAcctTimeOuts=pr1645v2PRoutRadiusAcctTimeOuts, fr1645v2PRoutAlarmE2QMonLossOn=fr1645v2PRoutAlarmE2QMonLossOn, sr1645v2PRoutIgmpTable=sr1645v2PRoutIgmpTable, pr1645v2PRoutQualMonDelay=pr1645v2PRoutQualMonDelay, er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn=er1645v2PRoutQualMonDestinationsDelayAlarmJitterMaxOn, er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff=er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownAvrgOff, pr1645v2PRoutQualMonLoggingUpDownJitterUpNegMax=pr1645v2PRoutQualMonLoggingUpDownJitterUpNegMax, er1645v2PRoutDnsUpdCliSSCTable=er1645v2PRoutDnsUpdCliSSCTable, ar1645v2PRoutPoolPoolName=ar1645v2PRoutPoolPoolName, sr1645v2PRoutDhcpBlacklistTableIx=sr1645v2PRoutDhcpBlacklistTableIx, pr1645v2PRoutQualMonLoggingUpDownLossDelayDown=pr1645v2PRoutQualMonLoggingUpDownLossDelayDown)
mibBuilder.exportSymbols("R1645v2-QUALMON", pr1645v2PRoutQualMon=pr1645v2PRoutQualMon, er1645v2PRoutDnsUpdCliDnsProvDynDnsInterface=er1645v2PRoutDnsUpdCliDnsProvDynDnsInterface, pr1645v2PRoutQualMonSourceId=pr1645v2PRoutQualMonSourceId, fr1645v2PRoutAlarmE2QMonJitterPfx=fr1645v2PRoutAlarmE2QMonJitterPfx, ar1645v2PRoutTracertData=ar1645v2PRoutTracertData, ar1645v2PRoutActionName=ar1645v2PRoutActionName, sr1645v2PRout=sr1645v2PRout, er1645v2PRoutDhcpStatNetbiosNT=er1645v2PRoutDhcpStatNetbiosNT, er1645v2PRoutQualMonDestinationsIpAddress=er1645v2PRoutQualMonDestinationsIpAddress, pr1645v2PRoutIpFragments=pr1645v2PRoutIpFragments, fr1645v2PRoutAlarmDiscriminator=fr1645v2PRoutAlarmDiscriminator, pr1645v2PRoutRoutingTableIf=pr1645v2PRoutRoutingTableIf, fr1645v2PRoutAlarmPrevious=fr1645v2PRoutAlarmPrevious, er1645v2PRoutTacacsSSC=er1645v2PRoutTacacsSSC, er1645v2PRoutDnsUpdCliEntry=er1645v2PRoutDnsUpdCliEntry, er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOff=er1645v2PRoutQualMonDestinationsLossAlarmAlarmDownOff, sr1645v2PRoutDnsServersRcvdInterface=sr1645v2PRoutDnsServersRcvdInterface, sr1645v2PRoutDhcpBlacklist=sr1645v2PRoutDhcpBlacklist, sr1645v2PRoutDhcpBindingState=sr1645v2PRoutDhcpBindingState, pr1645v2PRoutUdpServerSessionsTableIx=pr1645v2PRoutUdpServerSessionsTableIx, pr1645v2PRoutQualMonUpDownLossUp=pr1645v2PRoutQualMonUpDownLossUp, er1645v2PRoutDhcpStatNetbiosNS=er1645v2PRoutDhcpStatNetbiosNS, er1645v2PRoutDnsPreference=er1645v2PRoutDnsPreference, sr1645v2PRoutDnsServersEntry=sr1645v2PRoutDnsServersEntry, er1645v2PRoutRipNeighbors=er1645v2PRoutRipNeighbors, pr1645v2PRoutRadiusAuthRequests=pr1645v2PRoutRadiusAuthRequests, pr1645v2PRoutRoutingTableOctets=pr1645v2PRoutRoutingTableOctets, er1645v2PRoutDhcpCheckAddress=er1645v2PRoutDhcpCheckAddress, ar1645v2PRoutTracertDataIcmpTimeOut=ar1645v2PRoutTracertDataIcmpTimeOut, er1645v2PRoutRadius=er1645v2PRoutRadius, fr1645v2PRoutAlarmE2PingActive=fr1645v2PRoutAlarmE2PingActive, ar1645v2PRoutPingDataSourceIp=ar1645v2PRoutPingDataSourceIp, pr1645v2PRoutTracertResultsSSCTable=pr1645v2PRoutTracertResultsSSCTable, sr1645v2PRoutRoutingTableIf=sr1645v2PRoutRoutingTableIf, fr1645v2PRoutAlarmCurrent=fr1645v2PRoutAlarmCurrent, pr1645v2PRoutQualMonStatus=pr1645v2PRoutQualMonStatus, er1645v2PRoutTacacsAuthServers=er1645v2PRoutTacacsAuthServers, pr1645v2PRoutRoutingTableUses=pr1645v2PRoutRoutingTableUses, er1645v2PRoutRipNeighborsActions=er1645v2PRoutRipNeighborsActions, er1645v2PRoutAddrPoolsPoolIntervalFrom=er1645v2PRoutAddrPoolsPoolIntervalFrom, sr1645v2PRoutDhcpRelayDhcpStatus=sr1645v2PRoutDhcpRelayDhcpStatus, er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn=er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpAvrgOn, pr1645v2PRoutQualMonJitterNegMax=pr1645v2PRoutQualMonJitterNegMax, sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer=sr1645v2PRoutDnsUpdCliDnsProvDynDnsUpdateServer, er1645v2PRoutQualMonDestinationsLossAlarmSamples=er1645v2PRoutQualMonDestinationsLossAlarmSamples, pr1645v2PRoutTacacsAuthErrors=pr1645v2PRoutTacacsAuthErrors, sr1645v2PRoutAddrPoolsEntry=sr1645v2PRoutAddrPoolsEntry, er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff=er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOff, er1645v2PRoutTacacsAuthServersTimeOut=er1645v2PRoutTacacsAuthServersTimeOut, er1645v2PRoutQualMonDestinationsLength=er1645v2PRoutQualMonDestinationsLength, sr1645v2PRoutPoolReservationsType=sr1645v2PRoutPoolReservationsType, er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff=er1645v2PRoutQualMonDestinationsDelayAlarmDelayMaxOff, pr1645v2PRoutQualMonLoggingUpDownJitterDownPosMax=pr1645v2PRoutQualMonLoggingUpDownJitterDownPosMax, er1645v2PRoutQualMonUdpServerPortEntry=er1645v2PRoutQualMonUdpServerPortEntry, er1645v2PRoutRadiusAuthServersActions=er1645v2PRoutRadiusAuthServersActions, er1645v2PRoutRipNeighborsEntry=er1645v2PRoutRipNeighborsEntry, pr1645v2PRoutTacacsAuthTimeOuts=pr1645v2PRoutTacacsAuthTimeOuts, er1645v2PRoutDhcpDynNameServer2=er1645v2PRoutDhcpDynNameServer2, er1645v2PRoutSendPortUnreachable=er1645v2PRoutSendPortUnreachable, er1645v2PRoutTacacsLogin=er1645v2PRoutTacacsLogin, er1645v2PRoutDnsUpdCliDnsProvDynDnsUserName=er1645v2PRoutDnsUpdCliDnsProvDynDnsUserName, pr1645v2PRoutIpFragmentsEntry=pr1645v2PRoutIpFragmentsEntry, ar1645v2PRoutRequestArgumentsSSC=ar1645v2PRoutRequestArgumentsSSC, er1645v2PRoutHelperProtocolsActions=er1645v2PRoutHelperProtocolsActions, er1645v2PRoutDhcpStatMask=er1645v2PRoutDhcpStatMask, pr1645v2PRoutTacacsAuthRequests=pr1645v2PRoutTacacsAuthRequests, sr1645v2PRoutIgmpTableIf=sr1645v2PRoutIgmpTableIf, er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn=er1645v2PRoutQualMonDestinationsDelayAlarmDelayUpMaxOn, pr1645v2PRoutTacacsAuthTableIx=pr1645v2PRoutTacacsAuthTableIx, fr1645v2PRoutAlarmLevQMonLoss=fr1645v2PRoutAlarmLevQMonLoss, ar1645v2PRoutPingDataTimeOut=ar1645v2PRoutPingDataTimeOut, ar1645v2PRoutPingDataInterval=ar1645v2PRoutPingDataInterval, er1645v2PRoutAddrPoolsPoolListNetMask=er1645v2PRoutAddrPoolsPoolListNetMask, er1645v2PRoutDhcpDynLeaseTime=er1645v2PRoutDhcpDynLeaseTime, fr1645v2PRoutAlarmE2PingActiveOn=fr1645v2PRoutAlarmE2PingActiveOn, er1645v2PRoutQualMonDestinationsProtocolUdpEcho=er1645v2PRoutQualMonDestinationsProtocolUdpEcho, pr1645v2PRoutRadiusAcct=pr1645v2PRoutRadiusAcct, pr1645v2PRoutPingResultsLastError=pr1645v2PRoutPingResultsLastError, ar1645v2PRoutSendIgmpRep=ar1645v2PRoutSendIgmpRep, sr1645v2PRoutRoutingTableTimeOut=sr1645v2PRoutRoutingTableTimeOut, er1645v2PRoutDhcpDynGateway=er1645v2PRoutDhcpDynGateway, pr1645v2PRoutUdpServerSessionsSourcePort=pr1645v2PRoutUdpServerSessionsSourcePort, pr1645v2PRoutUdpServerSessionsFirstActivityTime=pr1645v2PRoutUdpServerSessionsFirstActivityTime, pr1645v2PRoutQualMonLoggingDelayMax=pr1645v2PRoutQualMonLoggingDelayMax, pr1645v2PRoutRadiusAuthBadAuth=pr1645v2PRoutRadiusAuthBadAuth, sr1645v2PRoutRoutingTableType=sr1645v2PRoutRoutingTableType, er1645v2PRoutQualMonUdpServerPortActions=er1645v2PRoutQualMonUdpServerPortActions, ar1645v2PRoutTracertDataDataLength=ar1645v2PRoutTracertDataDataLength, pr1645v2PRoutQualMonLoggingUpDownLossDown=pr1645v2PRoutQualMonLoggingUpDownLossDown, er1645v2PRoutDnsUpdCliDnsProvDynDnsMode=er1645v2PRoutDnsUpdCliDnsProvDynDnsMode, pr1645v2PRoutQualMonUpDownJitterDownNegMax=pr1645v2PRoutQualMonUpDownJitterDownNegMax, er1645v2PRoutAlarmLevEntry=er1645v2PRoutAlarmLevEntry, ar1645v2PRoutIgmpDataRepSSC=ar1645v2PRoutIgmpDataRepSSC, sr1645v2PRoutIgmpTableEntry=sr1645v2PRoutIgmpTableEntry, pr1645v2PRoutTacacsAuth=pr1645v2PRoutTacacsAuth, er1645v2PRoutRoutingTableTimeWindow=er1645v2PRoutRoutingTableTimeWindow, fr1645v2PRout=fr1645v2PRout, sr1645v2PRoutAddrPoolsAvailAddresses=sr1645v2PRoutAddrPoolsAvailAddresses, er1645v2PRoutRadiusAuthServersEntry=er1645v2PRoutRadiusAuthServersEntry, pr1645v2PRoutPingResultsRepTimMax=pr1645v2PRoutPingResultsRepTimMax, ar1645v2PRoutAction=ar1645v2PRoutAction, pr1645v2PRoutQualMonHostName=pr1645v2PRoutQualMonHostName, fr1645v2PRoutAlarmE2QMonDelayOff=fr1645v2PRoutAlarmE2QMonDelayOff, ar1645v2PRoutIgmpDataLeaveSSC=ar1645v2PRoutIgmpDataLeaveSSC, er1645v2PRoutQualMonDestinationsLossAlarmAlarmOff=er1645v2PRoutQualMonDestinationsLossAlarmAlarmOff, pr1645v2PRoutRoutingTableSSCTable=pr1645v2PRoutRoutingTableSSCTable, er1645v2PRoutDhcpDynOptionsEntry=er1645v2PRoutDhcpDynOptionsEntry, pr1645v2PRoutRadiusAuthServer=pr1645v2PRoutRadiusAuthServer, ar1645v2PRoutPingDataIpAddress=ar1645v2PRoutPingDataIpAddress, sr1645v2PRoutDhcpRelayAssignedIp=sr1645v2PRoutDhcpRelayAssignedIp, ar1645v2PRoutTracertDataDnsTimeOut=ar1645v2PRoutTracertDataDnsTimeOut, er1645v2PRoutDhcpDynOptionsValueIpAddress=er1645v2PRoutDhcpDynOptionsValueIpAddress, pr1645v2PRoutUdpServerTableIx=pr1645v2PRoutUdpServerTableIx, er1645v2PRoutDhcpDynOptions=er1645v2PRoutDhcpDynOptions, er1645v2PRoutQualMonUdpServerPortDestinationPort=er1645v2PRoutQualMonUdpServerPortDestinationPort, er1645v2PRoutRadiusAcctServerSecret=er1645v2PRoutRadiusAcctServerSecret, er1645v2PRoutAddrPoolsPoolListRemote=er1645v2PRoutAddrPoolsPoolListRemote, sr1645v2PRoutDnsCacheSSCTable=sr1645v2PRoutDnsCacheSSCTable, pr1645v2PRoutRoutingTableEntry=pr1645v2PRoutRoutingTableEntry, pr1645v2PRoutPingResultsNbrTxPckt=pr1645v2PRoutPingResultsNbrTxPckt, er1645v2PRoutAddrPools=er1645v2PRoutAddrPools, sr1645v2PRoutInterfacesIfOperStatus=sr1645v2PRoutInterfacesIfOperStatus, pr1645v2PRoutQualMonLoggingUpDownDelayUpMax=pr1645v2PRoutQualMonLoggingUpDownDelayUpMax, sr1645v2PRoutDhcpBlacklistEntry=sr1645v2PRoutDhcpBlacklistEntry, er1645v2PRoutDhcpDynOptionsValueHexData=er1645v2PRoutDhcpDynOptionsValueHexData, ar1645v2PRoutIgmpDataRepEntry=ar1645v2PRoutIgmpDataRepEntry, sr1645v2PRoutInterfacesAddress=sr1645v2PRoutInterfacesAddress, pr1645v2PRoutQualMonLogging=pr1645v2PRoutQualMonLogging, ar1645v2PRoutTracertDataSourceIp=ar1645v2PRoutTracertDataSourceIp, er1645v2PRoutRadiusRetries=er1645v2PRoutRadiusRetries, er1645v2PRoutRoutingTableTableIx=er1645v2PRoutRoutingTableTableIx, pr1645v2PRoutQualMonJitterPosMax=pr1645v2PRoutQualMonJitterPosMax, ar1645v2PRoutStopPing=ar1645v2PRoutStopPing, pr1645v2PRoutTracertResultsSr=pr1645v2PRoutTracertResultsSr, er1645v2PRoutQualMonMonitor=er1645v2PRoutQualMonMonitor, pr1645v2PRoutUdpServerSessionsNbrPckt=pr1645v2PRoutUdpServerSessionsNbrPckt, er1645v2PRoutRadiusLogin=er1645v2PRoutRadiusLogin, er1645v2PRoutRadiusAcctServerEncModeSecret=er1645v2PRoutRadiusAcctServerEncModeSecret, pr1645v2PRoutIpFragmentsReassembledFrames=pr1645v2PRoutIpFragmentsReassembledFrames, sr1645v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket=sr1645v2PRoutDnsUpdCliDnsProvDynDnsTcpSocket, ar1645v2PRoutFreeIpAddress=ar1645v2PRoutFreeIpAddress, sr1645v2PRoutDhcpRelaySourceIntf=sr1645v2PRoutDhcpRelaySourceIntf, sr1645v2PRoutDhcpBlacklistMacAddress=sr1645v2PRoutDhcpBlacklistMacAddress, pr1645v2PRoutTracertResultsNrRx=pr1645v2PRoutTracertResultsNrRx, er1645v2PRoutDhcpDynOptionsCode=er1645v2PRoutDhcpDynOptionsCode, sr1645v2PRoutDnsServers=sr1645v2PRoutDnsServers, pr1645v2PRoutQualMonLoggingUpDownJitterDownAvrg=pr1645v2PRoutQualMonLoggingUpDownJitterDownAvrg, sr1645v2PRoutDnsCacheIpAddress=sr1645v2PRoutDnsCacheIpAddress, pr1645v2PRoutQualMonLoggingDate=pr1645v2PRoutQualMonLoggingDate, pr1645v2PRoutQualMonIpAddress=pr1645v2PRoutQualMonIpAddress, pr1645v2PRoutPingResultsIpAddr=pr1645v2PRoutPingResultsIpAddr, pr1645v2PRoutQualMonSSCTable=pr1645v2PRoutQualMonSSCTable, ar1645v2PRoutRequestArguments=ar1645v2PRoutRequestArguments, er1645v2PRoutDnsIpV6Router=er1645v2PRoutDnsIpV6Router, sr1645v2PRoutDnsDomainsType=sr1645v2PRoutDnsDomainsType, er1645v2PRoutHosts=er1645v2PRoutHosts, er1645v2PRoutAddrPoolsTableIx=er1645v2PRoutAddrPoolsTableIx, pr1645v2PRoutPingResultsSSC=pr1645v2PRoutPingResultsSSC, er1645v2PRoutDnsUpdCliDnsProvDynDnsTcpPort=er1645v2PRoutDnsUpdCliDnsProvDynDnsTcpPort, sr1645v2PRoutDhcpRelayTableIx=sr1645v2PRoutDhcpRelayTableIx, pr1645v2PRoutQualMonLoggingUpDownLossUp=pr1645v2PRoutQualMonLoggingUpDownLossUp, pr1645v2PRoutTacacsAuthFails=pr1645v2PRoutTacacsAuthFails, sr1645v2PRoutRoutingTableSSCTable=sr1645v2PRoutRoutingTableSSCTable, pr1645v2PRoutIpFragmentsSSC=pr1645v2PRoutIpFragmentsSSC, pr1645v2PRoutQualMonDelayAvrg=pr1645v2PRoutQualMonDelayAvrg, pr1645v2PRoutTracertResultsRepTimMin=pr1645v2PRoutTracertResultsRepTimMin, er1645v2PRoutRoutingTable=er1645v2PRoutRoutingTable, pr1645v2PRoutQualMonLoggingJitterAvrg=pr1645v2PRoutQualMonLoggingJitterAvrg, pr1645v2PRoutRadiusAuthAccepts=pr1645v2PRoutRadiusAuthAccepts, er1645v2PRoutRoutingTableNetwork=er1645v2PRoutRoutingTableNetwork, er1645v2PRoutAddrPoolsPoolListTableIx=er1645v2PRoutAddrPoolsPoolListTableIx, er1645v2PRoutDhcpStat=er1645v2PRoutDhcpStat, ar1645v2PRoutIgmpDataLeaveInterfaces=ar1645v2PRoutIgmpDataLeaveInterfaces, pr1645v2PRoutQualMonUpDownJitterDown=pr1645v2PRoutQualMonUpDownJitterDown, pr1645v2PRoutQualMonUpDownLossDown=pr1645v2PRoutQualMonUpDownLossDown, er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn=er1645v2PRoutQualMonDestinationsDelayAlarmJitterDownMaxOn, pr1645v2PRoutIpFragmentsReceivedFrames=pr1645v2PRoutIpFragmentsReceivedFrames, sr1645v2PRoutRoutingTable=sr1645v2PRoutRoutingTable, ar1645v2PRoutPoolSSC=ar1645v2PRoutPoolSSC, ar1645v2PRoutPingDataHostName=ar1645v2PRoutPingDataHostName, pr1645v2PRoutRoutingTable=pr1645v2PRoutRoutingTable, er1645v2PRoutTacacsAuthServersEntry=er1645v2PRoutTacacsAuthServersEntry, er1645v2PRoutDhcpStatOptionsActions=er1645v2PRoutDhcpStatOptionsActions, pr1645v2PRoutQualMonUpDownStatus=pr1645v2PRoutQualMonUpDownStatus, er1645v2PRoutDnsSecondaryDns=er1645v2PRoutDnsSecondaryDns, er1645v2PRoutQualMonDestinationsTos=er1645v2PRoutQualMonDestinationsTos, fr1645v2PRoutAlarmE2QMonJitterOff=fr1645v2PRoutAlarmE2QMonJitterOff, pr1645v2PRoutQualMonUpDownJitterDownAvrg=pr1645v2PRoutQualMonUpDownJitterDownAvrg, sr1645v2PRoutPoolReservationsRemote=sr1645v2PRoutPoolReservationsRemote, er1645v2PRoutQualMonDestinationsInterval=er1645v2PRoutQualMonDestinationsInterval, er1645v2PRoutQualMon=er1645v2PRoutQualMon, pr1645v2PRoutUdpServerSessionsSourceIpAddress=pr1645v2PRoutUdpServerSessionsSourceIpAddress, er1645v2PRoutDnsUpdCliActions=er1645v2PRoutDnsUpdCliActions, ar1645v2PRoutUnBlacklistData=ar1645v2PRoutUnBlacklistData, er1645v2PRoutQualMonDestinationsTxInterface=er1645v2PRoutQualMonDestinationsTxInterface, ar1645v2PRoutStopTracert=ar1645v2PRoutStopTracert, pr1645v2PRoutQualMonLoggingUpDownStatus=pr1645v2PRoutQualMonLoggingUpDownStatus, er1645v2PRout=er1645v2PRout, pr1645v2PRoutQualMonLossDelay=pr1645v2PRoutQualMonLossDelay, er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn=er1645v2PRoutQualMonDestinationsDelayAlarmJitterUpMaxOn, er1645v2PRoutDefaultRouteGateway=er1645v2PRoutDefaultRouteGateway, pr1645v2PRoutQualMonDelayMax=pr1645v2PRoutQualMonDelayMax, er1645v2PRoutSendHostUnreachable=er1645v2PRoutSendHostUnreachable, pr1645v2PRoutRoutingTableNetwork=pr1645v2PRoutRoutingTableNetwork, er1645v2PRoutAlarmMask=er1645v2PRoutAlarmMask, er1645v2PRoutDhcpStatMacAddress=er1645v2PRoutDhcpStatMacAddress, pr1645v2PRoutIgmpProxy=pr1645v2PRoutIgmpProxy, er1645v2PRoutDnsUpdCliTableIx=er1645v2PRoutDnsUpdCliTableIx, er1645v2PRoutDhcpDynBootFile=er1645v2PRoutDhcpDynBootFile, er1645v2PRoutAlarmLevQMonDelay=er1645v2PRoutAlarmLevQMonDelay, er1645v2PRoutDhcpDynOptionsValueAscii=er1645v2PRoutDhcpDynOptionsValueAscii, pr1645v2PRoutQualMonLoggingNbrRxPckt=pr1645v2PRoutQualMonLoggingNbrRxPckt, sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed=sr1645v2PRoutDnsUpdCliDnsProvDynDnsLastUpdateTimePassed, ar1645v2PRoutUnBlacklistDataStartIp=ar1645v2PRoutUnBlacklistDataStartIp, sr1645v2PRoutDnsCacheHostname=sr1645v2PRoutDnsCacheHostname, er1645v2PRoutR2ScrtTblActions=er1645v2PRoutR2ScrtTblActions, sr1645v2PRoutRadiusEntry=sr1645v2PRoutRadiusEntry, fr1645v2PRoutAlarmE2QMonLossPfx=fr1645v2PRoutAlarmE2QMonLossPfx, pr1645v2PRoutUdpServerSSCTable=pr1645v2PRoutUdpServerSSCTable, er1645v2PRoutRadiusAuthServersTableIx=er1645v2PRoutRadiusAuthServersTableIx, ar1645v2PRoutTracertDataHostName=ar1645v2PRoutTracertDataHostName)
