# PySNMP SMI module. Autogenerated from smidump -f python RFC1315-MIB
# by libsmi2pysnmp-0.1.3 at Fri Aug 16 02:56:59 2013,
# Python version (2, 6, 6, 'final', 0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Bits, Counter32, Integer32, Integer32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, transmission, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "transmission")

# Types

class DLCI(Integer32):
    pass

class Index(Integer32):
    pass


# Objects

frame_relay = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32)).setLabel("frame-relay")
frDlcmiTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 1))
if mibBuilder.loadTexts: frDlcmiTable.setDescription("The Parameters for the Data Link Connection Management\nInterface for the frame relay service on this\ninterface.")
frDlcmiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 1, 1)).setIndexNames((0, "RFC1315-MIB", "frDlcmiIfIndex"))
if mibBuilder.loadTexts: frDlcmiEntry.setDescription("The Parameters for a particular Data Link Con-\nnection Management Interface.")
frDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDlcmiIfIndex.setDescription("The ifIndex value of the  corresponding  ifEn-\ntry.")
frDlcmiState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,3,)).subtype(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ansiT1-617-B", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiState.setDescription("This variable states which Data  Link  Connec-\ntion Management scheme is active (and by impli-\ncation, what DLCI it uses) on the  Frame  Relay\ninterface.")
frDlcmiAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,2,3,)).subtype(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddress.setDescription("This variable states which address  format  is\nin use on the Frame Relay interface.")
frDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,)).subtype(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddressLen.setDescription("This variable states which address  length  in\noctets.  In the case of Q922 format, the length\nindicates the entire length of the address  in-\ncluding the control portion.")
frDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiPollingInterval.setDescription("This is the number of seconds between  succes-\nsive status enquiry messages.")
frDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setDescription("Number of status enquiry intervals  that  pass\nbefore  issuance  of a full status enquiry mes-\nsage.")
frDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setDescription("This  is  the  maximum  number  of  unanswered\nStatus Enquiries the equipment shall accept be-\nfore declaring the interface down.")
frDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setDescription("This is the number of status polling intervals\nover which the error threshold is counted.  For\nexample, if within 'MonitoredEvents' number  of\nevents  the  station  receives 'ErrorThreshold'\nnumber of errors, the interface  is  marked  as\ndown.")
frDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setDescription("The maximum number of Virtual Circuits allowed\nfor  this  interface.   Usually dictated by the\nFrame Relay network.\n\nIn response to a SET, if a value less than zero\nor  higher  than the agent's maximal capability\nis configured, the agent  should  respond  bad-\nValue")
frDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMulticast.setDescription("This indicates whether the Frame Relay  inter-\nface is using a multicast service.")
frCircuitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 2))
if mibBuilder.loadTexts: frCircuitTable.setDescription("A table containing information about specific Data\nLink Connection Identifiers and corresponding virtual\ncircuits.")
frCircuitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 2, 1)).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frCircuitEntry.setDescription("The information regarding a single  Data  Link\nConnection Identifier.")
frCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitIfIndex.setDescription("The ifIndex Value of the ifEntry this  virtual\ncircuit is layered onto.")
frCircuitDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitDlci.setDescription("The Data Link Connection Identifier  for  this\nvirtual circuit.")
frCircuitState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitState.setDescription("Indicates whether the particular virtual  cir-\ncuit  is operational.  In the absence of a Data\nLink Connection Management  Interface,  virtual\ncircuit  entries  (rows) may be created by set-\nting virtual  circuit  state  to  'active',  or\ndeleted by changing Circuit state to 'invalid'.\nWhether or not the row actually  disappears  is\nleft  to the implementation, so this object may\nactually read as 'invalid' for  some  arbitrary\nlength  of  time.   It is also legal to set the\nstate of a virtual  circuit  to  'inactive'  to\ntemporarily disable a given circuit.")
frCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setDescription("Number of frames received from the network in-\ndicating  forward  congestion since the virtual\ncircuit was created.")
frCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setDescription("Number of frames received from the network in-\ndicating  backward congestion since the virtual\ncircuit was created.")
frCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentFrames.setDescription("The number of frames sent  from  this  virtual\ncircuit since it was created.")
frCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentOctets.setDescription("The number of octets sent  from  this  virtual\ncircuit since it was created.")
frCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFrames.setDescription("Number of frames received  over  this  virtual\ncircuit since it was created.")
frCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedOctets.setDescription("Number of octets received  over  this  virtual\ncircuit since it was created.")
frCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitCreationTime.setDescription("The value of sysUpTime when the  virtual  cir-\ncuit was created, whether by the Data Link Con-\nnection Management Interface  or  by  a  SetRe-\nquest.")
frCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitLastTimeChange.setDescription("The value of sysUpTime when last there  was  a\nchange in the virtual circuit state")
frCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 12), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitCommittedBurst.setDescription("This variable indicates the maximum amount  of\ndata,  in  bits,  that  the  network  agrees to\ntransfer under normal  conditions,  during  the\nmeasurement interval.")
frCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitExcessBurst.setDescription("This variable indicates the maximum amount  of\nuncommitted data bits that the network will at-\ntempt to deliver over the measurement interval.\n\nBy default, if not configured when creating the\nentry, the Excess Information Burst Size is set\nto the value of ifSpeed.")
frCircuitThroughput = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 14), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitThroughput.setDescription("Throughput is the average number of 'Frame Re-\nlay  Information  Field'  bits  transferred per\nsecond across a user network interface  in  one\ndirection, measured over the measurement inter-\nval.\n\nIf the  configured  committed  burst  rate  and\nthroughput  are  both non-zero, the measurement\ninterval\nT=frCircuitCommittedBurst/frCircuitThroughput.\n\nIf the  configured  committed  burst  rate  and\nthroughput  are  both zero, the measurement in-\nterval\n       T=frCircuitExcessBurst/ifSpeed.")
frErrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 3))
if mibBuilder.loadTexts: frErrTable.setDescription("A table containing information about Errors on the\nFrame Relay interface.")
frErrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 3, 1)).setIndexNames((0, "RFC1315-MIB", "frErrIfIndex"))
if mibBuilder.loadTexts: frErrEntry.setDescription("The error information for a single frame relay\ninterface.")
frErrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrIfIndex.setDescription("The ifIndex Value of the  corresponding  ifEn-\ntry.")
frErrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(9,4,3,6,1,5,8,10,7,2,)).subtype(namedValues=NamedValues(("unknownError", 1), ("noErrorSinceReset", 10), ("receiveShort", 2), ("receiveLong", 3), ("illegalDLCI", 4), ("unknownDLCI", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrType.setDescription("The type of error that was last seen  on  this\ninterface.")
frErrData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrData.setDescription("An octet string containing as much of the  er-\nror  packet as possible.  As a minimum, it must\ncontain the Q.922 Address or  as  much  as  was\ndelivered.   It is desirable to include all in-\nformation up to the PDU.")
frErrTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrTime.setDescription("The value of sysUpTime at which the error  was\ndetected.")
frame_relay_globals = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 4)).setLabel("frame-relay-globals")
frTrapState = MibScalar((1, 3, 6, 1, 2, 1, 10, 32, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapState.setDescription("This variable  indicates  whether  the  system\nproduces the frDLCIStatusChange trap.")

# Augmentions

# Notifications

frDLCIStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 32, 0, 1)).setObjects(*(("RFC1315-MIB", "frCircuitDlci"), ("RFC1315-MIB", "frCircuitState"), ("RFC1315-MIB", "frCircuitIfIndex"), ) )
if mibBuilder.loadTexts: frDLCIStatusChange.setDescription("This trap indicates that the indicated Virtual\nCircuit  has changed state.  It has either been\ncreated or invalidated, or has toggled  between\nthe active and inactive states.")

# Exports

# Types
mibBuilder.exportSymbols("RFC1315-MIB", DLCI=DLCI, Index=Index)

# Objects
mibBuilder.exportSymbols("RFC1315-MIB", frame_relay=frame_relay, frDlcmiTable=frDlcmiTable, frDlcmiEntry=frDlcmiEntry, frDlcmiIfIndex=frDlcmiIfIndex, frDlcmiState=frDlcmiState, frDlcmiAddress=frDlcmiAddress, frDlcmiAddressLen=frDlcmiAddressLen, frDlcmiPollingInterval=frDlcmiPollingInterval, frDlcmiFullEnquiryInterval=frDlcmiFullEnquiryInterval, frDlcmiErrorThreshold=frDlcmiErrorThreshold, frDlcmiMonitoredEvents=frDlcmiMonitoredEvents, frDlcmiMaxSupportedVCs=frDlcmiMaxSupportedVCs, frDlcmiMulticast=frDlcmiMulticast, frCircuitTable=frCircuitTable, frCircuitEntry=frCircuitEntry, frCircuitIfIndex=frCircuitIfIndex, frCircuitDlci=frCircuitDlci, frCircuitState=frCircuitState, frCircuitReceivedFECNs=frCircuitReceivedFECNs, frCircuitReceivedBECNs=frCircuitReceivedBECNs, frCircuitSentFrames=frCircuitSentFrames, frCircuitSentOctets=frCircuitSentOctets, frCircuitReceivedFrames=frCircuitReceivedFrames, frCircuitReceivedOctets=frCircuitReceivedOctets, frCircuitCreationTime=frCircuitCreationTime, frCircuitLastTimeChange=frCircuitLastTimeChange, frCircuitCommittedBurst=frCircuitCommittedBurst, frCircuitExcessBurst=frCircuitExcessBurst, frCircuitThroughput=frCircuitThroughput, frErrTable=frErrTable, frErrEntry=frErrEntry, frErrIfIndex=frErrIfIndex, frErrType=frErrType, frErrData=frErrData, frErrTime=frErrTime, frame_relay_globals=frame_relay_globals, frTrapState=frTrapState)

# Notifications
mibBuilder.exportSymbols("RFC1315-MIB", frDLCIStatusChange=frDLCIStatusChange)

