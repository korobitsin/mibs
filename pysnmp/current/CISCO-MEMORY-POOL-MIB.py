# PySNMP SMI module. Autogenerated from smidump -f python CISCO-MEMORY-POOL-MIB
# by libsmi2pysnmp-0.1.3 at Mon Dec  7 10:49:34 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Percent, ) = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Percent")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")

# Types

class CiscoMemoryPoolTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,65535)
    

# Objects

ciscoMemoryPoolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 48)).setRevisions(("2001-07-31 00:00","1996-02-01 00:00",))
if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setContactInfo("Postal: Cisco Systems, Inc.\n170 West Tasman Drive\nSan Jose, CA 95134-1706\nUSA\n\nTel: +1 408 526 4000\n\nE-mail: cs-snmp@cisco.com")
if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setDescription("MIB module for monitoring memory pools")
ciscoMemoryPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 1))
ciscoMemoryPoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1))
if mibBuilder.loadTexts: ciscoMemoryPoolTable.setDescription("A table of memory pool monitoring entries.")
ciscoMemoryPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1)).setIndexNames((0, "CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolType"))
if mibBuilder.loadTexts: ciscoMemoryPoolEntry.setDescription("An entry in the memory pool monitoring table.")
ciscoMemoryPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 1), CiscoMemoryPoolTypes()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ciscoMemoryPoolType.setDescription("The type of memory pool for which this entry\ncontains information.")
ciscoMemoryPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolName.setDescription("A textual name assigned to the memory pool.  This\nobject is suitable for output to a human operator,\nand may also be used to distinguish among the various\npool types, especially among dynamic pools.")
ciscoMemoryPoolAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolAlternate.setDescription("Indicates whether or not this memory pool has an\nalternate pool configured.  Alternate pools are\nused for fallback when the current pool runs out\nof memory.\n\nIf an instance of this object has a value of zero,\nthen this pool does not have an alternate.  Otherwise\nthe value of this object is the same as the value of\nciscoMemoryPoolType of the alternate pool.")
ciscoMemoryPoolValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolValid.setDescription("Indicates whether or not the remaining objects in\nthis entry contain accurate data.  If an instance\nof this object has the value false (which in and of\nitself indicates an internal error condition), the\nvalues of the remaining objects in the conceptual row\nmay contain inaccurate information (specifically, the\nreported values may be less than the actual values).")
ciscoMemoryPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUsed.setDescription("Indicates the number of bytes from the memory pool\nthat are currently in use by applications on the\nmanaged device.")
ciscoMemoryPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolFree.setDescription("Indicates the number of bytes from the memory pool\nthat are currently unused on the managed device.\n\nNote that the sum of ciscoMemoryPoolUsed and\nciscoMemoryPoolFree is the total amount of memory\nin the pool")
ciscoMemoryPoolLargestFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolLargestFree.setDescription("Indicates the largest number of contiguous bytes\nfrom the memory pool that are currently unused on\nthe managed device.")
ciscoMemoryPoolUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2))
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationTable.setDescription("A table of memory pool utilization entries. Each of the\nobjects provides a general idea of how much of the memory\npool has been used over a given period of time. It is\ndetermined as a weighted decaying average.")
ciscoMemoryPoolUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1))
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationEntry.setDescription("An entry in the memory pool utilization table.")
ciscoMemoryPoolUtilization1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1, 1), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization1Min.setDescription("This is the memory pool utilization for 1 minute.")
ciscoMemoryPoolUtilization5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1, 2), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization5Min.setDescription("This is the memory pool utilization for 5 minutes.")
ciscoMemoryPoolUtilization10Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization10Min.setDescription("This is the memory pool utilization for 10 minutes.")
ciscoMemoryPoolNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 2))
ciscoMemoryPoolConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 3))
ciscoMemoryPoolCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 1))
ciscoMemoryPoolGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2))

# Augmentions
ciscoMemoryPoolEntry.registerAugmentions(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilizationEntry"))
ciscoMemoryPoolUtilizationEntry.setIndexNames(*ciscoMemoryPoolEntry.getIndexNames())

# Groups

ciscoMemoryPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2, 1)).setObjects(*(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUsed"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolAlternate"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolFree"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolName"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolValid"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolLargestFree"), ) )
if mibBuilder.loadTexts: ciscoMemoryPoolGroup.setDescription("A collection of objects providing memory pool monitoring.")
ciscoMemoryPoolUtilizationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2, 2)).setObjects(*(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilization1Min"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilization10Min"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilization5Min"), ) )
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationGroup.setDescription("An optional group providing a collection of memory pool\nutilization objects.")

# Compliances

ciscoMemoryPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 1, 1)).setObjects(*(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolGroup"), ) )
if mibBuilder.loadTexts: ciscoMemoryPoolCompliance.setDescription("The compliance statement for entities which implement\nthe Cisco Memory Pool MIB")
ciscoMemoryPoolComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 1, 2)).setObjects(*(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolGroup"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilizationGroup"), ) )
if mibBuilder.loadTexts: ciscoMemoryPoolComplianceRev1.setDescription("The compliance statement for entities which implement\nthe Cisco Memory Pool MIB")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-MEMORY-POOL-MIB", PYSNMP_MODULE_ID=ciscoMemoryPoolMIB)

# Types
mibBuilder.exportSymbols("CISCO-MEMORY-POOL-MIB", CiscoMemoryPoolTypes=CiscoMemoryPoolTypes)

# Objects
mibBuilder.exportSymbols("CISCO-MEMORY-POOL-MIB", ciscoMemoryPoolMIB=ciscoMemoryPoolMIB, ciscoMemoryPoolObjects=ciscoMemoryPoolObjects, ciscoMemoryPoolTable=ciscoMemoryPoolTable, ciscoMemoryPoolEntry=ciscoMemoryPoolEntry, ciscoMemoryPoolType=ciscoMemoryPoolType, ciscoMemoryPoolName=ciscoMemoryPoolName, ciscoMemoryPoolAlternate=ciscoMemoryPoolAlternate, ciscoMemoryPoolValid=ciscoMemoryPoolValid, ciscoMemoryPoolUsed=ciscoMemoryPoolUsed, ciscoMemoryPoolFree=ciscoMemoryPoolFree, ciscoMemoryPoolLargestFree=ciscoMemoryPoolLargestFree, ciscoMemoryPoolUtilizationTable=ciscoMemoryPoolUtilizationTable, ciscoMemoryPoolUtilizationEntry=ciscoMemoryPoolUtilizationEntry, ciscoMemoryPoolUtilization1Min=ciscoMemoryPoolUtilization1Min, ciscoMemoryPoolUtilization5Min=ciscoMemoryPoolUtilization5Min, ciscoMemoryPoolUtilization10Min=ciscoMemoryPoolUtilization10Min, ciscoMemoryPoolNotifications=ciscoMemoryPoolNotifications, ciscoMemoryPoolConformance=ciscoMemoryPoolConformance, ciscoMemoryPoolCompliances=ciscoMemoryPoolCompliances, ciscoMemoryPoolGroups=ciscoMemoryPoolGroups)

# Groups
mibBuilder.exportSymbols("CISCO-MEMORY-POOL-MIB", ciscoMemoryPoolGroup=ciscoMemoryPoolGroup, ciscoMemoryPoolUtilizationGroup=ciscoMemoryPoolUtilizationGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-MEMORY-POOL-MIB", ciscoMemoryPoolCompliance=ciscoMemoryPoolCompliance, ciscoMemoryPoolComplianceRev1=ciscoMemoryPoolComplianceRev1)
