# PySNMP SMI module. Autogenerated from smidump -f python CISCO-FRAME-RELAY-MIB
# by libsmi2pysnmp-0.1.3 at Mon Dec  7 10:44:40 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( InterfaceIndex, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
( frCircuitDlci, frCircuitEntry, frCircuitIfIndex, frDlcmiEntry, ) = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitDlci", "frCircuitEntry", "frCircuitIfIndex", "frDlcmiEntry")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")

# Types

class CfrMapProtocols(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,38,7,53,6,40,49,63,37,39,999,74,25,48,22,11,12,47,10,18,13,16,83,)
    namedValues = NamedValues(("arp", 1), ("xns", 10), ("novell", 11), ("apollo", 12), ("vines", 13), ("appletalk", 16), ("ieeeSpanning", 18), ("decnet", 22), ("clns", 25), ("rsrb", 37), ("bridge", 38), ("stun", 39), ("frArp", 40), ("uncompressedTcp", 47), ("compressedTcp", 48), ("llc2", 49), ("frSwitch", 53), ("serialArp", 6), ("dlsw", 63), ("ip", 7), ("nhrp", 74), ("compressedRtp", 83), ("wildcard", 999), )
    
class DlciNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,1023)
    

# Objects

ciscoFrameRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 49)).setRevisions(("2000-10-13 00:00","2000-05-22 00:00","2000-05-16 00:00","2000-04-26 00:00","1999-08-21 00:00","1996-08-15 00:00",))
if mibBuilder.loadTexts: ciscoFrameRelayMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoFrameRelayMIB.setContactInfo("       Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-framerelay@cisco.com")
if mibBuilder.loadTexts: ciscoFrameRelayMIB.setDescription("Cisco Frame Relay MIB")
ciscoFrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1))
cfrLmiObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1))
cfrLmiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1))
if mibBuilder.loadTexts: cfrLmiTable.setDescription("Table of Frame Relay LMI information that are\neither supplemental to the frDlcmiTable of RFC 1315\nor specific to Cisco's implementation.")
cfrLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1))
if mibBuilder.loadTexts: cfrLmiEntry.setDescription("Each entry of the table contains information\nof Frame Relay LMI over one physical interface.\nThey are mostly FR generic and some Cisco specific.")
cfrLmiLinkstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("up", 1), ("down", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiLinkstatus.setDescription("Data link status via LMI.")
cfrLmiLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiLinkType.setDescription("Frame Relay link type.")
cfrLmiEnquiryIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiEnquiryIns.setDescription("Number of Status Enquiry messages received.")
cfrLmiEnquiryOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiEnquiryOuts.setDescription("Number of Status Enquiry messages sent.")
cfrLmiStatusIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusIns.setDescription("Number of Status messages received.")
cfrLmiStatusOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusOuts.setDescription("Number of Status messages sent.")
cfrLmiUpdateStatusIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiUpdateStatusIns.setDescription("Number of Update Status messages received.")
cfrLmiUpdateStatusOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiUpdateStatusOuts.setDescription("Number of Update Status messages sent")
cfrLmiStatusTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusTimeouts.setDescription("Number of times when timeout occurred on waiting\nfor Status message")
cfrLmiStatusEnqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusEnqTimeouts.setDescription("Number of times when timeout occurred on waiting\nfor Status Enquiry message")
cfrLmiN392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiN392Dce.setDescription("LMI error threshold for DCE interface.\nFor DTE, value becomes 0.")
cfrLmiN393Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiN393Dce.setDescription("LMI monitored event count for DCE interface.\nFor DTE, value becomes zero (0).")
cfrLmiT392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiT392Dce.setDescription("DCE polling verification timer for DCE interface\nFor DTE, the value becomes zero (0).")
cfrCircuitObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2))
cfrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1))
if mibBuilder.loadTexts: cfrCircuitTable.setDescription("Table of descriptive and statistics information\nthat are generic to Frame Relay virtual circuits.")
cfrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1))
if mibBuilder.loadTexts: cfrCircuitEntry.setDescription("Each entry of the table contains information of a\ncircuit that are not included in frCircuitTable of\nRFC1315 but are generic to Frame Relay.")
cfrCircuitDEins = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitDEins.setDescription("Number of packets received with the Discarded\nEligibility indictor (the DE bit) set.")
cfrCircuitDEouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitDEouts.setDescription("Number of packets transmitted with DE bit set.")
cfrCircuitDropPktsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitDropPktsOuts.setDescription("Number of discarded packets that were to be sent.")
cfrCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("pvc", 1), ("svc", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitType.setDescription("Basic circuit type")
cfrExtCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2))
if mibBuilder.loadTexts: cfrExtCircuitTable.setDescription("Table of Cisco implementation specific FR\ncircuit information. This is a Cisco extension\nfor the frCircuitTable of RFC 1315.")
cfrExtCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1))
if mibBuilder.loadTexts: cfrExtCircuitEntry.setDescription("Each entry of the table contains information\nof a Frame Relay virtual circuit that are specific\nto Cisco implementation.")
cfrExtCircuitIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitIfName.setDescription("The textual name of the main interface or the \nsubinterface that this DLCI is associated with.\nThis is the same name string of an interface used\nin the configuration and all console displays,\nsuch as 'serial 0', 'serial 3/0.3', etc.")
cfrExtCircuitIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("mainInterface", 1), ("pointToPoint", 2), ("multipoint", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitIfType.setDescription("Type of the subinterface this DLCI is associated\nwith, if configured.")
cfrExtCircuitSubifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitSubifIndex.setDescription("For value greater than zero (0), it indicates\nthe network management interface index\nfor the subinterface associated with\nthis DLCI. Value 0 means the DLCI is not\nassociated with any subinterface.")
cfrExtCircuitMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMapStatus.setDescription("The mapping protocols (internally considered as\nthe 'link type') applied on this circuit.\nThe value ranges from 0 to 2047.\nFor point-to-point DLCI, the value stays zero.\nOtherwise, the value is a sum. It initially takes\nthe value zero, then, for each type of Protocol,\n2 raised to a power is added to the sum.\nThe following table presents respective power and\nequivalent value for each applicable type:\n\n        Protocol        Power    Value\n        --------        -----    -----\n        IP              0        1\n        IPX             1        2\n        Appletalk       2        4\n        XNS             3        8\n        VINES           4        16\n        DECnet          5        32\n        CLNS            6        64\n        Bridging        7        128\n        RSRB            8        256\n        STUN            9        512\n        LLC2            10       1024\n\nFor example, value 3 means the circuit's mapping\nprotocols include IP and IPX. (3 = 2**1 + 2**0,\nwhere 0 corresponds to IP and 1 to IPX.) Value 0\nmeans there is currently no mapping protocol for\nthe circuit.\nSee cfrMapTable for more mapping information.")
cfrExtCircuitCreateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("dynamic", 1), ("static", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitCreateType.setDescription("Identify the last source of the circuit's creation.")
cfrExtCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMulticast.setDescription("Indicate if this DLCI is a multicast DLCI.")
cfrExtCircuitRoutedDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 7), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRoutedDlci.setDescription("The routed DLCI to pair up with this DLCI\nfor switching function. NOTE: Value zero (0)\nindicates that there is no such routed DLCI\ncorresponding to this DLCI.")
cfrExtCircuitRoutedIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRoutedIf.setDescription("The interface for the routed DLCI that pairs up\nwith this DLCI for switching. Value greater than 0\nis the InterfaceIndex for that interface. Value\nzero (0) indicates that there is no such routed DLCI\ncorresponding to this DLCI.")
cfrExtCircuitUncompressIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitUncompressIns.setDescription("Number of inbound octets of the data packets,\naccounted at Frame Relay level after FRF.9\npayload decompression is applied. In the case of\nnon-FRF.9, this value could be identical to\nfrCircuitReceivedOctets, unless otherwise noted.")
cfrExtCircuitUncompressOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitUncompressOuts.setDescription("Number of outbound octets of the data packets,\naccounted at Frame Relay level before FRF.9\npayload compression is applied. In the case of\nnon-FRF.9, this value could be identical to\nfrCircuitSentOctets, unless otherwise noted.")
cfrExtCircuitFECNOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitFECNOuts.setDescription("Total number of frames sent out to the network \nindicating forward congestion.")
cfrExtCircuitBECNOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBECNOuts.setDescription("Total number of frames sent out to the network \nindicating backward congestion.")
cfrExtCircuitMinThruputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMinThruputOut.setDescription("Circuit's outgoing minimal Throughput based on \nconfiguration.")
cfrExtCircuitMinThruputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMinThruputIn.setDescription("Circuit's incoming minimal Throughput based on\nconfiguration.")
cfrExtCircuitBcastPktOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBcastPktOuts.setDescription("Total number of broadcast packets sent out to the \nnetwork.")
cfrExtCircuitBcastByteOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBcastByteOuts.setDescription("Total number of bytes sent out to the network in \nbroadcast packets.")
cfrExtCircuitBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBandwidth.setDescription("Bandwidth of the virtual circuit, acquired from \nCisco typed LMI Full Status message.")
cfrExtCircuitShapeByteLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(125, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeByteLimit.setDescription("Maximum number of tokens a token bucket can hold in any\ntime interval in case of traffic shaping.")
cfrExtCircuitShapeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 125))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeInterval.setDescription("Committed rate measurement interval.")
cfrExtCircuitShapeByteIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(125, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeByteIncrement.setDescription("Number of tokens added into the token bucket per time\ninterval in case of traffic shaping.")
cfrExtCircuitShapePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapePkts.setDescription("Total number of packets that went through traffic \nshaping.")
cfrExtCircuitShapeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeBytes.setDescription("Total number of bytes that went through traffic \nshaping.")
cfrExtCircuitShapePktsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapePktsDelay.setDescription("Total number of packets that were delayed by the \ntraffic shaper.")
cfrExtCircuitShapeBytesDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeBytesDelay.setDescription("Total number of bytes that were delayed by the \ntraffic shaper.")
cfrExtCircuitShapeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeActive.setDescription("Shows whether shaping is active or not.")
cfrExtCircuitShapeAdapting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("none", 1), ("becn", 2), ("foreSight", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeAdapting.setDescription("Type of Adaptive Shaping configured.\nnone(1)      - No adaptive shaping configured\nbecn(2)      - Backward Explicit Congestion Notification\nforeSight(3) - ForeSight is the network traffic control \n               software used in Cisco WAN switches")
cfrExtCircuitTxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitTxDataRate.setDescription("The average rate (bytes/second) at which data is \ntransmitted in this circuit. ")
cfrExtCircuitTxPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitTxPktRate.setDescription("The average number of packets sent in a second in this \ncircuit.")
cfrExtCircuitRcvDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRcvDataRate.setDescription("The average rate (bytes/second) at which data is \nreceived in this circuit. ")
cfrExtCircuitRcvPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRcvPktRate.setDescription("The average number of packets received in a second in \nthis circuit. ")
cfrMapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3))
cfrMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1))
if mibBuilder.loadTexts: cfrMapTable.setDescription("Table of protocols and addresses mapping\ninformation of FR virtual circuit.")
cfrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1)).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"), (0, "CISCO-FRAME-RELAY-MIB", "cfrMapIndex"))
if mibBuilder.loadTexts: cfrMapEntry.setDescription("Each entry of the table contains one mapping \ninformation of a Frame Relay virtual circuit.")
cfrMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapIndex.setDescription("An arbitrary Index to the mapping information\nassociated with a certain circuit. The maximum\nvalue is arbitrarily picked which is considered\nsufficient for usual configuration.")
cfrMapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 2), CfrMapProtocols()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapProtocol.setDescription("Mapping protocol for this circuit.")
cfrMapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapAddress.setDescription("Mapping protocol address at remote end for\nthis DLCI.\nNOTE: For point-to-point DLCI, the string is fixed\nto be point-to-point.")
cfrMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("svc", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapType.setDescription("Type for the map creation.")
cfrMapEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("ietf", 1), ("cisco", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapEncaps.setDescription("Indication of the encapsulation type for this\nmapping protocol.")
cfrMapBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapBroadcast.setDescription("Broadcast enabled or disabled.")
cfrMapPayloadCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapPayloadCompress.setDescription("Indicate if payload compression is enabled.")
cfrMapTcpHdrCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("inapplicable", 1), ("passive", 2), ("active", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapTcpHdrCompress.setDescription("TCP header compression type, if applicable.")
cfrMapRtpHdrCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("inapplicable", 1), ("passive", 2), ("active", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapRtpHdrCompress.setDescription("RTP header compression type, if applicable.\nThe value 'passive' means that the header of an\noutgoing RTP/IP packet is compressed only if an\nincoming RTP/IP packet had a compressed header.\nThe value 'active' means the header of every outgoing\nRTP/IP packet is compressed.")
cfrMapPayloadCompressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("inapplicable", 1), ("cisco", 2), ("frf9Software", 3), ("frf9Hardware", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapPayloadCompressType.setDescription("FR payload compression type, if applicable.\nFRF.9 is the Frame Relay Forum Implementation Agreement\non FR payload compression. The compression can be done\nby either software or hardware (when equipped with the\nsupporting hardware), depending on configuration.")
cfrSvcObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4))
cfrSvcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1))
if mibBuilder.loadTexts: cfrSvcTable.setDescription("Table of FR SVC specific, descriptive\nand statistics information.")
cfrSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1)).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: cfrSvcEntry.setDescription("Each entry of the table contains circuit information\nspecific to a Frame Relay Switched Virtual Circuit.")
cfrSvcAddrLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcAddrLocal.setDescription("Local E.164/X.125 address for the circuit.")
cfrSvcAddrRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcAddrRemote.setDescription("Remote E.164/X.125 address for the circuit.")
cfrSvcThroughputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcThroughputIn.setDescription("Circuit's incoming throughput. For outgoing \nthroughput (commonly referred to as CIR) see\nfrCircuitThroughput per RFC1315.")
cfrSvcMinThruputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcMinThruputOut.setDescription("Circuit's outgoing minimal Throughput.")
cfrSvcMinThruputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcMinThruputIn.setDescription("Circuit's incoming minimal Throughput.")
cfrSvcCommitBurstIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcCommitBurstIn.setDescription("Circuit's incoming Committed Burst Rate.\nSee ANSI and/or ITU specifications for\ndefinition and calculations. For outgoing\nCBR, see frCircuitCommittedBurst per RFC 1315.")
cfrSvcExcessBurstIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 2440000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcExcessBurstIn.setDescription("Circuit's incoming Excess Burst Rate.\nSee ANSI and/or ITU specifications for\ndefinition and calculations. For outgoing\nEBR, see frCircuitExcessBurst per RFC 1315.")
cfrSvcIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcIdleTime.setDescription("Circuit's idle time period. If expires, the\ncircuit is cleared.")
cfrElmiObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5))
cfrElmiIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiIpAddr.setDescription("This object represents the Management address of the\ndevice used for address registration. \nNetwork management station can send management\nmessages to this IP address. This can be \nuser configured address or the address of one of the\ninterfaces on the device. If address registration is\ndisabled then this will have a value of 0.0.0.0. \nThis object is accessible only if the ELMI protocol \nis supported on the device")
cfrElmiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2))
if mibBuilder.loadTexts: cfrElmiTable.setDescription("Table of CISCO Frame Relay ELMI information that is\nspecific to CISCO implementation")
cfrElmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfrElmiEntry.setDescription("Each entry of the table contains information about a\nphysical interface. The table can be accessible only\nif the device supports ELMI protocol and if LMI is\nenabled on the interface.")
cfrElmiLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiLinkStatus.setDescription("This variable states whether Enhanced Link Management\nInterface(ELMI) protocol is enabled or not on a \nframe relay interface.")
cfrElmiArStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiArStatus.setDescription("This variable states whether the Enhanced Link\nManagement Interface(ELMI) address registration(AR)\nmechanism is enabled or not on a frame relay \ninterface. A value of 1 indicates ELMI AR is \nsupported on the interface. A value of 2 indicates\nELMI AR is supported but the user disabled the\nexchange of IP address and ifIndex with the\nneighboring device. This object doesn't have any\nsignificance if cfrElmiLinkStatus is disabled\non the interface.")
cfrElmiRemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiRemoteStatus.setDescription("This variable states the Enhanced Link \nManagement(ELMI) status on the other end of the\ninterface. If cfrElmiLinkStatus is enabled on the\nother end a value of 1 will be returned,\nelse 2 will be returned. This object doesn't have any\nsignificance if cfrElmiLinkStatus is disabled on the\ninterface")
cfrElmiNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3))
if mibBuilder.loadTexts: cfrElmiNeighborTable.setDescription("Table of CISCO Frame Relay Neighbor ELMI information\nthat is specific to CISCO implementation.")
cfrElmiNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfrElmiNeighborEntry.setDescription("Each entry of the table contains information of the\nneighboring device connected to a physical interface.\nThe entry will be present only if ELMI is enabled on\nthe neighboring device interface. If the value of the\ncfrElmiRemoteStatus in the cfrElmiEntry is 1 then a \nvalid entry exists for the interface. If ELMI is not \nsupported on the remote end then, the neighbor \ninformation for the interface will not be present")
cfrElmiNeighborArStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notsupported", 1), ("enabled", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborArStatus.setDescription("This variable indicates the status of ELMI Address \nregistration(AR) on the neighboring device. A value \nof 1 indicates ELMI AR is not supported on the \nneighboring device. A value of 2 indicates ELMI AR is\nenabled on the interface. A value of 3 indicates AR is\nsupported, but user disabled the exchange of IP \naddress and ifIndex with the neighbor.")
cfrElmiNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborIpAddress.setDescription("The Management IP address of the neighboring device \nto which the other end of this interface is \nconnected. Network management system can use this\naddress to send management messages to the device.\nIf address registration is not supported on the\nremote end then the value will be 0.0.0.0.\nNMS uses this object in the topology discovery of the\nnetwork.")
cfrElmiNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborIfIndex.setDescription("The Interface index of the neighboring device to \nwhich this interface is connected. If the value of\ncfrElmiNeighborArStatus is 2 then this will have a\nvalid value. If the value of cfrElmiNeighborArStatus\nis 3 or 1 then value of this object will be 0. NMS\nuses this object in the topology discovery of the\nnetwork.")
cfrElmiNeighborVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborVendorName.setDescription("Vendor name of the neighboring device to which the\nother end of this interface is connected.")
cfrElmiNeighborPlatformName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborPlatformName.setDescription("Platform name of the neighboring device to which the\nother end of this interface is connected.")
cfrElmiNeighborDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborDeviceName.setDescription("Device name of the neighboring device to which the\nother end of this interface is connected.")
cfrFragObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6))
cfrFragTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1))
if mibBuilder.loadTexts: cfrFragTable.setDescription("Table of Frame Relay Fragmentation information. \nThese are specific to Cisco's implementation.")
cfrFragEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1)).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: cfrFragEntry.setDescription("Each entry of the table contains details of \nfragmentation configured on  this circuit. ")
cfrFragSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragSize.setDescription("cfrFragSize defines the payload size of a fragment \nand it excludes the FR headers and any FR fragmentation\nheader.")
cfrFragType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragType.setDescription("Fragmentation type configured by the user. The types\nsupported are end-to-end, VoFR-cisco and VoFR.")
cfrFragInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragInPkts.setDescription("Total number of frames received that have a \nfragmentation header.")
cfrFragOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragOutPkts.setDescription("Total number of fragments that are transmitted with a\nfragmenation header.")
cfrFragInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragInOctets.setDescription("Total number of bytes received in frames that have a \nfragmentation header. The number of bytes include the\nFR header.")
cfrFragOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragOutOctets.setDescription("Total number of bytes that are transmitted in frames\nwith a fragmenation header. The number of bytes also\nincludes the FR header.")
cfrFragNotInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotInPkts.setDescription("Total number of frames received that do not require \nreassembly and therefore will not contain the \nfragmentation header. This counter is valid only when\nend-to-end fragmentation type is set.")
cfrFragNotOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotOutPkts.setDescription("Total number of frames transmitted without fragmenting\nand therefore will not contain the fragmentation header.\nThis counter is valid only when end-to-end fragmentation\ntype is set.")
cfrFragNotInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotInOctets.setDescription("Total number of bytes received in frames that do not \nrequire reassembly and therefore will not contain the \nfragmentation header. This counter is valid only when\nend-to-end fragmentation type is set.")
cfrFragNotOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotOutOctets.setDescription("Total number of bytes transmitted in frames that are\nnot fragmented and therefore will not contain the \nfragmentation header. This counter is valid only when \nend-to-end fragmentation type is set.")
cfrFragAssembledInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragAssembledInPkts.setDescription("Total number of fully reassembled frames. It also \ncounts the number of packets received without FR \nfragmentation header (i.e. in un-fragmentated pkts).")
cfrFragAssembledInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragAssembledInOctets.setDescription("Total number of bytes received in fully reassembled \nframes. It also counts the number of packets received\nwithout FR fragmentation header (i.e.in un-fragmentated\npkts).")
cfrFragPreOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragPreOutPkts.setDescription("Total number of frames fragmented and trasmitted. It \nalso counts the number of packets trasmitted without FR\nfragmentation header (i.e. in un-fragmentated pkts).")
cfrFragPreOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragPreOutOctets.setDescription("Total number of bytes transmitted in fragmented frames.\nIt also counts the number of bytes trasmitted in frames\nwithout FR fragmentation header (i.e. in un-fragmentated\npkts).")
cfrFragDroppedReAssembledInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragDroppedReAssembledInPkts.setDescription("Number of received fragments dropped for reasons such\nas : running out of memory, receiving segments out of \nsequence, receiving an unexpected frame with a B bit \nset, timing out on a reassembling frame.")
cfrFragDroppedFragmentedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragDroppedFragmentedOutPkts.setDescription("Number of fragments dropped because of running \nout of memory.")
cfrFragTimeoutsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragTimeoutsIn.setDescription("Number of reassemble timer timeouts for this circuit.\nA frame requiring more than two minutes to fully \nreassemble is dropped and timeout will be incremented\nby one.")
cfrFragOutOfSeqFragPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragOutOfSeqFragPkts.setDescription("Indicates the total number of packets received with an\nunexpected sequence number. All fragments being \nreassembled are dropped. Start a new packet with the\nreceived segment only if the B bit is set on the \nsegment. Otherwise the new segment is also dropped.")
cfrFragUnexpectedBBitSetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragUnexpectedBBitSetPkts.setDescription("Number of fragments received in this circuit with \na B bit set. All fragments being reassembled are dropped\nand a new packet is started with this segment.")
cfrFragSeqMissedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragSeqMissedPkts.setDescription("Number of fragments received in this circuit with \nskipped sequence number.")
cfrFragInterleavedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragInterleavedOutPkts.setDescription("Number of packets that have been interleaved between \nsegments.")
cfrConnectionObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7))
cfrConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1))
if mibBuilder.loadTexts: cfrConnectionTable.setDescription("Table of Frame Relay/Frame Relay and Frame Relay/ATM\nNetwork/Service Interworking connection information. \nThese are specific to Cisco's implementation.")
cfrConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1)).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: cfrConnectionEntry.setDescription("Each entry of the table contains information of a\nconnection that is established for Frame Relay/Frame \nRelay and Frame Relay/ATM Network/Service Interworking.")
cfrConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnName.setDescription("The textual name of a for FR/FR or FR/ATM  \nNetwork/Service Interworking connection.")
cfrConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnID.setDescription("The numerical identifier of a FR/FR or FR/ATM  \nNetwork/Service Interworking connection.")
cfrConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnState.setDescription("Status of a FR/FR or FR/ATM  Network/Service \nInterworking connection.")
cfrConnSegment1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment1Name.setDescription("The textual name used to identify the first segment of \na FR/FR or FR/ATM  Network/Service Interworking \nconnection.")
cfrConnSegment1VCGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment1VCGroup.setDescription("The textual name used to identify the VC-Group in the\nfirst segment of a Frame Relay/ATM  Network Interworking\n(FRF.5)connection. \nThis field is not applicabe in case of,\n         FRF.8 (Frame Relay/ATM  Service Interworking)\n         and\n         FR-FR connectione. ")
cfrConnSegment1Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 6), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment1Dlci.setDescription("The DLCI used as the first segment of a FR-FR or FR-ATM\nNetwork/Service Interworking connection.")
cfrConnSegment2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment2Name.setDescription("The interface on which second segment of a FR-FR or \nFR-ATM  Network/Service Interworking connection is \nconfigured.")
cfrConnSegment2Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment2Vpi.setDescription("The value of  VPI, in the ATM connection, used as the\nsecond segment of a FR-ATM  Network/Service Interworking\nconnection. In case of FR-FR connection, the same will \nbe used to display the DLCI used as the second segment.")
cfrConnSegment2Vci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment2Vci.setDescription("The value of  VCI, in the ATM connection, used as the\nsecond segment of a FR-ATM  Network/Service Interworking\nconnection. In case of FR-FR connection, this is not \nsupported.")
cfrConnServiceTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("serviceTranslationEnabled", 1), ("serviceTranslationNotEnabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnServiceTranslation.setDescription("Shows whether Service Translation Mode is supported or\nnot. Translation Mode is the interworking of \ninternetworking (routed and/or bridged) protocols used \nin FR-ATM  Service PVC Interworking(FRF.8).\nThis is not supported in case of FRF.5 (FR-ATM network\nInterworking) and FR-FR connections.")
cfrConnFrSscsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 11), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnFrSscsDlci.setDescription("The DLCI value used at the FR-SSCS layer. This is one of\nconnection multiplexing methods used in Frame Relay/ATM  \nNetwork Interworking.\nNot supported in case of FRF.8 (FR-ATM Service PVC \nInterworking) and FR-FR connections")
cfrConnEfciBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("mapFecn", 1), ("notMapFecn", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnEfciBit.setDescription("Shows whether the FECN field in the FR frame is mapped \nto the ATM EFCI field of every cell generated out of the \nFR frame. This is used to indicate congestion in FR to\nATM direction in case of Frame Relay/ATM  Service PVC \nInterworking.\nNot supported in FRF.5 (Frame Relay/ATM Network \nInterworking and FR-FR connections.")
cfrConnDeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("noMapClp", 1), ("mapClp", 2), ("setDe0", 3), ("setDe1", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnDeBit.setDescription("The method of operation for loss priority mapping in the\nB-ISDN to FR direction..\nNot supported in case of FR-FR connection.")
cfrConnClpBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,6,5,4,)).subtype(namedValues=NamedValues(("setClpTo0AndCopyDeToFrsscsDe", 1), ("setClpTo1AndCopyDeToFrsscsDe", 2), ("copyDeToFrsscsDeAndClp", 3), ("copyDeToClp", 4), ("setClp1", 5), ("setClp0", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnClpBit.setDescription("The method of operation used to map loss priority\nmapping in the FR to ATM direction.\nNot supported in case of FR-FR connection.")
ciscoFrMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 3))
ciscoFrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1))
ciscoFrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2))

# Augmentions
frCircuitEntry, = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitEntry")
frCircuitEntry.registerAugmentions(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitEntry"))
cfrExtCircuitEntry.setIndexNames(*frCircuitEntry.getIndexNames())
frCircuitEntry, = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitEntry")
frCircuitEntry.registerAugmentions(("CISCO-FRAME-RELAY-MIB", "cfrCircuitEntry"))
cfrCircuitEntry.setIndexNames(*frCircuitEntry.getIndexNames())
frDlcmiEntry, = mibBuilder.importSymbols("RFC1315-MIB", "frDlcmiEntry")
frDlcmiEntry.registerAugmentions(("CISCO-FRAME-RELAY-MIB", "cfrLmiEntry"))
cfrLmiEntry.setIndexNames(*frDlcmiEntry.getIndexNames())

# Groups

ciscoFrMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 1)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEins"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDropPktsOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrMapAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiT392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrMapType"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapTcpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcIdleTime"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrRemote"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkType"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcExcessBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrLocal"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusEnqTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrMapProtocol"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcCommitBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN393Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrMapEncaps"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcThroughputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrMapBroadcast"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrMapPayloadCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkstatus"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusOuts"), ) )
if mibBuilder.loadTexts: ciscoFrMIBGroup.setDescription("The compliance statement for entities which implement\nthis Cisco Frame Relay MIB.")
ciscoFrMIBGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 2)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrLmiT392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitType"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkType"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrLocal"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEins"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapTcpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcIdleTime"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrRemote"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcCommitBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrMapBroadcast"), ("CISCO-FRAME-RELAY-MIB", "cfrMapAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapPayloadCompressType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDropPktsOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrMapProtocol"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEouts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusEnqTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcExcessBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrMapType"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN393Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrMapEncaps"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrMapRtpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkstatus"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcThroughputIn"), ) )
if mibBuilder.loadTexts: ciscoFrMIBGroupRev1.setDescription("A collection of objects providing router's\nFrame Relay configuration and statistics\ninformation that are additional to the IETF\nstandard Frame Relay DTE MIB.")
ciscoFrLmiMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 3)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiT392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkType"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusEnqTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN393Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkstatus"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusOuts"), ) )
if mibBuilder.loadTexts: ciscoFrLmiMIBGroup.setDescription("A collection of objects providing router's\nFrame Relay LMI configuration and statistics\ninformation either supplemental to the \nfrDlcmiTable of RFC 1315 or specific to Cisco's \nimplementation.")
ciscoFrCircuitMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 4)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEins"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEouts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDropPktsOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitType"), ) )
if mibBuilder.loadTexts: ciscoFrCircuitMIBGroup.setDescription("A collection of objects providing information of a\ncircuit that are not included in frCircuitTable of\nRFC1315 but are generic to Frame Relay.")
ciscoExtCircuitMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 5)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastPktOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastByteOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitFECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBandwidth"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ) )
if mibBuilder.loadTexts: ciscoExtCircuitMIBGroup.setDescription("A collection of objects that provide Cisco \nimplementation specific FR circuit information. \nThis is a Cisco extension for the frCircuitTable \nof RFC 1315.")
ciscoFrTsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 6)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeBytesDelay"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeBytes"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeActive"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeByteLimit"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeInterval"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapePkts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeAdapting"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapePktsDelay"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeByteIncrement"), ) )
if mibBuilder.loadTexts: ciscoFrTsMIBGroup.setDescription("A collection of objects that provide information\nabout Frame Relay Traffic Shaping. These are \nadditional to the IETF standard Frame Relay DTE MIB.")
ciscoFrMapMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 7)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrMapAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapPayloadCompressType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapProtocol"), ("CISCO-FRAME-RELAY-MIB", "cfrMapBroadcast"), ("CISCO-FRAME-RELAY-MIB", "cfrMapEncaps"), ("CISCO-FRAME-RELAY-MIB", "cfrMapRtpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapTcpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapIndex"), ) )
if mibBuilder.loadTexts: ciscoFrMapMIBGroup.setDescription("A collection of objects to provide mapping \ninformation of a Frame Relay virtual circuit.\nThese are additional to the IETF standard \nFrame Relay DTE MIB.")
ciscoFrSvcMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 8)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrSvcCommitBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcIdleTime"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcExcessBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrRemote"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrLocal"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcThroughputIn"), ) )
if mibBuilder.loadTexts: ciscoFrSvcMIBGroup.setDescription("A collection of objects to provide circuit\ninformation specific to a Frame Relay Switched\nVirtual Circuit.This is in addition to the IETF \nstandard Frame Relay DTE MIB.")
ciscoFrElmiMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 9)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrElmiRemoteStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiIpAddr"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborDeviceName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborPlatformName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIpAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborVendorName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIfIndex"), ) )
if mibBuilder.loadTexts: ciscoFrElmiMIBGroup.setDescription("A collection of objects providing router's\nELMI information.")
ciscoFrElmiMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 10)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrElmiRemoteStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiIpAddr"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborDeviceName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborPlatformName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIpAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborVendorName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiLinkStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIfIndex"), ) )
if mibBuilder.loadTexts: ciscoFrElmiMIBGroup1.setDescription("A collection of objects providing router's\nELMI information.")
ciscoFrFragMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 11)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrFragInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragAssembledInOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragSeqMissedPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotInOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragPreOutOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragType"), ("CISCO-FRAME-RELAY-MIB", "cfrFragOutOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragOutOfSeqFragPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragDroppedReAssembledInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragUnexpectedBBitSetPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotOutOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragSize"), ("CISCO-FRAME-RELAY-MIB", "cfrFragInOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragDroppedFragmentedOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragInterleavedOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragPreOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragAssembledInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragTimeoutsIn"), ) )
if mibBuilder.loadTexts: ciscoFrFragMIBGroup.setDescription("A collection of objects providing router's\nfragmentation information.")
ciscoFrConnMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 12)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrConnState"), ("CISCO-FRAME-RELAY-MIB", "cfrConnID"), ("CISCO-FRAME-RELAY-MIB", "cfrConnServiceTranslation"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment1VCGroup"), ("CISCO-FRAME-RELAY-MIB", "cfrConnClpBit"), ("CISCO-FRAME-RELAY-MIB", "cfrConnDeBit"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment2Vci"), ("CISCO-FRAME-RELAY-MIB", "cfrConnFrSscsDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment1Name"), ("CISCO-FRAME-RELAY-MIB", "cfrConnEfciBit"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment2Vpi"), ("CISCO-FRAME-RELAY-MIB", "cfrConnName"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment1Dlci"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment2Name"), ) )
if mibBuilder.loadTexts: ciscoFrConnMIBGroup.setDescription("A collection of objects providing router's\nfragmentation information.")
ciscoExtCircuitMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 13)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastPktOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitTxDataRate"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRcvPktRate"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRcvDataRate"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitTxPktRate"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastByteOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitFECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBandwidth"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ) )
if mibBuilder.loadTexts: ciscoExtCircuitMIBGroup1.setDescription("A collection of objects that provide Cisco\nimplementation specific FR circuit information.\nThis is a Cisco extension for the frCircuitTable\nof RFC 1315.")

# Compliances

ciscoFrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 1)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "ciscoFrMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoFrMIBCompliance.setDescription("The compliance statement for entities which implement\nthis Cisco Frame Relay MIB.")
ciscoFrMIBCompliancesRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 2)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "ciscoFrMIBGroupRev1"), ) )
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev1.setDescription("The compliance statement for entities which implement\nthis Cisco Frame Relay MIB.")
ciscoFrMIBCompliancesRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 3)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "ciscoFrTsMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrLmiMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrMapMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrSvcMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoExtCircuitMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev2.setDescription("The compliance statement for entities which implement\nthis Cisco Frame Relay MIB.")
ciscoFrMIBCompliancesRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 4)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "ciscoFrTsMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrLmiMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrMapMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrSvcMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrElmiMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoExtCircuitMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev3.setDescription("The compliance statement for entities which implement\nthis Cisco Frame Relay MIB.")
ciscoFrMIBCompliancesRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 5)).setObjects(*(("CISCO-FRAME-RELAY-MIB", "ciscoFrConnMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrTsMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrMapMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrLmiMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrSvcMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrFragMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrElmiMIBGroup1"), ("CISCO-FRAME-RELAY-MIB", "ciscoExtCircuitMIBGroup1"), ) )
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev4.setDescription("The compliance statement for entities which implement\nthis Cisco Frame Relay MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-FRAME-RELAY-MIB", PYSNMP_MODULE_ID=ciscoFrameRelayMIB)

# Types
mibBuilder.exportSymbols("CISCO-FRAME-RELAY-MIB", CfrMapProtocols=CfrMapProtocols, DlciNumber=DlciNumber)

# Objects
mibBuilder.exportSymbols("CISCO-FRAME-RELAY-MIB", ciscoFrameRelayMIB=ciscoFrameRelayMIB, ciscoFrMIBObjects=ciscoFrMIBObjects, cfrLmiObjs=cfrLmiObjs, cfrLmiTable=cfrLmiTable, cfrLmiEntry=cfrLmiEntry, cfrLmiLinkstatus=cfrLmiLinkstatus, cfrLmiLinkType=cfrLmiLinkType, cfrLmiEnquiryIns=cfrLmiEnquiryIns, cfrLmiEnquiryOuts=cfrLmiEnquiryOuts, cfrLmiStatusIns=cfrLmiStatusIns, cfrLmiStatusOuts=cfrLmiStatusOuts, cfrLmiUpdateStatusIns=cfrLmiUpdateStatusIns, cfrLmiUpdateStatusOuts=cfrLmiUpdateStatusOuts, cfrLmiStatusTimeouts=cfrLmiStatusTimeouts, cfrLmiStatusEnqTimeouts=cfrLmiStatusEnqTimeouts, cfrLmiN392Dce=cfrLmiN392Dce, cfrLmiN393Dce=cfrLmiN393Dce, cfrLmiT392Dce=cfrLmiT392Dce, cfrCircuitObjs=cfrCircuitObjs, cfrCircuitTable=cfrCircuitTable, cfrCircuitEntry=cfrCircuitEntry, cfrCircuitDEins=cfrCircuitDEins, cfrCircuitDEouts=cfrCircuitDEouts, cfrCircuitDropPktsOuts=cfrCircuitDropPktsOuts, cfrCircuitType=cfrCircuitType, cfrExtCircuitTable=cfrExtCircuitTable, cfrExtCircuitEntry=cfrExtCircuitEntry, cfrExtCircuitIfName=cfrExtCircuitIfName, cfrExtCircuitIfType=cfrExtCircuitIfType, cfrExtCircuitSubifIndex=cfrExtCircuitSubifIndex, cfrExtCircuitMapStatus=cfrExtCircuitMapStatus, cfrExtCircuitCreateType=cfrExtCircuitCreateType, cfrExtCircuitMulticast=cfrExtCircuitMulticast, cfrExtCircuitRoutedDlci=cfrExtCircuitRoutedDlci, cfrExtCircuitRoutedIf=cfrExtCircuitRoutedIf, cfrExtCircuitUncompressIns=cfrExtCircuitUncompressIns, cfrExtCircuitUncompressOuts=cfrExtCircuitUncompressOuts, cfrExtCircuitFECNOuts=cfrExtCircuitFECNOuts, cfrExtCircuitBECNOuts=cfrExtCircuitBECNOuts, cfrExtCircuitMinThruputOut=cfrExtCircuitMinThruputOut, cfrExtCircuitMinThruputIn=cfrExtCircuitMinThruputIn, cfrExtCircuitBcastPktOuts=cfrExtCircuitBcastPktOuts, cfrExtCircuitBcastByteOuts=cfrExtCircuitBcastByteOuts, cfrExtCircuitBandwidth=cfrExtCircuitBandwidth, cfrExtCircuitShapeByteLimit=cfrExtCircuitShapeByteLimit, cfrExtCircuitShapeInterval=cfrExtCircuitShapeInterval, cfrExtCircuitShapeByteIncrement=cfrExtCircuitShapeByteIncrement, cfrExtCircuitShapePkts=cfrExtCircuitShapePkts, cfrExtCircuitShapeBytes=cfrExtCircuitShapeBytes, cfrExtCircuitShapePktsDelay=cfrExtCircuitShapePktsDelay, cfrExtCircuitShapeBytesDelay=cfrExtCircuitShapeBytesDelay, cfrExtCircuitShapeActive=cfrExtCircuitShapeActive, cfrExtCircuitShapeAdapting=cfrExtCircuitShapeAdapting, cfrExtCircuitTxDataRate=cfrExtCircuitTxDataRate, cfrExtCircuitTxPktRate=cfrExtCircuitTxPktRate, cfrExtCircuitRcvDataRate=cfrExtCircuitRcvDataRate, cfrExtCircuitRcvPktRate=cfrExtCircuitRcvPktRate, cfrMapObjs=cfrMapObjs, cfrMapTable=cfrMapTable, cfrMapEntry=cfrMapEntry, cfrMapIndex=cfrMapIndex, cfrMapProtocol=cfrMapProtocol, cfrMapAddress=cfrMapAddress, cfrMapType=cfrMapType, cfrMapEncaps=cfrMapEncaps, cfrMapBroadcast=cfrMapBroadcast, cfrMapPayloadCompress=cfrMapPayloadCompress, cfrMapTcpHdrCompress=cfrMapTcpHdrCompress, cfrMapRtpHdrCompress=cfrMapRtpHdrCompress, cfrMapPayloadCompressType=cfrMapPayloadCompressType, cfrSvcObjs=cfrSvcObjs, cfrSvcTable=cfrSvcTable, cfrSvcEntry=cfrSvcEntry, cfrSvcAddrLocal=cfrSvcAddrLocal, cfrSvcAddrRemote=cfrSvcAddrRemote, cfrSvcThroughputIn=cfrSvcThroughputIn, cfrSvcMinThruputOut=cfrSvcMinThruputOut, cfrSvcMinThruputIn=cfrSvcMinThruputIn, cfrSvcCommitBurstIn=cfrSvcCommitBurstIn, cfrSvcExcessBurstIn=cfrSvcExcessBurstIn, cfrSvcIdleTime=cfrSvcIdleTime, cfrElmiObjs=cfrElmiObjs, cfrElmiIpAddr=cfrElmiIpAddr, cfrElmiTable=cfrElmiTable, cfrElmiEntry=cfrElmiEntry, cfrElmiLinkStatus=cfrElmiLinkStatus, cfrElmiArStatus=cfrElmiArStatus, cfrElmiRemoteStatus=cfrElmiRemoteStatus, cfrElmiNeighborTable=cfrElmiNeighborTable, cfrElmiNeighborEntry=cfrElmiNeighborEntry, cfrElmiNeighborArStatus=cfrElmiNeighborArStatus, cfrElmiNeighborIpAddress=cfrElmiNeighborIpAddress, cfrElmiNeighborIfIndex=cfrElmiNeighborIfIndex, cfrElmiNeighborVendorName=cfrElmiNeighborVendorName, cfrElmiNeighborPlatformName=cfrElmiNeighborPlatformName, cfrElmiNeighborDeviceName=cfrElmiNeighborDeviceName, cfrFragObjs=cfrFragObjs, cfrFragTable=cfrFragTable, cfrFragEntry=cfrFragEntry, cfrFragSize=cfrFragSize, cfrFragType=cfrFragType, cfrFragInPkts=cfrFragInPkts, cfrFragOutPkts=cfrFragOutPkts, cfrFragInOctets=cfrFragInOctets, cfrFragOutOctets=cfrFragOutOctets, cfrFragNotInPkts=cfrFragNotInPkts, cfrFragNotOutPkts=cfrFragNotOutPkts, cfrFragNotInOctets=cfrFragNotInOctets, cfrFragNotOutOctets=cfrFragNotOutOctets, cfrFragAssembledInPkts=cfrFragAssembledInPkts, cfrFragAssembledInOctets=cfrFragAssembledInOctets, cfrFragPreOutPkts=cfrFragPreOutPkts, cfrFragPreOutOctets=cfrFragPreOutOctets, cfrFragDroppedReAssembledInPkts=cfrFragDroppedReAssembledInPkts, cfrFragDroppedFragmentedOutPkts=cfrFragDroppedFragmentedOutPkts, cfrFragTimeoutsIn=cfrFragTimeoutsIn, cfrFragOutOfSeqFragPkts=cfrFragOutOfSeqFragPkts, cfrFragUnexpectedBBitSetPkts=cfrFragUnexpectedBBitSetPkts, cfrFragSeqMissedPkts=cfrFragSeqMissedPkts, cfrFragInterleavedOutPkts=cfrFragInterleavedOutPkts, cfrConnectionObjs=cfrConnectionObjs, cfrConnectionTable=cfrConnectionTable, cfrConnectionEntry=cfrConnectionEntry, cfrConnName=cfrConnName, cfrConnID=cfrConnID, cfrConnState=cfrConnState)
mibBuilder.exportSymbols("CISCO-FRAME-RELAY-MIB", cfrConnSegment1Name=cfrConnSegment1Name, cfrConnSegment1VCGroup=cfrConnSegment1VCGroup, cfrConnSegment1Dlci=cfrConnSegment1Dlci, cfrConnSegment2Name=cfrConnSegment2Name, cfrConnSegment2Vpi=cfrConnSegment2Vpi, cfrConnSegment2Vci=cfrConnSegment2Vci, cfrConnServiceTranslation=cfrConnServiceTranslation, cfrConnFrSscsDlci=cfrConnFrSscsDlci, cfrConnEfciBit=cfrConnEfciBit, cfrConnDeBit=cfrConnDeBit, cfrConnClpBit=cfrConnClpBit, ciscoFrMIBConformance=ciscoFrMIBConformance, ciscoFrMIBCompliances=ciscoFrMIBCompliances, ciscoFrMIBGroups=ciscoFrMIBGroups)

# Groups
mibBuilder.exportSymbols("CISCO-FRAME-RELAY-MIB", ciscoFrMIBGroup=ciscoFrMIBGroup, ciscoFrMIBGroupRev1=ciscoFrMIBGroupRev1, ciscoFrLmiMIBGroup=ciscoFrLmiMIBGroup, ciscoFrCircuitMIBGroup=ciscoFrCircuitMIBGroup, ciscoExtCircuitMIBGroup=ciscoExtCircuitMIBGroup, ciscoFrTsMIBGroup=ciscoFrTsMIBGroup, ciscoFrMapMIBGroup=ciscoFrMapMIBGroup, ciscoFrSvcMIBGroup=ciscoFrSvcMIBGroup, ciscoFrElmiMIBGroup=ciscoFrElmiMIBGroup, ciscoFrElmiMIBGroup1=ciscoFrElmiMIBGroup1, ciscoFrFragMIBGroup=ciscoFrFragMIBGroup, ciscoFrConnMIBGroup=ciscoFrConnMIBGroup, ciscoExtCircuitMIBGroup1=ciscoExtCircuitMIBGroup1)

# Compliances
mibBuilder.exportSymbols("CISCO-FRAME-RELAY-MIB", ciscoFrMIBCompliance=ciscoFrMIBCompliance, ciscoFrMIBCompliancesRev1=ciscoFrMIBCompliancesRev1, ciscoFrMIBCompliancesRev2=ciscoFrMIBCompliancesRev2, ciscoFrMIBCompliancesRev3=ciscoFrMIBCompliancesRev3, ciscoFrMIBCompliancesRev4=ciscoFrMIBCompliancesRev4)
