# PySNMP SMI module. Autogenerated from smidump -f python CISCO-PORT-QOS-MIB
# by libsmi2pysnmp-0.1.3 at Mon Dec  7 10:51:07 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Dscp, QosLayer2Cos, ) = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Dscp", "QosLayer2Cos")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( vtpVlanIndex, ) = mibBuilder.importSymbols("CISCO-VTP-MIB", "vtpVlanIndex")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue")

# Objects

ciscoPortQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 189)).setRevisions(("2008-09-10 00:00","2008-03-05 00:00","2008-01-09 00:00","2006-02-17 00:00","2005-02-23 00:00","2004-05-20 00:00","2004-01-30 00:00","2002-03-20 00:00","2001-05-15 00:00","2000-12-20 00:00",))
if mibBuilder.loadTexts: ciscoPortQosMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoPortQosMIB.setContactInfo("Cisco Systems\nCustomer Service    \n\nPostal:    170 W. Tasman Drive    \nSan Jose, CA  95134-1706    \nUSA    \n\nTel: +1 800 553-NETS    \n\nE-mail: cs-port-qos@cisco.com")
if mibBuilder.loadTexts: ciscoPortQosMIB.setDescription("Cisco PORT QOS MIB - Overview\n\nThis MIB module is for the management of Cisco's    \nper port rate-limiting and traffic shaping on L3    \nswitch/Router Platform(s).    \n\nPer-port rate-limiting is a traffic control method.    \nA set of rate limits are applied to the traffic    \ntraversing an interface. Each rate limit has a    \nconfigurable action that is taken when rate    \nlimiting criteria is met.    \n\nPer-port traffic shaping is a traffic control    \nmethod. The user can restrict the amount of traffic    \ncoming out of a physical port. Excess traffic is     \nbuffered within the router/switch to the extent     \npossible. \n\nA class represents a class of traffic. It is defined \nvia the specification of the packet matching criteria \nthat identifies packets that are to belong to the class.\n\nClass-default: In addition to user defined classes, \na pre-existing class named 'class-default' exists to \nrepresent all packets that do not match any of the user \ndefined classes. This class-default exists so that \npolicies can be defined for this group of packets that \ndo not match any user defined classes.\n\nActions are individual policies (e.g.: policing) that \ncan be applied to a traffic class.\n\nA policy represents a set of actions that are to be \napplied to a set of traffic classes. The policy is \nassociated with a target (like a port) and the direction \nof traffic on that target to which the policy is to be \napplied.\n\nA hierarchical policy is one in which an entire policy \nis directly assigned to a class of traffic. Thus, a \nhierarchical policy is a nested policy that contains \na set of the pair of a child-policy and the \ntraffic-class to which it is applied.\n\nDSCP (Differentiated Services Code Point) is the six \nmost significant bits of the ToS field in a IP packet \nheader.\n\nCoS (Class of Service) is the three bits in the layer 2 \nheader that indicates user priority value assigned to \nthis packet. \n\nThis MIB module also provides per port QoS statistics.")
ciscoPortQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 1))
cportQosRLConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 1))
cportQosRLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 1, 1))
if mibBuilder.loadTexts: cportQosRLConfigTable.setDescription("A table of rate limit configuration entries.\nRate Limiting is a method of traffic control. It allows    \na set of rate limits to be configured and applied to    \npackets flowing into/out of an interface to regulate    \nnetwork traffic.")
cportQosRLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosRLConfigDirection"))
if mibBuilder.loadTexts: cportQosRLConfigEntry.setDescription("A collection of rate-limit configuration\nobjects for a particular interface. Entries     \nin the cportQosRLConfigTable are created and     \ndeleted by non-SNMP methods. Creation of these    \nentries is dependent upon configuration of a     \nphysical interface. Further, the physical     \ninterfaces which are configured for port-qos,    \ncan only have these entries.    \n\nThe ifIndex in the INDEX clause identifies the    \ninterface number for a physical interface.")
cportQosRLConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 1, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("input", 1), ("output", 2), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosRLConfigDirection.setDescription("The direction in which the rate-limit is applied\nto packet:    \n        input  statistics of the input packets.    \n        output statistics of the output packets.")
cportQosRLConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cportQosRLConfigEnable.setDescription("This indicates the rate-limit is enabled or disabled.\nA value of true(1) indicates the rate-limit is enabled    \nand a value of false(2) indicates it's disabled.    \nWriting a value of true(1) to this object also     \nrequires writing a valid value to the      \ncportQosRLConfigRate at the same time.     \nWriting to cportQosRLConfigBurstSize is optional.")
cportQosRLConfigRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32000, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cportQosRLConfigRate.setDescription("This is the sustained rate permitted by the rate\nlimit.    \nWriting to this object also requires writing a value of    \ntrue(1) to cportQosRLConfigEnable at the same time.")
cportQosRLConfigBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cportQosRLConfigBurstSize.setDescription("The burst size.  The amount of traffic, in bytes,\nin excess of the sustained rate which will be    \ninstantaneously permitted by the rate limit.    \nWriting to this object also requires writing a value     \nof true(1) to cportQosRLConfigEnable and a valid value    \nto the cportQosRLConfigRate at the same time.")
cportQosTSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 2))
cportQosTSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 2, 1))
if mibBuilder.loadTexts: cportQosTSConfigTable.setDescription("A table of traffic-shaping action configuration\nentries.")
cportQosTSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cportQosTSConfigEntry.setDescription("A collection of traffic shaping action\nconfiguration objects for a particular interface.    \nEntries in the cportQosTSConfigTable are created    \nand deleted by non-SNMP methods. Creation of these    \nentries is dependent upon configuration of a    \nphysical interface. Further, the physical interfaces    \nwhich are configured for port-qos, can only have     \nthese entries.    \n\nThe ifIndex in the INDEX clause identifies the    \ninterface number for a physical interface.")
cportQosTSConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cportQosTSConfigEnable.setDescription("This indicates the traffic shaping is enabled or\ndisabled. A value of true(1) indicates the traffic    \nshaping is enabled and a value of false(2) indicates     \nit's disabled.    \nWriting a value of true(1) to this object also     \nrequires writing a valid value to the      \ncportQosTSConfigRate at the same time.     \nWriting to cportQosTSConfigBurstSize is optional.")
cportQosTSConfigRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32000, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cportQosTSConfigRate.setDescription("This is the sustained rate permitted by the\ntraffic shaping. Writing to this object also    \nrequires writing a value of true(1) to     \ncportQosTSConfigEnable at the same time.")
cportQosTSConfigBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cportQosTSConfigBurstSize.setDescription("The amount of traffic, in bits, in excess\nof the sustained traffic shaping rate that    \nwill be instantaneously permitted by this feature.    \nWriting to this object also requires writing a value     \nof true(1) to cportQosTSConfigEnable and a valid value    \nto the cportQosTSConfigRate at the same time.")
cportQosStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3))
cportQosIndexType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("none", 1), ("dscp", 2), ("ipPrecedence", 3), ("cos", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosIndexType.setDescription("This object specifies the sorting mechanism used to\ncollect and store the statistical QoS information.      \nThis object value is device dependent and it could be    \noptionally configured via command-line.    \n\nThis object has been deprecated in order to make the    \nselection of sorting mechanism selectable from the    \nMIB. The replacement object is cportQosIndexTypeNew.")
cportQosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2))
if mibBuilder.loadTexts: cportQosStatsTable.setDescription("This table specifies QoS port related Statistical\ninformation.")
cportQosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosDirection"), (0, "CISCO-PORT-QOS-MIB", "cportQosIndex"))
if mibBuilder.loadTexts: cportQosStatsEntry.setDescription("Each entry in this table describes the QoS port\nstatistical information which are : pre/post policy     \npkts/octets counts, drop pkts/octets,     \nclassified pkts/octets.")
cportQosDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("ingress", 1), ("egress", 2), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosDirection.setDescription("The direction of the reported statistics:\n-'ingress' statistics for the input direction.    \n-'egress' statistics for the output direction.")
cportQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 2), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosIndex.setDescription("An arbitrary integer to identify this entry.\ncportQosIndex value, which may have non-contiguous    \nrange, is linked to cportQosIndexType:    \n\n -if cportQosIndexTypeNew equals 'none', cportQosIndex     \n  is constant with the value of 1 and all statistics    \n  are classified per port    \n\n -if cportQosIndexTypeNew equals 'DSCP', cportQosIndex    \n  range is from 1 to 65 and all statistics are    \n  classified per port and DSCP value.  The range    \n  of DSCP values reported is shifted up one meaning     \n  a cportQosIndex of 1 translates to a packet DSCP    \n  value of 0.    \n  Value of 65 is an arbitrary number used to report    \n  aggregate counts of packets which were not displayed    \n  in the 1 to 64 range.  This usually happens when the    \n  range value of cportQosIndex is non-contiguous    \n\n -if cportQosIndexTypeNew equals 'ipPrecedence',     \n  cportQosIndex range is from 1 to 8 and all    \n  statistics are classified per port and IP precedence    \n  value.  The range of IP precedence values reported    \n  is shifted up one meaning a cportQosIndex of 1    \n  translates to an IP precedence value of 0    \n\n -if cportQosIndexTypeNew equals 'cos',     \n  cportQosIndex range is from 1 to 8 and all    \n  statistics are classified per interface and L2 COS    \n  value.  The range of COS values reported    \n  is shifted up one meaning a cportQosIndex of 1    \n  translates to a COS value of 0    \n\n -if cportQosIndexTypeNew equals 'police',     \n  cportQosIndex range is from 1 to 65 and all    \n  statistics are classified per interface and police    \n  index.     \n  The police indexes are arbitrary numbers that do    \n  not correlate to policers names or identifiers.")
cportQosPrePolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPrePolicyPkts.setDescription("The count of packets prior to executing any QoS\npolicies.")
cportQosPrePolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPrePolicyOctets.setDescription("The count of octets prior to executing any QoS\npolicies.")
cportQosPostPolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPostPolicyPkts.setDescription("The count of packets after executing QoS policies.")
cportQosPostPolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPostPolicyOctets.setDescription("The count of octets after executing QoS policies.")
cportQosDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosDropPkts.setDescription("The count of dropped packets as the result of\nqueuing and scheduling related QoS features that    \ncan produce drops.")
cportQosDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosDropOctets.setDescription("The count of dropped octets as the result of\nqueuing and scheduling related QoS features that    \ncan produce drops.")
cportQosClassifiedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassifiedOctets.setDescription("The count of classified octets during QoS.")
cportQosClassifiedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassifiedPkts.setDescription("The count of classified packets during QoS.")
cportQosNoChangePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosNoChangePkts.setDescription("The count of packets maintain unchange after\nexecuting QoS policies.")
cportQosNoChangeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosNoChangeOctets.setDescription("The count of octets maintain unchange after\nexecuting QoS policies.")
cportQosInProfPolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosInProfPolicyPkts.setDescription("The count of packets that are within the policer\nprofile limit configured for this policy.")
cportQosOutOfProfPolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosOutOfProfPolicyPkts.setDescription("The count of packets that exceed the policer\nprofile limit configured for this policy.")
cportQosInProfPolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosInProfPolicyOctets.setDescription("The count of octets that are within the policer\nprofile limit configured for this policy.")
cportQosOutOfProfPolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosOutOfProfPolicyOctets.setDescription("The count of octets that exceed the policer\nprofile limit configured for this policy.")
cportQosViolateProfPolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosViolateProfPolicyPkts.setDescription("The count of packets that violate the policer\nprofile limit configured for this policy.")
cportQosViolateProfPolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosViolateProfPolicyOctets.setDescription("The count of octets that violate the policer\nprofile limit configured for this policy.")
cportQosIndexTypeNew = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,4,2,3,)).subtype(namedValues=NamedValues(("none", 1), ("dscp", 2), ("ipPrecedence", 3), ("cos", 4), ("police", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cportQosIndexTypeNew.setDescription("This object specifies the sorting mechanism used to\ncollect and store the statistical QoS information.      \nThis object value is device dependent.")
cportQosInVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4))
if mibBuilder.loadTexts: cportQosInVlanStatsTable.setDescription("This table specifies QoS port related ingress\nstatistical information. The type of information     \nis controlled by the cportQosIndexTypeNew object.")
cportQosInVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-VTP-MIB", "vtpVlanIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosIndex"))
if mibBuilder.loadTexts: cportQosInVlanStatsEntry.setDescription("It exists an entry in this table for each port\non which QoS is configured per port and per VLAN.")
cportQosVlanInProfPolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosVlanInProfPolicyPkts.setDescription("The count of packets that are within the policer\nprofile limit configured for this policy.")
cportQosVlanOutOfProfPolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosVlanOutOfProfPolicyPkts.setDescription("The count of packets that exceeds the policer\nprofile limit configured for this policy.")
cportQosVlanInProfPolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosVlanInProfPolicyOctets.setDescription("The count of octets that are within the policer\nprofile limit configured for this policy.")
cportQosVlanOutOfProfPolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosVlanOutOfProfPolicyOctets.setDescription("The count of octets that exceed the policer\nprofile limit configured for this policy.")
cportQosVlanViolateProfPolicyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosVlanViolateProfPolicyPkts.setDescription("The count of packets that violate the policer\nprofile limit configured for this policy.")
cportQosVlanViolateProfPolicyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosVlanViolateProfPolicyOctets.setDescription("The count of octets that violate the policer\nprofile limit configured for this policy.")
cportQosEgressQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 5))
if mibBuilder.loadTexts: cportQosEgressQueueStatsTable.setDescription("This table specifies QoS related statistical\ninformation for egress queues on each port.   \nThe agent will add an entry in this table for each \nqueue, threshold and port.")
cportQosEgressQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosQueueId"), (0, "CISCO-PORT-QOS-MIB", "cportQosQueueThreshold"))
if mibBuilder.loadTexts: cportQosEgressQueueStatsEntry.setDescription("A conceptual row in cportQosEgressQueueStatsTable.")
cportQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosQueueId.setDescription("This object identifies the queue ID of this port for\nwhich QoS statistics are collected. \n\nFor example, if a port has 4 queues, this index value\ncan be 1,2,3,4.")
cportQosQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosQueueThreshold.setDescription("This object identifies the threshold number \nof the queue threshold associated with this\nqueue. A queue can have more than one threshold.\n\nFor example, if a queue has 3 thresholds, this index\ncould be 1,2,3.")
cportQosQueueEnqueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosQueueEnqueuePkts.setDescription("This object indicates the number of egress packets\nthat have been enqueued for this queue and threshold.")
cportQosQueueDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosQueueDropPkts.setDescription("This object indicates the number of egress packets\nthat have been dropped for this queue and threshold.")
cportQosClassEgressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6))
if mibBuilder.loadTexts: cportQosClassEgressStatsTable.setDescription("This table specifies egress QoS related statistical\ninformation for classes associated with an egress QoS \npolicy. Each queue on a port is uniquely mapped to a  \nclass in an egress QoS policy. This table provides \nthe statistical information for each class-queue\non each port. \n\nThe agent will add an entry in this table for each \nqueue and threshold on a port associated with a class.")
cportQosClassEgressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosClassId"), (0, "CISCO-PORT-QOS-MIB", "cportQosClassThreshold"))
if mibBuilder.loadTexts: cportQosClassEgressStatsEntry.setDescription("A conceptual row in cportQosClassEgressStatsTable.")
cportQosClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosClassId.setDescription("This object identifies the class-ID of the class in\nan egress policy for which QoS statistics are being \ncollected.\n\nEach queue on a port is uniquely mapped to a class \nin an egress policy. Each class in a policy is \nuniquely identified by a class-ID. A value of 0 \nindicates the default queue/class-default.")
cportQosClassThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosClassThreshold.setDescription("This object identifies the tail-drop queue thresholds\nvalue on a class-queue on a port. These values can\neither be the default value or each could be an \nexplicitly configured value. \n\nFor example, if a queue has 3 thresholds, 16, 64 and 256, \nthis index value for each threshold would be 16, 64, \n256 respectively.")
cportQosClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassName.setDescription("This object indicates the class name that is associated\nwith the class-ID indicated by the cportQosClassId \nobject.")
cportQosClassEnqueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassEnqueuePkts.setDescription("This object indicates the number of egress packets\nthat have been enqueued for this queue and threshold.")
cportQosClassDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassDropPkts.setDescription("This object indicates the number of egress packets\nthat have been dropped for this queue and threshold.")
cportQosClassDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 6, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\nat which any of this entry's counter experienced a \ndiscontinuity. If discontinuities have not occurred \nsince the last re-initialization of the local \nmanagement subsystem, then this object contains a \nzero value.")
cportQosClassIngressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7))
if mibBuilder.loadTexts: cportQosClassIngressStatsTable.setDescription("This table specifies QoS related statistical\ninformation per port for ingress traffic belonging to\nQoS classes configured with an action that support\nstatistics (for example: a policer).")
cportQosClassIngressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosClassIdLevel1"), (0, "CISCO-PORT-QOS-MIB", "cportQosClassIdLevel2"))
if mibBuilder.loadTexts: cportQosClassIngressStatsEntry.setDescription("A conceptual row in cportQosClassIngressStatsTable.\nAn entry is added per port for ingress traffic belonging\nto QoS classes, indicated by cportQosClassIdLevel1 and\ncportQosClassIdLevel2, configured with an action that\nsupports statistics.")
cportQosClassIdLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosClassIdLevel1.setDescription("This object identifies the class-ID of a class at the\nfirst (highest) level of a hierarchical policy. A value\nof  0 indicates class default. For a non-hierarchical\npolicy, the value of this object is always 0.")
cportQosClassIdLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosClassIdLevel2.setDescription("This object identifies the class-ID of a class at the\nsecond level of a hierarchical policy, or at the first\n(only) level in a non-hierarchical policy. For a two \nlevel policy, this object identifies the class-ID at the  \nsecond level of the policy. For a non-hierarchical/\nsingle level policy this object identifies the class-ID\nof a class at the first (only) level of the policy. A\nvalue of 0 indicates class default.")
cportQosClassNameLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassNameLevel1.setDescription("This object indicates the class name that is associated\nwith the class-ID indicated by the cportQosClassIdLevel1 \nobject.")
cportQosClassNameLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosClassNameLevel2.setDescription("This object indicates the class name that is associated\nwith the class-ID indicated by the cportQosClassIdLevel2 \nobject.")
cportQosPoliceConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceConformPkts.setDescription("This object indicates the number of ingress packets\nthat conforms to the policing rate for traffic belonging \nto the classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceConformOctets.setDescription("This object indicates the number of ingress octets\nthat conforms to the policing rate for traffic belonging \nto the classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceExceedPkts.setDescription("This object indicates the number of ingress packets\nthat exceeds the policing rate for traffic belonging \nto the classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceExceedOctets.setDescription("This object indicates the number of ingress octets\nthat exceeds the policing rate for traffic belonging \nto the classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceViolatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceViolatePkts.setDescription("This object indicates the number of ingress packets\nthat violates the policing rate for traffic belonging \nto the classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceViolateOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceViolateOctets.setDescription("This object indicates the number of ingress octets\nthat violates the policing rate for traffic belonging \nto the classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceConformRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceConformRate.setDescription("This object indicates the rate of ingress packets\nthat conforms to the policing rate for traffic belonging\nto the classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceExceedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceExceedRate.setDescription("This object indicates the rate of ingress packets\nthat exceeds the policing for traffic belonging to\nthe classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceViolateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceViolateRate.setDescription("This object indicates the rate of ingress packets\nthat violates the policing for traffic belonging to\nthe classes indicated by the cportQosClassIdLevel1 \nand cportQosClassIdLevel2 indices.")
cportQosPoliceDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 7, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosPoliceDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\nat which any of this entry's counter experienced a \ndiscontinuity. If discontinuities have not occurred \nsince the last re-initialization of the local \nmanagement subsystem, then this object contains a \nzero value.")
cportQosDscpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 8))
if mibBuilder.loadTexts: cportQosDscpStatsTable.setDescription("This table indicates QoS related statistical\nDSCP information. The statistics are collected   \nper physical port and DSCP value.")
cportQosDscpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 8, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosDscpValue"))
if mibBuilder.loadTexts: cportQosDscpStatsEntry.setDescription("A conceptual row in cportQosDscpStatsTable. There is\nan entry in this table for each port and each DSCP  \nvalue.")
cportQosDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 8, 1, 1), Dscp()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosDscpValue.setDescription("This object identifies the DSCP value for\nincoming or outgoing packets.")
cportQosDscpIngressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosDscpIngressPkts.setDescription("This object indicates the number of ingress packets\nwhose DSCP value matched the value of the \ncportQosDscpValue object.")
cportQosDscpIngressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosDscpIngressOctets.setDescription("This object indicates the number of ingress octets\nwhose DSCP value matched the value of the \ncportQosDscpValue object.")
cportQosDscpEgressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosDscpEgressPkts.setDescription("This object indicates the number of egress packets\nwhose DSCP value matched the value of the \ncportQosDscpValue object.")
cportQosDscpEgressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosDscpEgressOctets.setDescription("This object indicates the number of egress octets\nwhose DSCP value matched the value of the \ncportQosDscpValue object.")
cportQosCosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 9))
if mibBuilder.loadTexts: cportQosCosStatsTable.setDescription("This table indicates QoS related statistical\nCOS information. The statistics are collected   \nper  physical port and COS value.")
cportQosCosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 9, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-QOS-MIB", "cportQosCosValue"))
if mibBuilder.loadTexts: cportQosCosStatsEntry.setDescription("A conceptual row in cportQosCosStatsTable. There is\nan entry in this table for each port and each COS  \nvalue.")
cportQosCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 9, 1, 1), QosLayer2Cos()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cportQosCosValue.setDescription("This object identifies the COS value for\neach received or sent packet.")
cportQosCosIngressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosCosIngressPkts.setDescription("This object indicates the number of ingress\npackets whose COS value matched the value of the \ncportQosCosValue object.")
cportQosCosIngressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosCosIngressOctets.setDescription("This object indicates the number of ingress\noctets whose COS value matched the value of the \ncportQosCosValue object.")
cportQosCosEgressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosCosEgressPkts.setDescription("This object indicates the number of egress\npackets whose COS value matched the value of the \ncportQosCosValue object.")
cportQosCosEgressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 189, 1, 3, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cportQosCosEgressOctets.setDescription("This object indicates the number of egress\noctets whose COS value matched the value of the \ncportQosCosValue object.")
ciscoPortQosMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 2))
ciscoPortQosMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 3))
ciscoPortQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1))
ciscoPortQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2))

# Augmentions

# Groups

ciscoPortQosMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 1)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosTSConfigBurstSize"), ("CISCO-PORT-QOS-MIB", "cportQosRLConfigEnable"), ("CISCO-PORT-QOS-MIB", "cportQosRLConfigBurstSize"), ("CISCO-PORT-QOS-MIB", "cportQosTSConfigRate"), ("CISCO-PORT-QOS-MIB", "cportQosTSConfigEnable"), ("CISCO-PORT-QOS-MIB", "cportQosRLConfigRate"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBGroup.setDescription("A collection of objects providing Port QoS\nfeatures.")
ciscoPortQosStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 2)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosIndexType"), ("CISCO-PORT-QOS-MIB", "cportQosPrePolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosClassifiedOctets"), ("CISCO-PORT-QOS-MIB", "cportQosPostPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDropOctets"), ("CISCO-PORT-QOS-MIB", "cportQosPrePolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDropPkts"), ("CISCO-PORT-QOS-MIB", "cportQosClassifiedPkts"), ("CISCO-PORT-QOS-MIB", "cportQosPostPolicyPkts"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroup.setDescription("A collection of objects providing per Port QoS\nstatistics.     \nReplaced by: ciscoPortQosStatsMIBGroupRev1")
ciscoPortQosStatsMIBGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 3)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosIndexType"), ("CISCO-PORT-QOS-MIB", "cportQosPrePolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosPrePolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDropPkts"), ("CISCO-PORT-QOS-MIB", "cportQosNoChangeOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDropOctets"), ("CISCO-PORT-QOS-MIB", "cportQosPostPolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosNoChangePkts"), ("CISCO-PORT-QOS-MIB", "cportQosClassifiedOctets"), ("CISCO-PORT-QOS-MIB", "cportQosPostPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosClassifiedPkts"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev1.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 4)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosPrePolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosPrePolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDropPkts"), ("CISCO-PORT-QOS-MIB", "cportQosNoChangeOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDropOctets"), ("CISCO-PORT-QOS-MIB", "cportQosOutOfProfPolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosPostPolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosNoChangePkts"), ("CISCO-PORT-QOS-MIB", "cportQosIndexTypeNew"), ("CISCO-PORT-QOS-MIB", "cportQosClassifiedOctets"), ("CISCO-PORT-QOS-MIB", "cportQosInProfPolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosPostPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosClassifiedPkts"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 5)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosVlanInProfPolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosVlanOutOfProfPolicyPkts"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp1.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 6)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosViolateProfPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosOutOfProfPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosViolateProfPolicyPkts"), ("CISCO-PORT-QOS-MIB", "cportQosInProfPolicyOctets"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp2.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 7)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosVlanViolateProfPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosVlanInProfPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosVlanOutOfProfPolicyOctets"), ("CISCO-PORT-QOS-MIB", "cportQosVlanViolateProfPolicyPkts"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp3.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 8)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosQueueEnqueuePkts"), ("CISCO-PORT-QOS-MIB", "cportQosQueueDropPkts"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp4.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 9)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosClassEnqueuePkts"), ("CISCO-PORT-QOS-MIB", "cportQosClassName"), ("CISCO-PORT-QOS-MIB", "cportQosClassDropPkts"), ("CISCO-PORT-QOS-MIB", "cportQosClassDiscontinuityTime"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp5.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 10)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosClassNameLevel2"), ("CISCO-PORT-QOS-MIB", "cportQosClassNameLevel1"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceConformOctets"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceExceedOctets"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceViolateOctets"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceDiscontinuityTime"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceConformPkts"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceViolateRate"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceExceedPkts"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceExceedRate"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceViolatePkts"), ("CISCO-PORT-QOS-MIB", "cportQosPoliceConformRate"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp6.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp7 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 11)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosDscpEgressOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDscpEgressPkts"), ("CISCO-PORT-QOS-MIB", "cportQosDscpIngressOctets"), ("CISCO-PORT-QOS-MIB", "cportQosDscpIngressPkts"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp7.setDescription("A collection of objects providing per Port QoS\nstatistics.")
ciscoPortQosStatsMIBGroupRev2Supp8 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 2, 12)).setObjects(*(("CISCO-PORT-QOS-MIB", "cportQosCosEgressOctets"), ("CISCO-PORT-QOS-MIB", "cportQosCosIngressPkts"), ("CISCO-PORT-QOS-MIB", "cportQosCosEgressPkts"), ("CISCO-PORT-QOS-MIB", "cportQosCosIngressOctets"), ) )
if mibBuilder.loadTexts: ciscoPortQosStatsMIBGroupRev2Supp8.setDescription("A collection of objects providing per Port QoS\nstatistics.")

# Compliances

ciscoPortQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1, 1)).setObjects(*(("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroup"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBCompliance.setDescription("The compliance statement for entities which\nimplement Port QoS functions on a Cisco router.")
ciscoPortQosMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1, 2)).setObjects(*(("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev1"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBComplianceRev1.setDescription("The compliance statement for entities which\nimplement Port QoS functions on a Cisco router.")
ciscoPortQosMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1, 3)).setObjects(*(("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBComplianceRev2.setDescription("The compliance statement for entities which\nimplement Port QoS functions on a Cisco router.")
ciscoPortQosMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1, 4)).setObjects(*(("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp1"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBComplianceRev3.setDescription("The compliance statement for entities which\nimplement Port QoS functions on a Cisco router.")
ciscoPortQosMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1, 5)).setObjects(*(("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp1"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp2"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosMIBGroup"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBComplianceRev4.setDescription("The compliance statement for entities which\nimplement Port QoS functions on a Cisco router.")
ciscoPortQosMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1, 6)).setObjects(*(("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp1"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp2"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosMIBGroup"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp3"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBComplianceRev5.setDescription("The compliance statement for entities which\nimplement Port QoS functions on a Cisco router.")
ciscoPortQosMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 189, 3, 1, 7)).setObjects(*(("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp1"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp2"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp3"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp4"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp5"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosMIBGroup"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp7"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp8"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2Supp6"), ("CISCO-PORT-QOS-MIB", "ciscoPortQosStatsMIBGroupRev2"), ) )
if mibBuilder.loadTexts: ciscoPortQosMIBComplianceRev6.setDescription("The compliance statement for entities which\nimplement Port QoS functions on a Cisco router.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-PORT-QOS-MIB", PYSNMP_MODULE_ID=ciscoPortQosMIB)

# Objects
mibBuilder.exportSymbols("CISCO-PORT-QOS-MIB", ciscoPortQosMIB=ciscoPortQosMIB, ciscoPortQosMIBObjects=ciscoPortQosMIBObjects, cportQosRLConfig=cportQosRLConfig, cportQosRLConfigTable=cportQosRLConfigTable, cportQosRLConfigEntry=cportQosRLConfigEntry, cportQosRLConfigDirection=cportQosRLConfigDirection, cportQosRLConfigEnable=cportQosRLConfigEnable, cportQosRLConfigRate=cportQosRLConfigRate, cportQosRLConfigBurstSize=cportQosRLConfigBurstSize, cportQosTSConfig=cportQosTSConfig, cportQosTSConfigTable=cportQosTSConfigTable, cportQosTSConfigEntry=cportQosTSConfigEntry, cportQosTSConfigEnable=cportQosTSConfigEnable, cportQosTSConfigRate=cportQosTSConfigRate, cportQosTSConfigBurstSize=cportQosTSConfigBurstSize, cportQosStatistics=cportQosStatistics, cportQosIndexType=cportQosIndexType, cportQosStatsTable=cportQosStatsTable, cportQosStatsEntry=cportQosStatsEntry, cportQosDirection=cportQosDirection, cportQosIndex=cportQosIndex, cportQosPrePolicyPkts=cportQosPrePolicyPkts, cportQosPrePolicyOctets=cportQosPrePolicyOctets, cportQosPostPolicyPkts=cportQosPostPolicyPkts, cportQosPostPolicyOctets=cportQosPostPolicyOctets, cportQosDropPkts=cportQosDropPkts, cportQosDropOctets=cportQosDropOctets, cportQosClassifiedOctets=cportQosClassifiedOctets, cportQosClassifiedPkts=cportQosClassifiedPkts, cportQosNoChangePkts=cportQosNoChangePkts, cportQosNoChangeOctets=cportQosNoChangeOctets, cportQosInProfPolicyPkts=cportQosInProfPolicyPkts, cportQosOutOfProfPolicyPkts=cportQosOutOfProfPolicyPkts, cportQosInProfPolicyOctets=cportQosInProfPolicyOctets, cportQosOutOfProfPolicyOctets=cportQosOutOfProfPolicyOctets, cportQosViolateProfPolicyPkts=cportQosViolateProfPolicyPkts, cportQosViolateProfPolicyOctets=cportQosViolateProfPolicyOctets, cportQosIndexTypeNew=cportQosIndexTypeNew, cportQosInVlanStatsTable=cportQosInVlanStatsTable, cportQosInVlanStatsEntry=cportQosInVlanStatsEntry, cportQosVlanInProfPolicyPkts=cportQosVlanInProfPolicyPkts, cportQosVlanOutOfProfPolicyPkts=cportQosVlanOutOfProfPolicyPkts, cportQosVlanInProfPolicyOctets=cportQosVlanInProfPolicyOctets, cportQosVlanOutOfProfPolicyOctets=cportQosVlanOutOfProfPolicyOctets, cportQosVlanViolateProfPolicyPkts=cportQosVlanViolateProfPolicyPkts, cportQosVlanViolateProfPolicyOctets=cportQosVlanViolateProfPolicyOctets, cportQosEgressQueueStatsTable=cportQosEgressQueueStatsTable, cportQosEgressQueueStatsEntry=cportQosEgressQueueStatsEntry, cportQosQueueId=cportQosQueueId, cportQosQueueThreshold=cportQosQueueThreshold, cportQosQueueEnqueuePkts=cportQosQueueEnqueuePkts, cportQosQueueDropPkts=cportQosQueueDropPkts, cportQosClassEgressStatsTable=cportQosClassEgressStatsTable, cportQosClassEgressStatsEntry=cportQosClassEgressStatsEntry, cportQosClassId=cportQosClassId, cportQosClassThreshold=cportQosClassThreshold, cportQosClassName=cportQosClassName, cportQosClassEnqueuePkts=cportQosClassEnqueuePkts, cportQosClassDropPkts=cportQosClassDropPkts, cportQosClassDiscontinuityTime=cportQosClassDiscontinuityTime, cportQosClassIngressStatsTable=cportQosClassIngressStatsTable, cportQosClassIngressStatsEntry=cportQosClassIngressStatsEntry, cportQosClassIdLevel1=cportQosClassIdLevel1, cportQosClassIdLevel2=cportQosClassIdLevel2, cportQosClassNameLevel1=cportQosClassNameLevel1, cportQosClassNameLevel2=cportQosClassNameLevel2, cportQosPoliceConformPkts=cportQosPoliceConformPkts, cportQosPoliceConformOctets=cportQosPoliceConformOctets, cportQosPoliceExceedPkts=cportQosPoliceExceedPkts, cportQosPoliceExceedOctets=cportQosPoliceExceedOctets, cportQosPoliceViolatePkts=cportQosPoliceViolatePkts, cportQosPoliceViolateOctets=cportQosPoliceViolateOctets, cportQosPoliceConformRate=cportQosPoliceConformRate, cportQosPoliceExceedRate=cportQosPoliceExceedRate, cportQosPoliceViolateRate=cportQosPoliceViolateRate, cportQosPoliceDiscontinuityTime=cportQosPoliceDiscontinuityTime, cportQosDscpStatsTable=cportQosDscpStatsTable, cportQosDscpStatsEntry=cportQosDscpStatsEntry, cportQosDscpValue=cportQosDscpValue, cportQosDscpIngressPkts=cportQosDscpIngressPkts, cportQosDscpIngressOctets=cportQosDscpIngressOctets, cportQosDscpEgressPkts=cportQosDscpEgressPkts, cportQosDscpEgressOctets=cportQosDscpEgressOctets, cportQosCosStatsTable=cportQosCosStatsTable, cportQosCosStatsEntry=cportQosCosStatsEntry, cportQosCosValue=cportQosCosValue, cportQosCosIngressPkts=cportQosCosIngressPkts, cportQosCosIngressOctets=cportQosCosIngressOctets, cportQosCosEgressPkts=cportQosCosEgressPkts, cportQosCosEgressOctets=cportQosCosEgressOctets, ciscoPortQosMIBNotifications=ciscoPortQosMIBNotifications, ciscoPortQosMIBConformance=ciscoPortQosMIBConformance, ciscoPortQosMIBCompliances=ciscoPortQosMIBCompliances, ciscoPortQosMIBGroups=ciscoPortQosMIBGroups)

# Groups
mibBuilder.exportSymbols("CISCO-PORT-QOS-MIB", ciscoPortQosMIBGroup=ciscoPortQosMIBGroup, ciscoPortQosStatsMIBGroup=ciscoPortQosStatsMIBGroup, ciscoPortQosStatsMIBGroupRev1=ciscoPortQosStatsMIBGroupRev1, ciscoPortQosStatsMIBGroupRev2=ciscoPortQosStatsMIBGroupRev2, ciscoPortQosStatsMIBGroupRev2Supp1=ciscoPortQosStatsMIBGroupRev2Supp1, ciscoPortQosStatsMIBGroupRev2Supp2=ciscoPortQosStatsMIBGroupRev2Supp2, ciscoPortQosStatsMIBGroupRev2Supp3=ciscoPortQosStatsMIBGroupRev2Supp3, ciscoPortQosStatsMIBGroupRev2Supp4=ciscoPortQosStatsMIBGroupRev2Supp4, ciscoPortQosStatsMIBGroupRev2Supp5=ciscoPortQosStatsMIBGroupRev2Supp5, ciscoPortQosStatsMIBGroupRev2Supp6=ciscoPortQosStatsMIBGroupRev2Supp6, ciscoPortQosStatsMIBGroupRev2Supp7=ciscoPortQosStatsMIBGroupRev2Supp7, ciscoPortQosStatsMIBGroupRev2Supp8=ciscoPortQosStatsMIBGroupRev2Supp8)

# Compliances
mibBuilder.exportSymbols("CISCO-PORT-QOS-MIB", ciscoPortQosMIBCompliance=ciscoPortQosMIBCompliance, ciscoPortQosMIBComplianceRev1=ciscoPortQosMIBComplianceRev1, ciscoPortQosMIBComplianceRev2=ciscoPortQosMIBComplianceRev2, ciscoPortQosMIBComplianceRev3=ciscoPortQosMIBComplianceRev3, ciscoPortQosMIBComplianceRev4=ciscoPortQosMIBComplianceRev4, ciscoPortQosMIBComplianceRev5=ciscoPortQosMIBComplianceRev5, ciscoPortQosMIBComplianceRev6=ciscoPortQosMIBComplianceRev6)
