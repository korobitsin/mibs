# PySNMP SMI module. Autogenerated from smidump -f python CISCO-QOS-PIB-MIB
# by libsmi2pysnmp-0.1.3 at Fri Aug 16 02:54:37 2013,
# Python version (2, 6, 6, 'final', 0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoPibToMib, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoPibToMib")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, MacAddress, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "TruthValue")

# Types

class Dscp(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,63)
    
class Percent(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,100)
    
class PolicyInstanceId(Unsigned32):
    pass

class QosInterfaceQueueType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,23,37,6,44,45,41,33,14,43,2,22,42,12,18,21,29,24,28,9,11,27,39,40,17,8,16,30,7,35,20,10,15,4,26,3,36,19,13,5,32,31,25,34,38,)
    namedValues = NamedValues(("oneQ1t", 1), ("threeQ2t", 10), ("threeQ4t", 11), ("threeQ8t", 12), ("fourQ1t", 13), ("fourQ2t", 14), ("fourQ4t", 15), ("fourQ8t", 16), ("eightQ1t", 17), ("eightQ2t", 18), ("eightQ4t", 19), ("oneQ2t", 2), ("eightQ8t", 20), ("sixteenQ1t", 21), ("sixteenQ2t", 22), ("sixteenQ4t", 23), ("sixtyfourQ1t", 24), ("sixtyfourQ2t", 25), ("sixtyfourQ4t", 26), ("oneP1Q0t", 27), ("oneP1Q4t", 28), ("oneP1Q8t", 29), ("oneQ4t", 3), ("oneP2Q1t", 30), ("oneP2Q2t", 31), ("oneP3Q1t", 32), ("oneP7Q8t", 33), ("oneP3Q8t", 34), ("sixteenQ8t", 35), ("oneP15Q8t", 36), ("oneP15Q1t", 37), ("oneP7Q1t", 38), ("oneP31Q1t", 39), ("oneQ8t", 4), ("thirtytwoQ1t", 40), ("thirtytwoQ8t", 41), ("oneP31Q8t", 42), ("oneP7Q4t", 43), ("oneP3Q4t", 44), ("oneP7Q2t", 45), ("twoQ1t", 5), ("twoQ2t", 6), ("twoQ4t", 7), ("twoQ8t", 8), ("threeQ1t", 9), )
    
class QosInterfaceTypeCapabilities(Bits):
    namedValues = NamedValues(("unspecified", 0), ("inputL2Classification", 1), ("policeByDropping", 10), ("fifo", 11), ("wrr", 12), ("wfq", 13), ("cq", 14), ("pq", 15), ("cbwfq", 16), ("tailDrop", 17), ("wred", 18), ("inputPortClassification", 19), ("inputIpClassification", 2), ("outputPortClassification", 20), ("inputUflowShaping", 21), ("inputAggregateShaping", 22), ("outputUflowShaping", 23), ("outputAggregateShaping", 24), ("pqWrr", 25), ("pqCbwfq", 26), ("outputL2Classification", 3), ("outputIpClassification", 4), ("inputUflowPolicing", 5), ("inputAggregatePolicing", 6), ("outputUflowPolicing", 7), ("outputAggregatePolicing", 8), ("policeByMarkingDown", 9), )
    
class QosLayer2Cos(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,7)
    
class QueueRange(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(16,32,2,4,8,64,3,1,)
    namedValues = NamedValues(("oneQ", 1), ("sixteenQ", 16), ("twoQ", 2), ("threeQ", 3), ("thirtyTwoQ", 32), ("fourQ", 4), ("sixtyFourQ", 64), ("eightQ", 8), )
    
class RoleCombination(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)
    
class ThresholdSetRange(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(8,0,1,2,4,)
    namedValues = NamedValues(("zeroT", 0), ("oneT", 1), ("twoT", 2), ("fourT", 4), ("eightT", 8), )
    
class Unsigned64(Counter64):
    pass


# Objects

ciscoQosPIBMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 18, 2, 1)).setRevisions(("2007-08-29 00:00","2004-05-03 00:00","2003-02-21 00:00","2002-05-02 00:00","2000-06-16 00:00","2000-05-11 00:00",))
if mibBuilder.loadTexts: ciscoQosPIBMIB.setOrganization("Cisco Systems Inc.")
if mibBuilder.loadTexts: ciscoQosPIBMIB.setContactInfo("Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\n    San Jose, CA 95134\n    USA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-wbu@cisco.com")
if mibBuilder.loadTexts: ciscoQosPIBMIB.setDescription("The Cisco QOS Policy PIB for provisioning QOS policy.")
qosPIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1))
qosPIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 1))
qosPIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2))
qosDeviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2))
qosDevicePibIncarnationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1))
if mibBuilder.loadTexts: qosDevicePibIncarnationTable.setDescription("This class contains a single policy instance that identifies\nthe current incarnation of the PIB and the PDP that installed\nthis incarnation.  The instance of this class is reported to\nthe PDP at client connect time so that the PDP can (attempt\nto) ascertain the current state of the PIB.")
qosDevicePibIncarnationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosDeviceIncarnationId"))
if mibBuilder.loadTexts: qosDevicePibIncarnationEntry.setDescription("The single policy instance of this class identifies the\ncurrent incarnation of the PIB and the PDP that installed\nthis incarnation.")
qosDeviceIncarnationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosDeviceIncarnationId.setDescription("An integer index to identify the instance of the policy class.")
qosDevicePdpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePdpName.setDescription("The name of the PDP that installed the current incarnation of\nthe PIB into the device.  By default it is the zero length\nstring.")
qosDevicePibIncarnation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePibIncarnation.setDescription("An octet string to identify the current incarnation.  It has\nmeaning to the PDP that installed the PIB and perhaps its\nstandby PDPs. By default the empty string.")
qosDevicePibTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePibTtl.setDescription("The number of seconds after a client close or TCP timeout for\nwhich the PEP continues to enforce the policy in the PIB.\nAfter this interval, the PIB is consired expired and the\ndevice no longer enforces the policy installed in the PIB.")
qosDeviceAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2))
if mibBuilder.loadTexts: qosDeviceAttributeTable.setDescription("The single instance of this class indicates specific\nattributes of the device.  These include configuration values\nsuch as the configured PDP addresses, the maximum message\nsize, and specific device capabilities.  The latter include\ninput port-based and output port-based classification and/or\npolicing, support for flow based policing, aggregate based\npolicing, traffic shaping capabilities, etc.")
qosDeviceAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosDeviceAttributeId"))
if mibBuilder.loadTexts: qosDeviceAttributeEntry.setDescription("The single instance of this class indicates specific\nattributes of the device.")
qosDeviceAttributeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosDeviceAttributeId.setDescription("An integer index to identify the instance of the policy class.")
qosDevicePepDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePepDomain.setDescription("The QoS domain that this device belongs to.  This is\nconfigured locally on the device (perhaps by some management\nprotocol such as SNMP).  By default, it is the zero-length\nstring.")
qosDevicePrimaryPdp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDevicePrimaryPdp.setDescription("The address of the PDP configured to be the primary PDP for\nthe device.")
qosDeviceSecondaryPdp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceSecondaryPdp.setDescription("The address of the PDP configured to be the secondary PDP for\nthe device.  An address of zero indicates no secondary is\nconfigured.")
qosDeviceMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceMaxMessageSize.setDescription("The maximum size message that this PEP is capable of\nreceiving in bytes.  A value of zero means that the maximum\nmessage size is unspecified (but does not mean it is\nunlimited).  A message greater than this maximum results in a\nMessageTooBig error on a 'no commit' REP.")
qosDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 2, 1, 6), Bits().subtype(namedValues=NamedValues(("unspecified", 0), ("layer2Cos", 1), ("ipPrecedence", 2), ("dscp", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDeviceCapabilities.setDescription("An enumeration of device capabilities.  Used by the PDP to\nselect policies and configuration to push to the PEP.")
qosInterfaceTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3))
if mibBuilder.loadTexts: qosInterfaceTypeTable.setDescription("This class describes the interface types of the interfaces\nthat exist on the device.  It includes the queue type, role\ncombination and capabilities of interfaces.  The PEP does not\nreport which specific interfaces have which characteristics.")
qosInterfaceTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosInterfaceTypeId"))
if mibBuilder.loadTexts: qosInterfaceTypeEntry.setDescription("An instance of this class describes a role combination for\nan interface type of an interface that exists on the device.")
qosInterfaceTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosInterfaceTypeId.setDescription("An integer index to identify the instance of the policy class.")
qosInterfaceQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 2), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceQueueType.setDescription("The interface type in terms of number of queues and\nthresholds.")
qosInterfaceTypeRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 3), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceTypeRoles.setDescription("A combination of roles on at least one interface of type\nqosInterfaceType.")
qosInterfaceTypeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 2, 3, 1, 4), QosInterfaceTypeCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosInterfaceTypeCapabilities.setDescription("An enumeration of interface capabilities.  Used by the PDP to\nselect policies and configuration to push to the PEP.")
qosDomainConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3))
qosDiffServMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1))
if mibBuilder.loadTexts: qosDiffServMappingTable.setDescription("Maps each DSCP to a marked-down DSCP.  Also maps each DSCP to\nan IP precedence and QosLayer2Cos.  When configured for the\nfirst time, all 64 entries of the table must be\nspecified. Thereafter, instances may be modified (with a\ndelete and install in a single decision) but not deleted\nunless all instances are deleted.")
qosDiffServMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosDscp"))
if mibBuilder.loadTexts: qosDiffServMappingEntry.setDescription("An instance of this class represents mappings from a DSCP.")
qosDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1, 1), Dscp()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosDscp.setDescription("A DSCP for which this entry contains mappings.")
qosMarkedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1, 2), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosMarkedDscp.setDescription("The DSCP to use instead of the qosDscp when the packet is out\nof profile and hence marked as such.")
qosL2Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 1, 1, 3), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosL2Cos.setDescription("The L2 CoS value to use when mapping this DSCP to layer 2\nCoS.")
qosCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2))
if mibBuilder.loadTexts: qosCosToDscpTable.setDescription("Maps each of eight CoS values to a DSCP.  When configured for\nthe first time, all 8 entries of the table must be\nspecified. Thereafter, instances may be modified (with a\ndelete and install in a single decision) but not deleted\nunless all instances are deleted.")
qosCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosCosToDscpCos"))
if mibBuilder.loadTexts: qosCosToDscpEntry.setDescription("An instance of this class maps a CoS value to a DSCP.")
qosCosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2, 1, 1), QosLayer2Cos()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosCosToDscpCos.setDescription("The L2 CoS value that is being mapped.")
qosCosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 3, 2, 1, 2), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCosToDscpDscp.setDescription("The DSCP value to use when mapping the L2 CoS to a DSCP.")
qosUnmatchedPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4))
qosUnmatchedPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1))
if mibBuilder.loadTexts: qosUnmatchedPolicyTable.setDescription("A policy class that specifies what QoS to apply to a packet\nthat does not match any other policy configured for this role\ncombination for a particular direction of traffic.")
qosUnmatchedPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyId"))
if mibBuilder.loadTexts: qosUnmatchedPolicyEntry.setDescription("An instance of this class specifies the unmatched policy\nfor a particular role combination for incoming or outgoing\ntraffic.")
qosUnmatchedPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosUnmatchedPolicyId.setDescription("An integer index to identify the instance of the policy class.")
qosUnmatchedPolicyRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyRole.setDescription("Role combination for which this instance applies.")
qosUnmatchedPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("in", 0), ("out", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDirection.setDescription("The direction of packet flow at the interface in question to\nwhich this instance applies.")
qosUnmatchedPolicyDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDscp.setDescription("The DSCP to classify the unmatched packet with.  This must be\nspecified even if qosUnmatchedPolicyDscpTrusted is true.")
qosUnmatchedPolicyDscpTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyDscpTrusted.setDescription("If this attribute is true, then the Dscp associated with the\npacket is trusted, i.e., it is assumed to have already been\nset.  In this case, the Dscp is not rewritten with\nqosUnmatchedPolicyDscp (qosUnmatchedPolicyDscp is ignored)\nunless this is a non-IP packet and arrives untagged.  The\npacket is still policed as part of its micro flow and its\naggregate flow.\n\nWhen a trusted action is applied to an input interface, the\nDscp (for an IP packet) or CoS (for a non-IP packet)\nassociated with the packet is the one contained in the packet.\nWhen a trusted action is applied to an output interface, the\nDscp associated with the packet is the one that is the result\nof the input classification and policing.")
qosUnmatchPolMicroFlowPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 6), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchPolMicroFlowPolicerId.setDescription("An index identifying the instance of policer to apply to\nunmatched packets.  It must correspond to the integer index of\nan instance of class qosPolicerTable or be zero.  If zero, the\nmicroflow is not policed.")
qosUnmatchedPolicyAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 4, 1, 1, 7), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUnmatchedPolicyAggregateId.setDescription("An index identifying the aggregate that the packet belongs\nto.  It must correspond to the integer index of an instance of\nclass qosAggregateTable or be zero.  If zero, the microflow\ndoes not belong to any aggregate and is not policed as part of\nany aggregate.")
qosPolicer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5))
qosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1))
if mibBuilder.loadTexts: qosPolicerTable.setDescription("A class specifying policing parameters for both microflows\nand aggregate flows.  This table is designed for policing\naccording to a token bucket scheme where an average rate and\nburst size is specified.")
qosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosPolicerId"))
if mibBuilder.loadTexts: qosPolicerEntry.setDescription("An instance of this class specifies a set of policing\nparameters.")
qosPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosPolicerId.setDescription("An integer index to identify the instance of the policy class.")
qosPolicerRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 2), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerRate.setDescription("The token rate.  It is specified in units of bit/s. A rate of\nzero means that all packets will be out of profile.  If the\nqosPolicerAction is set to drop then this effectively\ndenies any service to packets policed by this policer.")
qosPolicerNormalBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerNormalBurst.setDescription("The normal size of a burst in terms of bits.")
qosPolicerExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerExcessBurst.setDescription("The excess size of a burst in terms of bits.")
qosPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,)).subtype(namedValues=NamedValues(("drop", 0), ("mark", 1), ("shape", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicerAction.setDescription("An indication of how to handle out of profile packets.  When\nthe shape action is chosen then traffic is shaped to the rate\nspecified by qosPolicerRate.")
qosAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2))
if mibBuilder.loadTexts: qosAggregateTable.setDescription("Instances of this class identify aggregate flows and the\npolicer to apply to each.")
qosAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosAggregateId"))
if mibBuilder.loadTexts: qosAggregateEntry.setDescription("An instance of this class specifies the policer to apply to\nan aggregate flow.")
qosAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosAggregateId.setDescription("An integer index to identify the instance of the policy class.")
qosAggregatePolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 5, 2, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosAggregatePolicerId.setDescription("An index identifying the instance of policer to apply to the\naggregate.  It must correspond to the integer index of an\ninstance of class qosPolicerTable.")
qosMacQos = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6))
qosMacClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1))
if mibBuilder.loadTexts: qosMacClassificationTable.setDescription("A class of MAC/Vlan tuples and their associated CoS values.")
qosMacClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosMacClassificationId"))
if mibBuilder.loadTexts: qosMacClassificationEntry.setDescription("An instance of this class specifies the mapping of a VLAN\nand a MAC address to a CoS value.")
qosMacClassificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosMacClassificationId.setDescription("An integer index to identify the instance of the policy class.")
qosDstMacVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacVlan.setDescription("The VLAN of the destination MAC address of the L2 frame.")
qosDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacAddress.setDescription("The destination MAC address of the L2 frame.")
qosDstMacCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 6, 1, 1, 4), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDstMacCos.setDescription("The CoS to assign the packet with the associated MAC/VLAN\ntuple.  Note that this CoS is overridden by the policies to\nclassify the frame at layer 3 if there are any.")
qosIpQos = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7))
qosIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1))
if mibBuilder.loadTexts: qosIpAceTable.setDescription("ACE definitions.")
qosIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIpAceId"))
if mibBuilder.loadTexts: qosIpAceEntry.setDescription("An instance of this class specifies an ACE.")
qosIpAceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIpAceId.setDescription("An integer index to identify the instance of the policy class.")
qosIpAceDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstAddr.setDescription("The IP address to match against the packet's destination IP\naddress.")
qosIpAceDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstAddrMask.setDescription("A mask for the matching of the destination IP address.")
qosIpAceSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcAddr.setDescription("The IP address to match against the packet's source IP\naddress.")
qosIpAceSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcAddrMask.setDescription("A mask for the matching of the source IP address.")
qosIpAceDscpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 6), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDscpMin.setDescription("The minimum value that the DSCP in the packet can have and\nmatch this ACE.")
qosIpAceDscpMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 7), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDscpMax.setDescription("The maximum value that the DSCP in the packet can have and\nmatch this ACE.")
qosIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceProtocol.setDescription("The IP protocol to match against the packet's protocol.\nA value of zero means match all.")
qosIpAceDstL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstL4PortMin.setDescription("The minimum value that the packet's layer 4 dest port number\ncan have and match this ACE.")
qosIpAceDstL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceDstL4PortMax.setDescription("The maximum value that the packet's layer 4 dest port number\ncan have and match this ACE.")
qosIpAceSrcL4PortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcL4PortMin.setDescription("The minimum value that the packet's layer 4 source port\nnumber can have and match this ACE.")
qosIpAceSrcL4PortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceSrcL4PortMax.setDescription("The maximum value that the packet's layer 4 source port\nnumber can have and match this ACE.")
qosIpAcePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAcePermit.setDescription("If the packet matches this ACE and the value of this attribute\nis true, then the matching process terminates and the QoS\nassociated with this ACE (indirectly through the ACL) is\napplied to the packet.  If the value of this attribute is false,\nthen no more ACEs in this ACL are compared to this packet and\nmatching continues with the first ACE of the next ACL.")
qosIpAclDefinitionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2))
if mibBuilder.loadTexts: qosIpAclDefinitionTable.setDescription("A class that defines a set of ACLs each being an ordered list\nof ACEs.")
qosIpAclDefinitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIpAclDefinitionId"))
if mibBuilder.loadTexts: qosIpAclDefinitionEntry.setDescription("An instance of this class specifies an ACE in an ACL and its\norder with respect to other ACEs in the same ACL.")
qosIpAclDefinitionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIpAclDefinitionId.setDescription("An integer index to identify the instance of the policy class.")
qosIpAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclId.setDescription("An index for this ACL.  There will be one instance of\npolicy class qosIpAclDefinition with this integer index for\neach ACE in the ACL per role combination.")
qosIpAceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAceOrder.setDescription("An integer that determines the position of this ACE in the ACL.\nAn ACE with a given order is positioned in the access contol\nlist before one with a higher order.")
qosIpAclDefAceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 2, 1, 4), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDefAceId.setDescription("This attribute specifies the ACE in the qosIpAceTable that is\nin the ACL specified by qosIpAclId at the position specified\nby qosIpAceOrder.")
qosIpAclActionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3))
if mibBuilder.loadTexts: qosIpAclActionTable.setDescription("A class that applies a set of ACLs to interfaces specifying,\nfor each interface the order of the ACL with respect to other\nACLs applied to the same interface and, for each ACL the\naction to take for a packet that matches a permit ACE in that\nACL.  Interfaces are specified abstractly in terms of\ninterface role combinations.")
qosIpAclActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIpAclActionId"))
if mibBuilder.loadTexts: qosIpAclActionEntry.setDescription("An instance of this class applies an ACL to traffic in a\nparticular direction on an interface with a particular role\ncombination, and specifies the action for packets which match\nthe ACL.")
qosIpAclActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIpAclActionId.setDescription("An integer index to identify the instance of the policy class.")
qosIpAclActAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 2), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclActAclId.setDescription("The ACL associated with this action.")
qosIpAclInterfaceRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 3), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclInterfaceRoles.setDescription("The interfaces to which this ACL applies specified in terms\nof a set of roles.")
qosIpAclInterfaceDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("in", 0), ("out", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclInterfaceDirection.setDescription("The direction of packet flow at the interface in question to\nwhich this ACL applies.")
qosIpAclOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclOrder.setDescription("An integer that determines the order of this ACL in the list\nof ACLs applied to interfaces of the specified role\ncombination. An ACL with a given order is positioned in the\nlist before one with a higher order.")
qosIpAclDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 6), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDscp.setDescription("The DSCP to classify the packet with in the event that the\npacket matches an ACE in this ACL and the ACE is a permit.")
qosIpAclDscpTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclDscpTrusted.setDescription("If this attribute is true, then the Dscp associated with\nthe packet is trusted, i.e., it is assumed to have already\nbeen set.  In this case, the Dscp is not rewritten with\nqosIpAclDscp (qosIpAclDscp is ignored).  The packet is still\npoliced as part of its micro flow and its aggregate flow.\n\nWhen a trusted action is applied to an input interface, the\nDscp associated with the packet is the one contained in the\npacket.  When a trusted action is applied to an output\ninterface, the Dscp associated with the packet is the one that\nis the result of the input classification and policing.")
qosIpAclMicroFlowPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 8), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclMicroFlowPolicerId.setDescription("An index identifying the instance of policer to apply to the\nmicroflow.  It must correspond to the integer index of an\ninstance of class qosPolicerTableor be zero.  If zero, the\nmicroflow is not policed.")
qosIpAclAggregateId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 7, 3, 1, 9), PolicyInstanceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIpAclAggregateId.setDescription("An index identifying the aggregate that the packet belongs\nto.  It must correspond to the integer index of an instance of\nclass qosAggregateTable or be zero.  If zero, the microflow\ndoes not belong to any aggregate and is not policed as part of\nany aggregate.")
qosIfParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8))
qosIfSchedulingPreferencesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1))
if mibBuilder.loadTexts: qosIfSchedulingPreferencesTable.setDescription("This class specifies the scheduling preference an interface\nchooses if it supports multiple scheduling types.  Higher\nvalues are preferred over lower values.")
qosIfSchedulingPreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfSchedulingPreferenceId"))
if mibBuilder.loadTexts: qosIfSchedulingPreferenceEntry.setDescription("An instance of this class specifies a scheduling preference\nfor a queue-type on an interface with a particular role\ncombination.")
qosIfSchedulingPreferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIfSchedulingPreferenceId.setDescription("An integer index to identify the instance of the policy class.")
qosIfSchedulingRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingRoles.setDescription("The combination of roles the interface must have for this\npolicy instance to apply to that interface.")
qosIfSchedulingPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingPreference.setDescription("The preference to use this scheduling discipline and queue\ntype.  A higher value means a higher preference.  If two\ndisciplines have the same preference the choice is a local\ndecision.")
qosIfSchedulingDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(8,1,2,5,4,3,7,6,)).subtype(namedValues=NamedValues(("weightedFairQueueing", 1), ("weightedRoundRobin", 2), ("customQueueing", 3), ("priorityQueueing", 4), ("classBasedWFQ", 5), ("fifo", 6), ("pqWrr", 7), ("pqCbwfq", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingDiscipline.setDescription("An enumerate type for all the known scheduling disciplines.")
qosIfSchedulingQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 1, 1, 5), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfSchedulingQueueType.setDescription("The queue type of this preference.")
qosIfDropPreferenceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2))
if mibBuilder.loadTexts: qosIfDropPreferenceTable.setDescription("This class specifies the preference of the drop mechanism an\ninterface chooses if it supports multiple drop mechanisms.\nHigher values are preferred over lower values.")
qosIfDropPreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfDropPreferenceId"))
if mibBuilder.loadTexts: qosIfDropPreferenceEntry.setDescription("An instance of this class specifies a drop preference for\na drop mechanism on an interface with a particular role\ncombination.")
qosIfDropPreferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIfDropPreferenceId.setDescription("An integer index to identify the instance of the policy class.")
qosIfDropRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropRoles.setDescription("The combination of roles the interface must have for this\npolicy instance to apply to that interface.")
qosIfDropPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropPreference.setDescription("The preference to use this drop mechanism.  A higher value\nmeans a higher preference.  If two mechanisms have the same\npreference the choice is a local decision.")
qosIfDropDiscipline = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("qosIfDropWRED", 1), ("qosIfDropTailDrop", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDropDiscipline.setDescription("An enumerate type for all the known drop mechanisms.")
qosIfDscpAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3))
if mibBuilder.loadTexts: qosIfDscpAssignmentTable.setDescription("The assignment of each DSCP to a queue and threshold for each\ninterface queue type.")
qosIfDscpAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfDscpAssignmentId"))
if mibBuilder.loadTexts: qosIfDscpAssignmentEntry.setDescription("An instance of this class specifies the queue and threshold\nset for a packet with a particular DSCP on an interface of\na particular type with a particular role combination.")
qosIfDscpAssignmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIfDscpAssignmentId.setDescription("An integer index to identify the instance of the policy class.")
qosIfDscpRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDscpRoles.setDescription("The role combination the interface must be configured with.")
qosIfQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 3), QosInterfaceQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfQueueType.setDescription("The interface queue type to which this row applies.")
qosIfDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 4), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfDscp.setDescription("The DSCP to which this row applies.")
qosIfQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfQueue.setDescription("The queue to which the DSCP applies for the given interface\ntype.")
qosIfThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfThresholdSet.setDescription("The threshold set of the specified queue to which the DSCP\napplies for the given interface type.")
qosIfRedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4))
if mibBuilder.loadTexts: qosIfRedTable.setDescription("A class of lower and upper values for each threshold set in a\nqueue supporting WRED.  If the size of the queue for a given\nthreshold is below the lower value then packets assigned to\nthat threshold are always accepted into the queue.  If the\nsize of the queue is above upper value then packets are always\ndropped.  If the size of the queue is between the lower and\nthe upper then packets are randomly dropped.")
qosIfRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfRedId"))
if mibBuilder.loadTexts: qosIfRedEntry.setDescription("An instance of this class specifies threshold limits for a\nparticular RED threshold of a given threshold set on an\ninterface and with a particular role combination.")
qosIfRedId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIfRedId.setDescription("An integer index to identify the instance of the policy class.")
qosIfRedRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedRoles.setDescription("The role combination the interface must be configured with.")
qosIfRedNumThresholdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 3), ThresholdSetRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedNumThresholdSets.setDescription("The values in this entry apply only to queues with the number\nof thresholds specified by this attribute.")
qosIfRedThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSet.setDescription("The threshold set to which the lower and upper values apply.\nIt must be in the range 1 through qosIfRedNumThresholdSets.\nThere must be exactly one PRI for each value in this range.")
qosIfRedThresholdSetLower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 5), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSetLower.setDescription("The threshold value below which no packets are dropped.")
qosIfRedThresholdSetUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 4, 1, 6), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfRedThresholdSetUpper.setDescription("The threshold value above which all packets are dropped.")
qosIfTailDropTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5))
if mibBuilder.loadTexts: qosIfTailDropTable.setDescription("A class for threshold sets in a queue supporting tail drop.\nIf the size of the queue for a given threshold set is at or\nbelow the specified value then packets assigned to that\nthreshold set are always accepted into the queue.  If the size\nof the queue is above the specified value then packets are\nalways dropped.")
qosIfTailDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfTailDropId"))
if mibBuilder.loadTexts: qosIfTailDropEntry.setDescription("An instance of this class specifies the queue depth for a\nparticular tail-drop threshold set on an interface with a\nparticular role combination.")
qosIfTailDropId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIfTailDropId.setDescription("An integer index to identify the instance of the policy class.")
qosIfTailDropRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropRoles.setDescription("The role combination the interface must be configured with.")
qosIfTailDropNumThresholdSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 3), ThresholdSetRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropNumThresholdSets.setDescription("The value in this entry applies only to queues with the\nnumber of thresholds specified by this attribute.")
qosIfTailDropThresholdSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropThresholdSet.setDescription("The threshold set to which the threshold value applies")
qosIfTailDropThresholdSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 5, 1, 5), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfTailDropThresholdSetValue.setDescription("The threshold value above which packets are dropped.")
qosIfWeightsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6))
if mibBuilder.loadTexts: qosIfWeightsTable.setDescription("A class of scheduling weights for each queue of an interface\nthat supports weighted round robin scheduling or a mix of\npriority queueing and weighted round robin.  For a queue with\nN priority queues, the N highest queue numbers are the\npriority queues with the highest queue number having the\nhighest priority.  WRR is applied to the non-priority queues.")
qosIfWeightsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1)).setIndexNames((0, "CISCO-QOS-PIB-MIB", "qosIfWeightsId"))
if mibBuilder.loadTexts: qosIfWeightsEntry.setDescription("An instance of this class specifies the scheduling weight for\na particular queue of an interface with a particular number\nof queues and with a particular role combination.")
qosIfWeightsId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 1), PolicyInstanceId()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: qosIfWeightsId.setDescription("An integer index to identify the instance of the policy class.")
qosIfWeightsRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 2), RoleCombination()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsRoles.setDescription("The role combination the interface must be configured with.")
qosIfWeightsNumQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 3), QueueRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsNumQueues.setDescription("The value of the weight in this instance applies only to\ninterfaces with the number of queues specified by this\nattribute.")
qosIfWeightsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsQueue.setDescription("The queue to which the weight applies.")
qosIfWeightsDrainSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsDrainSize.setDescription("The maximum number of bytes that may be drained from the\nqueue in one cycle.  The percentage of the bandwith allocated\nto this queue can be calculated from this attribute and the\nsum of the drain sizes of all the non-priority queues of the\ninterface.")
qosIfWeightsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 8, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfWeightsQueueSize.setDescription("The size of the queue in bytes.  Some devices set queue size\nin terms of packets.  These devices must calculate the queue\nsize in packets by assuming an average packet size suitable\nfor the particular interface.\n\nSome devices have a fixed size buffer to be shared among all\nqueues.  These devices must allocate a fraction of the\ntotal buffer space to this queue calculated as the the ratio\nof the queue size to the sum of the queue sizes for the\ninterface.")

# Augmentions

# Groups

qosDevicePibIncarnationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 1)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosDevicePibIncarnation"), ("CISCO-QOS-PIB-MIB", "qosDevicePdpName"), ("CISCO-QOS-PIB-MIB", "qosDevicePibTtl"), ) )
if mibBuilder.loadTexts: qosDevicePibIncarnationTableGroup.setDescription("")
qosDeviceAttributeTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 2)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosDevicePepDomain"), ("CISCO-QOS-PIB-MIB", "qosDeviceCapabilities"), ("CISCO-QOS-PIB-MIB", "qosDevicePrimaryPdp"), ("CISCO-QOS-PIB-MIB", "qosDeviceMaxMessageSize"), ("CISCO-QOS-PIB-MIB", "qosDeviceSecondaryPdp"), ) )
if mibBuilder.loadTexts: qosDeviceAttributeTableGroup.setDescription("")
qosInterfaceTypeTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 3)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosInterfaceQueueType"), ("CISCO-QOS-PIB-MIB", "qosInterfaceTypeCapabilities"), ("CISCO-QOS-PIB-MIB", "qosInterfaceTypeRoles"), ) )
if mibBuilder.loadTexts: qosInterfaceTypeTableGroup.setDescription("")
qosDiffServMappingTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 4)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosMarkedDscp"), ("CISCO-QOS-PIB-MIB", "qosL2Cos"), ) )
if mibBuilder.loadTexts: qosDiffServMappingTableGroup.setDescription("")
qosCosToDscpTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 5)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosCosToDscpDscp"), ) )
if mibBuilder.loadTexts: qosCosToDscpTableGroup.setDescription("")
qosUnmatchedPolicyTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 6)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyAggregateId"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyDscpTrusted"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyDscp"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyDirection"), ("CISCO-QOS-PIB-MIB", "qosUnmatchPolMicroFlowPolicerId"), ("CISCO-QOS-PIB-MIB", "qosUnmatchedPolicyRole"), ) )
if mibBuilder.loadTexts: qosUnmatchedPolicyTableGroup.setDescription("")
qosPolicerTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 7)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosPolicerNormalBurst"), ("CISCO-QOS-PIB-MIB", "qosPolicerAction"), ("CISCO-QOS-PIB-MIB", "qosPolicerRate"), ("CISCO-QOS-PIB-MIB", "qosPolicerExcessBurst"), ) )
if mibBuilder.loadTexts: qosPolicerTableGroup.setDescription("")
qosAggregateTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 8)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosAggregatePolicerId"), ) )
if mibBuilder.loadTexts: qosAggregateTableGroup.setDescription("")
qosMacClassificationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 9)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosDstMacAddress"), ("CISCO-QOS-PIB-MIB", "qosDstMacCos"), ("CISCO-QOS-PIB-MIB", "qosDstMacVlan"), ) )
if mibBuilder.loadTexts: qosMacClassificationTableGroup.setDescription("")
qosIpAceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 10)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIpAceDstAddrMask"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcL4PortMax"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcAddrMask"), ("CISCO-QOS-PIB-MIB", "qosIpAceProtocol"), ("CISCO-QOS-PIB-MIB", "qosIpAceDscpMax"), ("CISCO-QOS-PIB-MIB", "qosIpAceDstL4PortMax"), ("CISCO-QOS-PIB-MIB", "qosIpAceDscpMin"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcL4PortMin"), ("CISCO-QOS-PIB-MIB", "qosIpAceDstAddr"), ("CISCO-QOS-PIB-MIB", "qosIpAceDstL4PortMin"), ("CISCO-QOS-PIB-MIB", "qosIpAcePermit"), ("CISCO-QOS-PIB-MIB", "qosIpAceSrcAddr"), ) )
if mibBuilder.loadTexts: qosIpAceTableGroup.setDescription("")
qosIpAclDefinitionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 11)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIpAceOrder"), ("CISCO-QOS-PIB-MIB", "qosIpAclId"), ("CISCO-QOS-PIB-MIB", "qosIpAclDefAceId"), ) )
if mibBuilder.loadTexts: qosIpAclDefinitionTableGroup.setDescription("")
qosIpAclActionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 12)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIpAclInterfaceRoles"), ("CISCO-QOS-PIB-MIB", "qosIpAclOrder"), ("CISCO-QOS-PIB-MIB", "qosIpAclDscp"), ("CISCO-QOS-PIB-MIB", "qosIpAclAggregateId"), ("CISCO-QOS-PIB-MIB", "qosIpAclMicroFlowPolicerId"), ("CISCO-QOS-PIB-MIB", "qosIpAclDscpTrusted"), ("CISCO-QOS-PIB-MIB", "qosIpAclInterfaceDirection"), ("CISCO-QOS-PIB-MIB", "qosIpAclActAclId"), ) )
if mibBuilder.loadTexts: qosIpAclActionTableGroup.setDescription("")
qosIfSchedulingPreferencesTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 13)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIfSchedulingQueueType"), ("CISCO-QOS-PIB-MIB", "qosIfSchedulingPreference"), ("CISCO-QOS-PIB-MIB", "qosIfSchedulingRoles"), ("CISCO-QOS-PIB-MIB", "qosIfSchedulingDiscipline"), ) )
if mibBuilder.loadTexts: qosIfSchedulingPreferencesTableGroup.setDescription("")
qosIfDropPreferenceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 14)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIfDropDiscipline"), ("CISCO-QOS-PIB-MIB", "qosIfDropPreference"), ("CISCO-QOS-PIB-MIB", "qosIfDropRoles"), ) )
if mibBuilder.loadTexts: qosIfDropPreferenceTableGroup.setDescription("")
qosIfDscpAssignmentTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 15)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIfQueue"), ("CISCO-QOS-PIB-MIB", "qosIfDscpRoles"), ("CISCO-QOS-PIB-MIB", "qosIfThresholdSet"), ("CISCO-QOS-PIB-MIB", "qosIfQueueType"), ("CISCO-QOS-PIB-MIB", "qosIfDscp"), ) )
if mibBuilder.loadTexts: qosIfDscpAssignmentTableGroup.setDescription("")
qosIfRedTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 16)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIfRedThresholdSetUpper"), ("CISCO-QOS-PIB-MIB", "qosIfRedThresholdSet"), ("CISCO-QOS-PIB-MIB", "qosIfRedNumThresholdSets"), ("CISCO-QOS-PIB-MIB", "qosIfRedThresholdSetLower"), ("CISCO-QOS-PIB-MIB", "qosIfRedRoles"), ) )
if mibBuilder.loadTexts: qosIfRedTableGroup.setDescription("")
qosIfTailDropTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 17)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIfTailDropRoles"), ("CISCO-QOS-PIB-MIB", "qosIfTailDropNumThresholdSets"), ("CISCO-QOS-PIB-MIB", "qosIfTailDropThresholdSetValue"), ("CISCO-QOS-PIB-MIB", "qosIfTailDropThresholdSet"), ) )
if mibBuilder.loadTexts: qosIfTailDropTableGroup.setDescription("")
qosIfWeightsTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 2, 18)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosIfWeightsQueueSize"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsRoles"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsQueue"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsNumQueues"), ("CISCO-QOS-PIB-MIB", "qosIfWeightsDrainSize"), ) )
if mibBuilder.loadTexts: qosIfWeightsTableGroup.setDescription("")

# Compliances

qosPIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 18, 2, 1, 1, 1, 1)).setObjects(*(("CISCO-QOS-PIB-MIB", "qosDevicePibIncarnationTableGroup"), ("CISCO-QOS-PIB-MIB", "qosDeviceAttributeTableGroup"), ("CISCO-QOS-PIB-MIB", "qosInterfaceTypeTableGroup"), ) )
if mibBuilder.loadTexts: qosPIBCompliance.setDescription("The compliance statement for the QOS Policy Derived MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-QOS-PIB-MIB", PYSNMP_MODULE_ID=ciscoQosPIBMIB)

# Types
mibBuilder.exportSymbols("CISCO-QOS-PIB-MIB", Dscp=Dscp, Percent=Percent, PolicyInstanceId=PolicyInstanceId, QosInterfaceQueueType=QosInterfaceQueueType, QosInterfaceTypeCapabilities=QosInterfaceTypeCapabilities, QosLayer2Cos=QosLayer2Cos, QueueRange=QueueRange, RoleCombination=RoleCombination, ThresholdSetRange=ThresholdSetRange, Unsigned64=Unsigned64)

# Objects
mibBuilder.exportSymbols("CISCO-QOS-PIB-MIB", ciscoQosPIBMIB=ciscoQosPIBMIB, qosPIBConformance=qosPIBConformance, qosPIBCompliances=qosPIBCompliances, qosPIBGroups=qosPIBGroups, qosDeviceConfig=qosDeviceConfig, qosDevicePibIncarnationTable=qosDevicePibIncarnationTable, qosDevicePibIncarnationEntry=qosDevicePibIncarnationEntry, qosDeviceIncarnationId=qosDeviceIncarnationId, qosDevicePdpName=qosDevicePdpName, qosDevicePibIncarnation=qosDevicePibIncarnation, qosDevicePibTtl=qosDevicePibTtl, qosDeviceAttributeTable=qosDeviceAttributeTable, qosDeviceAttributeEntry=qosDeviceAttributeEntry, qosDeviceAttributeId=qosDeviceAttributeId, qosDevicePepDomain=qosDevicePepDomain, qosDevicePrimaryPdp=qosDevicePrimaryPdp, qosDeviceSecondaryPdp=qosDeviceSecondaryPdp, qosDeviceMaxMessageSize=qosDeviceMaxMessageSize, qosDeviceCapabilities=qosDeviceCapabilities, qosInterfaceTypeTable=qosInterfaceTypeTable, qosInterfaceTypeEntry=qosInterfaceTypeEntry, qosInterfaceTypeId=qosInterfaceTypeId, qosInterfaceQueueType=qosInterfaceQueueType, qosInterfaceTypeRoles=qosInterfaceTypeRoles, qosInterfaceTypeCapabilities=qosInterfaceTypeCapabilities, qosDomainConfig=qosDomainConfig, qosDiffServMappingTable=qosDiffServMappingTable, qosDiffServMappingEntry=qosDiffServMappingEntry, qosDscp=qosDscp, qosMarkedDscp=qosMarkedDscp, qosL2Cos=qosL2Cos, qosCosToDscpTable=qosCosToDscpTable, qosCosToDscpEntry=qosCosToDscpEntry, qosCosToDscpCos=qosCosToDscpCos, qosCosToDscpDscp=qosCosToDscpDscp, qosUnmatchedPolicy=qosUnmatchedPolicy, qosUnmatchedPolicyTable=qosUnmatchedPolicyTable, qosUnmatchedPolicyEntry=qosUnmatchedPolicyEntry, qosUnmatchedPolicyId=qosUnmatchedPolicyId, qosUnmatchedPolicyRole=qosUnmatchedPolicyRole, qosUnmatchedPolicyDirection=qosUnmatchedPolicyDirection, qosUnmatchedPolicyDscp=qosUnmatchedPolicyDscp, qosUnmatchedPolicyDscpTrusted=qosUnmatchedPolicyDscpTrusted, qosUnmatchPolMicroFlowPolicerId=qosUnmatchPolMicroFlowPolicerId, qosUnmatchedPolicyAggregateId=qosUnmatchedPolicyAggregateId, qosPolicer=qosPolicer, qosPolicerTable=qosPolicerTable, qosPolicerEntry=qosPolicerEntry, qosPolicerId=qosPolicerId, qosPolicerRate=qosPolicerRate, qosPolicerNormalBurst=qosPolicerNormalBurst, qosPolicerExcessBurst=qosPolicerExcessBurst, qosPolicerAction=qosPolicerAction, qosAggregateTable=qosAggregateTable, qosAggregateEntry=qosAggregateEntry, qosAggregateId=qosAggregateId, qosAggregatePolicerId=qosAggregatePolicerId, qosMacQos=qosMacQos, qosMacClassificationTable=qosMacClassificationTable, qosMacClassificationEntry=qosMacClassificationEntry, qosMacClassificationId=qosMacClassificationId, qosDstMacVlan=qosDstMacVlan, qosDstMacAddress=qosDstMacAddress, qosDstMacCos=qosDstMacCos, qosIpQos=qosIpQos, qosIpAceTable=qosIpAceTable, qosIpAceEntry=qosIpAceEntry, qosIpAceId=qosIpAceId, qosIpAceDstAddr=qosIpAceDstAddr, qosIpAceDstAddrMask=qosIpAceDstAddrMask, qosIpAceSrcAddr=qosIpAceSrcAddr, qosIpAceSrcAddrMask=qosIpAceSrcAddrMask, qosIpAceDscpMin=qosIpAceDscpMin, qosIpAceDscpMax=qosIpAceDscpMax, qosIpAceProtocol=qosIpAceProtocol, qosIpAceDstL4PortMin=qosIpAceDstL4PortMin, qosIpAceDstL4PortMax=qosIpAceDstL4PortMax, qosIpAceSrcL4PortMin=qosIpAceSrcL4PortMin, qosIpAceSrcL4PortMax=qosIpAceSrcL4PortMax, qosIpAcePermit=qosIpAcePermit, qosIpAclDefinitionTable=qosIpAclDefinitionTable, qosIpAclDefinitionEntry=qosIpAclDefinitionEntry, qosIpAclDefinitionId=qosIpAclDefinitionId, qosIpAclId=qosIpAclId, qosIpAceOrder=qosIpAceOrder, qosIpAclDefAceId=qosIpAclDefAceId, qosIpAclActionTable=qosIpAclActionTable, qosIpAclActionEntry=qosIpAclActionEntry, qosIpAclActionId=qosIpAclActionId, qosIpAclActAclId=qosIpAclActAclId, qosIpAclInterfaceRoles=qosIpAclInterfaceRoles, qosIpAclInterfaceDirection=qosIpAclInterfaceDirection, qosIpAclOrder=qosIpAclOrder, qosIpAclDscp=qosIpAclDscp, qosIpAclDscpTrusted=qosIpAclDscpTrusted, qosIpAclMicroFlowPolicerId=qosIpAclMicroFlowPolicerId, qosIpAclAggregateId=qosIpAclAggregateId, qosIfParameters=qosIfParameters, qosIfSchedulingPreferencesTable=qosIfSchedulingPreferencesTable, qosIfSchedulingPreferenceEntry=qosIfSchedulingPreferenceEntry, qosIfSchedulingPreferenceId=qosIfSchedulingPreferenceId, qosIfSchedulingRoles=qosIfSchedulingRoles, qosIfSchedulingPreference=qosIfSchedulingPreference, qosIfSchedulingDiscipline=qosIfSchedulingDiscipline, qosIfSchedulingQueueType=qosIfSchedulingQueueType, qosIfDropPreferenceTable=qosIfDropPreferenceTable, qosIfDropPreferenceEntry=qosIfDropPreferenceEntry, qosIfDropPreferenceId=qosIfDropPreferenceId, qosIfDropRoles=qosIfDropRoles, qosIfDropPreference=qosIfDropPreference, qosIfDropDiscipline=qosIfDropDiscipline, qosIfDscpAssignmentTable=qosIfDscpAssignmentTable, qosIfDscpAssignmentEntry=qosIfDscpAssignmentEntry, qosIfDscpAssignmentId=qosIfDscpAssignmentId, qosIfDscpRoles=qosIfDscpRoles, qosIfQueueType=qosIfQueueType, qosIfDscp=qosIfDscp, qosIfQueue=qosIfQueue, qosIfThresholdSet=qosIfThresholdSet, qosIfRedTable=qosIfRedTable, qosIfRedEntry=qosIfRedEntry, qosIfRedId=qosIfRedId, qosIfRedRoles=qosIfRedRoles, qosIfRedNumThresholdSets=qosIfRedNumThresholdSets, qosIfRedThresholdSet=qosIfRedThresholdSet, qosIfRedThresholdSetLower=qosIfRedThresholdSetLower)
mibBuilder.exportSymbols("CISCO-QOS-PIB-MIB", qosIfRedThresholdSetUpper=qosIfRedThresholdSetUpper, qosIfTailDropTable=qosIfTailDropTable, qosIfTailDropEntry=qosIfTailDropEntry, qosIfTailDropId=qosIfTailDropId, qosIfTailDropRoles=qosIfTailDropRoles, qosIfTailDropNumThresholdSets=qosIfTailDropNumThresholdSets, qosIfTailDropThresholdSet=qosIfTailDropThresholdSet, qosIfTailDropThresholdSetValue=qosIfTailDropThresholdSetValue, qosIfWeightsTable=qosIfWeightsTable, qosIfWeightsEntry=qosIfWeightsEntry, qosIfWeightsId=qosIfWeightsId, qosIfWeightsRoles=qosIfWeightsRoles, qosIfWeightsNumQueues=qosIfWeightsNumQueues, qosIfWeightsQueue=qosIfWeightsQueue, qosIfWeightsDrainSize=qosIfWeightsDrainSize, qosIfWeightsQueueSize=qosIfWeightsQueueSize)

# Groups
mibBuilder.exportSymbols("CISCO-QOS-PIB-MIB", qosDevicePibIncarnationTableGroup=qosDevicePibIncarnationTableGroup, qosDeviceAttributeTableGroup=qosDeviceAttributeTableGroup, qosInterfaceTypeTableGroup=qosInterfaceTypeTableGroup, qosDiffServMappingTableGroup=qosDiffServMappingTableGroup, qosCosToDscpTableGroup=qosCosToDscpTableGroup, qosUnmatchedPolicyTableGroup=qosUnmatchedPolicyTableGroup, qosPolicerTableGroup=qosPolicerTableGroup, qosAggregateTableGroup=qosAggregateTableGroup, qosMacClassificationTableGroup=qosMacClassificationTableGroup, qosIpAceTableGroup=qosIpAceTableGroup, qosIpAclDefinitionTableGroup=qosIpAclDefinitionTableGroup, qosIpAclActionTableGroup=qosIpAclActionTableGroup, qosIfSchedulingPreferencesTableGroup=qosIfSchedulingPreferencesTableGroup, qosIfDropPreferenceTableGroup=qosIfDropPreferenceTableGroup, qosIfDscpAssignmentTableGroup=qosIfDscpAssignmentTableGroup, qosIfRedTableGroup=qosIfRedTableGroup, qosIfTailDropTableGroup=qosIfTailDropTableGroup, qosIfWeightsTableGroup=qosIfWeightsTableGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-QOS-PIB-MIB", qosPIBCompliance=qosPIBCompliance)
