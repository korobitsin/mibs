# PySNMP SMI module. Autogenerated from smidump -f python CISCO-PROCESS-MIB
# by libsmi2pysnmp-0.1.3 at Mon Nov 18 22:56:20 2013,
# Python version (2, 6, 6, 'final', 0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( EntPhysicalIndexOrZero, Unsigned64, ) = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero", "Unsigned64")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowPointer, RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowPointer", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class CPULoadAverage(TextualConvention, Unsigned32):
    displayHint = "d"
    

# Objects

ciscoProcessMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 109)).setRevisions(("2010-05-06 00:00","2009-10-12 00:00","2009-01-23 00:00","2007-03-23 00:00","2003-01-22 00:00","2001-05-18 00:00","1998-04-15 00:00",))
if mibBuilder.loadTexts: ciscoProcessMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoProcessMIB.setContactInfo("Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-snmp@cisco.com")
if mibBuilder.loadTexts: ciscoProcessMIB.setDescription("The MIB module to describe active system processes.\nVirtual Machine refers to those OS which can run the \ncode or process of a different executional model OS.\nVirtual Process assume the executional model \nof a OS which is different from Native OS. Virtual\nProcesses are also referred as Tasks.\nThread is a sequence of instructions to be executed\nwithin a program. Thread which adhere to POSIX standard\nis referred as a POSIX thread.")
ciscoProcessMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1))
cpmCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1))
cpmCPUTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1))
if mibBuilder.loadTexts: cpmCPUTotalTable.setDescription("A table of overall CPU statistics.")
cpmCPUTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"))
if mibBuilder.loadTexts: cpmCPUTotalEntry.setDescription("Overall information about the CPU load. Entries in this\ntable come and go as CPUs are added and removed from the\nsystem.")
cpmCPUTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cpmCPUTotalIndex.setDescription("An index that uniquely represents a CPU (or group of CPUs)\nwhose CPU load information is reported by a row in this table.\nThis index is assigned arbitrarily by the engine\nand is not saved over reboots.")
cpmCPUTotalPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotalPhysicalIndex.setDescription("The entPhysicalIndex of the physical entity for which\nthe CPU statistics in this entry are maintained.\nThe physical entity can be a CPU chip, a group of CPUs,\na CPU card etc. The exact type of this entity is described by\nits entPhysicalVendorType value. If the CPU statistics\nin this entry correspond to more than one physical entity\n(or to no physical entity), or if the entPhysicalTable is\nnot supported on the SNMP agent, the value of this object\nmust be zero.")
cpmCPUTotal5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5sec.setDescription("The overall CPU busy percentage in the last 5 second\nperiod. This object obsoletes the busyPer object from \nthe OLD-CISCO-SYSTEM-MIB. This object is deprecated\nby cpmCPUTotal5secRev which has the changed range of\nvalue (0..100).")
cpmCPUTotal1min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal1min.setDescription("The overall CPU busy percentage in the last 1 minute\nperiod. This object obsoletes the avgBusy1 object from \nthe OLD-CISCO-SYSTEM-MIB. This object is deprecated\nby cpmCPUTotal1minRev which has the changed range\nof value (0..100).")
cpmCPUTotal5min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5min.setDescription("The overall CPU busy percentage in the last 5 minute\nperiod. This object deprecates the avgBusy5 object from \nthe OLD-CISCO-SYSTEM-MIB. This object is deprecated\nby cpmCPUTotal5minRev which has the changed range \nof value (0..100).")
cpmCPUTotal5secRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5secRev.setDescription("The overall CPU busy percentage in the last 5 second\nperiod. This object deprecates the object cpmCPUTotal5sec \nand increases the value range to (0..100). This object\nis deprecated by cpmCPUTotalMonIntervalValue")
cpmCPUTotal1minRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal1minRev.setDescription("The overall CPU busy percentage in the last 1 minute\nperiod. This object deprecates the object cpmCPUTotal1min \nand increases the value range to (0..100).")
cpmCPUTotal5minRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5minRev.setDescription("The overall CPU busy percentage in the last 5 minute\nperiod. This object deprecates the object cpmCPUTotal5min \nand increases the value range to (0..100).")
cpmCPUMonInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMonInterval.setDescription("CPU usage monitoring interval. The value of this\nobject in seconds indicates the how often the \nCPU utilization is calculated and monitored.")
cpmCPUTotalMonIntervalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotalMonIntervalValue.setDescription("The overall CPU busy percentage in the last\ncpmCPUMonInterval period. \nThis object deprecates the object cpmCPUTotal5secRev.")
cpmCPUInterruptMonIntervalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUInterruptMonIntervalValue.setDescription("The overall CPU busy percentage in the\ninterrupt context in the last cpmCPUMonInterval\nperiod.")
cpmCPUMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryUsed.setDescription("The overall CPU wide system memory which is currently\nunder use.")
cpmCPUMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryFree.setDescription("The overall CPU wide system memory which is currently\nfree.")
cpmCPUMemoryKernelReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryKernelReserved.setDescription("The overall CPU wide system memory which is reserved\nfor kernel usage.")
cpmCPUMemoryLowest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryLowest.setDescription("The lowest free memory that has been recorded since\ndevice has booted.")
cpmCPUMemoryUsedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryUsedOvrflw.setDescription("This object represents the upper 32-bit of cpmCPUMemoryUsed.\nThis object needs to be supported only when the value of\ncpmCPUMemoryUsed exceeds 32-bit, otherwise this object value\nwould be set to 0.")
cpmCPUMemoryHCUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 17), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCUsed.setDescription("The overall CPU wide system memory which is currently under\nuse. This object is a 64-bit version of cpmCPUMemoryUsed.")
cpmCPUMemoryFreeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryFreeOvrflw.setDescription("This object represents the upper 32-bit of cpmCPUMemoryFree.\nThis object needs to be supported only when the value of\ncpmCPUMemoryFree exceeds 32-bit, otherwise this object value\nwould be set to 0.")
cpmCPUMemoryHCFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCFree.setDescription("The overall CPU wide system memory which is currently free.\nThis object is a 64-bit version of cpmCPUMemoryFree.")
cpmCPUMemoryKernelReservedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryKernelReservedOvrflw.setDescription("This object represents the upper 32-bit of\ncpmCPUMemoryKernelReserved. This object needs \nto be supported only when the value of \ncpmCPUMemoryKernelReserved exceeds 32-bit, otherwise\nthis object value would be set to 0.")
cpmCPUMemoryHCKernelReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 21), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCKernelReserved.setDescription("The overall CPU wide system memory which is reserved\nfor kernel usage. This object is a 64-bit version of\ncpmCPUMemoryKernelReserved.")
cpmCPUMemoryLowestOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryLowestOvrflw.setDescription("This object represents the upper 32-bit of cpmCPUMemoryLowest.\nThis object needs to be supported only when the value of\ncpmCPUMemoryLowest exceeds 32-bit, otherwise this object value\nwould be set to 0.")
cpmCPUMemoryHCLowest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 23), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCLowest.setDescription("The lowest free memory that has been recorded since device has\nbooted. This object is a 64-bit version of cpmCPUMemoryLowest.")
cpmCPULoadAvg1min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 24), CPULoadAverage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPULoadAvg1min.setDescription("The overall CPU load Average in the last 1 minute period")
cpmCPULoadAvg5min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 25), CPULoadAverage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPULoadAvg5min.setDescription("The overall CPU load Average in the last 5 minutes period")
cpmCPULoadAvg15min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 26), CPULoadAverage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPULoadAvg15min.setDescription("The overall CPU load Average in the last 15 minutes period")
cpmCPUMemoryCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryCommitted.setDescription("The overall CPU wide system memory which is currently\nCommitted.")
cpmCPUMemoryCommittedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryCommittedOvrflw.setDescription("This object represents the upper 32-bit of\ncpmCPUMemoryCommitted.\nThis object needs to be supported only when the value of\ncpmCPUMemoryCommitted exceeds 32-bit, otherwise this object\nvalue would be set to 0.")
cpmCPUMemoryHCCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 29), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCCommitted.setDescription("The overall CPU wide system memory which is currently\ncommitted. This object is a 64-bit version of\ncpmCPUMemoryCommitted")
cpmProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2))
cpmProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1))
if mibBuilder.loadTexts: cpmProcessTable.setDescription("A table of generic information on all active\nprocesses on this device.")
cpmProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"))
if mibBuilder.loadTexts: cpmProcessEntry.setDescription("Generic information about an active process on this\ndevice. Entries in this table come and go as processes are \ncreated and destroyed by the device.")
cpmProcessPID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessPID.setDescription("This object contains the process ID. cpmTimeCreated\nshould be checked against the last time it was polled,\nand if it has changed the PID has been reused and the\nentire entry should be polled again.")
cpmProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessName.setDescription("The name associated with this process. If the name is\nlonger than 32 characters, it will be truncated to the first\n31 characters, and a `*' will be appended as the last\ncharacter to imply this is a truncated process name.")
cpmProcessuSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessuSecs.setDescription("Average elapsed CPU time in microseconds when the\nprocess was active. This object is deprecated\nby cpmProcessAverageUSecs.")
cpmProcessTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessTimeCreated.setDescription("The time when the process was created. The process ID\nand the time when the process was created, uniquely \nidentifies a process.")
cpmProcessAverageUSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessAverageUSecs.setDescription("Average elapsed CPU time in microseconds when the\nprocess was active. This object deprecates the\nobject cpmProcessuSecs.")
cpmProcessExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2))
if mibBuilder.loadTexts: cpmProcessExtTable.setDescription("This table contains information that may or may\nnot be available on all cisco devices. It contains\nadditional objects for the more general\ncpmProcessTable. This object is deprecated by\ncpmProcessExtRevTable.")
cpmProcessExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1))
if mibBuilder.loadTexts: cpmProcessExtEntry.setDescription("An entry containing additional information for\na particular process. This object is deprecated by\ncpmProcessExtRevEntry.")
cpmProcExtMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemAllocated.setDescription("The sum of all the dynamically allocated memory that\nthis process has received from the system. This includes\nmemory that may have been returned. The sum of freed\nmemory is provided by cpmProcExtMemFreed. This object\nis deprecated by cpmProcExtMemAllocatedRev.")
cpmProcExtMemFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemFreed.setDescription("The sum of all memory that this process has returned\nto the system. This object is deprecated by \ncpmProcExtMemFreedRev.")
cpmProcExtInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtInvoked.setDescription("The number of times since cpmTimeCreated that\nthe process has been invoked. This object is\ndeprecated by cpmProcExtInvokedRev.")
cpmProcExtRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtRuntime.setDescription("The amount of CPU time the process has used, in\nmicroseconds. This object is deprecated by\ncpmProcExtRuntimeRev.")
cpmProcExtUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5Sec.setDescription("This object provides a general idea of how busy\na process caused the processor to be over a 5 \nsecond period. It is determined as a weighted \ndecaying average of the current idle time over \nthe longest idle time. Note that this information \nshould be used as an estimate only. This object is \ndeprecated by cpmProcExtUtil5SecRev which has the \nchanged range of value (0..100).")
cpmProcExtUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil1Min.setDescription("This object provides a general idea of how busy\na process caused the processor to be over a 1 \nminute period. It is determined as a weighted \ndecaying average of the current idle time over the \nlongest idle time. Note that this information \nshould be used as an estimate only. This object is \ndeprecated by cpmProcExtUtil1MinRev which has\nthe changed range of value (0..100).")
cpmProcExtUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5Min.setDescription("This object provides a general idea of how busy\na process caused the processor to be over a 5 \nminute period. It is determined as a weighted \ndecaying average of the current idle time over \nthe longest idle time. Note that this information \nshould be used as an estimate only. This object\nis deprecated by cpmProcExtUtil5MinRev which\nhas the changed range of value (0..100).")
cpmProcExtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,2,1,4,)).subtype(namedValues=NamedValues(("critical", 1), ("high", 2), ("normal", 3), ("low", 4), ("notAssigned", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmProcExtPriority.setDescription("The priority level at which the process is\nrunning. This object is deprecated by\ncpmProcExtPriorityRev.")
cpmProcessExtRevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3))
if mibBuilder.loadTexts: cpmProcessExtRevTable.setDescription("This table contains information that may or may\nnot be available on all cisco devices. It contains\nadditional objects for the more general\ncpmProcessTable. This object deprecates \ncpmProcessExtTable.")
cpmProcessExtRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"))
if mibBuilder.loadTexts: cpmProcessExtRevEntry.setDescription("An entry containing additional information for\na particular process. This object deprecates \ncpmProcessExtEntry.")
cpmProcExtMemAllocatedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemAllocatedRev.setDescription("The sum of all the dynamically allocated memory that\nthis process has received from the system. This includes\nmemory that may have been returned. The sum of freed\nmemory is provided by cpmProcExtMemFreedRev. This object\ndeprecates cpmProcExtMemAllocated.")
cpmProcExtMemFreedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemFreedRev.setDescription("The sum of all memory that this process has returned\nto the system. This object  deprecates \ncpmProcExtMemFreed.")
cpmProcExtInvokedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtInvokedRev.setDescription("The number of times since cpmTimeCreated that\nthe process has been invoked. This object \ndeprecates cpmProcExtInvoked.")
cpmProcExtRuntimeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtRuntimeRev.setDescription("The amount of CPU time the process has used, in\nmicroseconds. This object deprecates\ncpmProcExtRuntime.")
cpmProcExtUtil5SecRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5SecRev.setDescription("This object provides a general idea of how busy\na process caused the processor to be over a 5 \nsecond period. It is determined as a weighted \ndecaying average of the current idle time over \nthe longest idle time. Note that this information \nshould be used as an estimate only. This object\ndeprecates cpmProcExtUtil5Sec and increases the \nvalue range to (0..100).")
cpmProcExtUtil1MinRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil1MinRev.setDescription("This object provides a general idea of how busy\na process caused the processor to be over a 1 \nminute period. It is determined as a weighted \ndecaying average of the current idle time over the \nlongest idle time. Note that this information \nshould be used as an estimate only. This object \ndeprecates cpmProcExtUtil1Min and increases the value\nrange to (0..100).")
cpmProcExtUtil5MinRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5MinRev.setDescription("This object provides a general idea of how busy\na process caused the processor to be over a 5 \nminute period. It is determined as a weighted \ndecaying average of the current idle time over \nthe longest idle time. Note that this information \nshould be used as an estimate only. This object\ndeprecates cpmProcExtUtil5Min and increases the\nvalue range to (0..100).")
cpmProcExtPriorityRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,2,1,4,)).subtype(namedValues=NamedValues(("critical", 1), ("high", 2), ("normal", 3), ("low", 4), ("notAssigned", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtPriorityRev.setDescription("The priority level at  which the process is\nrunning. This object deprecates \ncpmProcExtPriority.")
cpmProcessType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("other", 1), ("posix", 2), ("ios", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessType.setDescription("This indicates the kind of process in context.")
cpmProcessRespawn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessRespawn.setDescription("This indicates whether respawn of a process is enabled\nor not. If enabled the process in context repawns after\nit has crashed/stopped.")
cpmProcessRespawnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessRespawnCount.setDescription("This indicates the number of times the process has\nrespawned/restarted.")
cpmProcessRespawnAfterLastPatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessRespawnAfterLastPatch.setDescription("This indicates the number of times a process has\nrestarted after the last patch is applied. This is to \ndetermine the stability of the last patch.")
cpmProcessMemoryCore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,8,2,7,3,6,4,5,)).subtype(namedValues=NamedValues(("other", 1), ("mainmem", 2), ("mainmemSharedmem", 3), ("mainmemText", 4), ("mainmemTextSharedmem", 5), ("sharedmem", 6), ("sparse", 7), ("off", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessMemoryCore.setDescription("This indicates the part of process memory to be\ndumped when a process crashes. The process \nmemory is used for debugging purposes to trace the \nroot cause of the crash.\nsparse        - Some operating systems support minimal\n                dump of process core like register\n                info, partial stack, partial memory\n                pages especially for critical process\n                to facilitate faster process restart.")
cpmProcessLastRestartUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessLastRestartUser.setDescription("This indicate the user that has last restarted the\nprocess or has taken running coredump of the process.")
cpmProcessTextSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessTextSegmentSize.setDescription("This indicates the text memory of a process and all\nits shared objects.")
cpmProcessDataSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDataSegmentSize.setDescription("This indicates the data segment of a process and\nall its shared objects.")
cpmProcessStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessStackSize.setDescription("This indicates the amount of stack memory used by the\nprocess.")
cpmProcessDynamicMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDynamicMemorySize.setDescription("This indicates the amount of dynamic memory being used\nby the process.")
cpmProcExtMemAllocatedRevOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemAllocatedRevOvrflw.setDescription("This object represents the upper 32-bit of\ncpmProcExtMemAllocatedRev. This object needs\nto be supported only when the value of \ncpmProcExtMemAllocatedRev exceeds 32-bit, \notherwise this object value would be set to 0.")
cpmProcExtHCMemAllocatedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtHCMemAllocatedRev.setDescription("The sum of all the dynamically allocated memory that this\nprocess has received from the system. This includes memory\nthat may have been returned. This object is a 64-bit version\nof cpmProcExtMemAllocatedRev.")
cpmProcExtMemFreedRevOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemFreedRevOvrflw.setDescription("This object represents the upper 32-bit of\ncpmProcExtMemFreedRev. This object needs to \nbe supported only when the value of\ncpmProcExtMemFreedRev exceeds 32-bit,otherwise\nthis object value would be set to 0.")
cpmProcExtHCMemFreedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtHCMemFreedRev.setDescription("The sum of all memory that this process has returned to the\nsystem. This object is a 64-bit version of\ncpmProcExtMemFreedRev.")
cpmProcessTextSegmentSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessTextSegmentSizeOvrflw.setDescription("This object represents the upper 32-bit of\ncpmProcessTextSegmentSize. This object needs\nto be supported only when the value of \ncpmProcessTextSegmentSize exceeds 32-bit, \notherwise this object value would be set to 0.")
cpmProcessHCTextSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCTextSegmentSize.setDescription("This indicates the text memory of a process and all\nits shared objects. This object is a 64-bit version\nof cpmProcessTextSegmentSize.")
cpmProcessDataSegmentSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDataSegmentSizeOvrflw.setDescription("This object represents the upper 32-bit of\ncpmProcessDataSegmentSize. This object needs\nto be supported only when the value of \ncpmProcessDataSegmentSize exceeds 32-bit, \notherwise this object value would be set to 0.")
cpmProcessHCDataSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCDataSegmentSize.setDescription("This indicates the data segment of a process and\nall its shared objects.. This object is a 64-bit\nversion of cpmProcessDataSegmentSize.")
cpmProcessStackSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessStackSizeOvrflw.setDescription("This object represents the upper 32-bit of cpmProcessStackSize.\nThis object needs to be supported only when the value of\ncpmProcessStackSize exceeds 32-bit, otherwise this object value\nwould be set to 0.")
cpmProcessHCStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 28), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCStackSize.setDescription("This indicates the amount of stack memory used by the process.\nThis object is a 64-bit version of cpmProcessStackSize.")
cpmProcessDynamicMemorySizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDynamicMemorySizeOvrflw.setDescription("This object represents the upper 32-bit of\ncpmProcessDynamicMemorySize. This object needs\nto be supported only when the value of \ncpmProcessDynamicMemorySize exceeds 32-bit, \notherwise this object value would be set to 0.")
cpmProcessHCDynamicMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCDynamicMemorySize.setDescription("This indicates the amount of dynamic memory being used\nby the process. This object is a 64-bit version of\ncpmProcessDynamicMemorySize.")
cpmCPUThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4))
if mibBuilder.loadTexts: cpmCPUThresholdTable.setDescription("This table contains the information about the\nthresholding values for CPU , configured by the user.")
cpmCPUThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmCPUThresholdClass"))
if mibBuilder.loadTexts: cpmCPUThresholdEntry.setDescription("An entry containing information about\nCPU thresholding parameters. cpmCPUTotalIndex\nidentifies the CPU (or group of CPUs) for which this\nconfiguration applies.")
cpmCPUThresholdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("total", 1), ("interrupt", 2), ("process", 3), ))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cpmCPUThresholdClass.setDescription("Value of this object indicates the type of\nutilization, which is monitored. The total(1) indicates\nthe total CPU utilization, interrupt(2) indicates the\nthe CPU utilization in interrupt context and process(3)\nindicates the CPU utilization in the process level\nexecution context.")
cpmCPURisingThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPURisingThresholdValue.setDescription("The percentage rising threshold value configured by\nthe user. The value indicates, \nif the percentage CPU utilization is equal to or above\nthis value for cpmCPURisingThresholdPeriod duration \nthen send a cpmCPURisingThreshold notification to\nthe NMS.")
cpmCPURisingThresholdPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 4294967295)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPURisingThresholdPeriod.setDescription("This is an observation interval.\nThe value of this object indicates that \nthe CPU utilization should be above\ncpmCPURisingThresholdValue for this duration to send a \ncpmCPURisingThreshold notification to the NMS.")
cpmCPUFallingThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPUFallingThresholdValue.setDescription("The percentage falling threshold value configured by\nthe user. The value indicates, if the percentage \nCPU utilization is equal to or below this value for \ncpmCPUFallingThresholdPeriod duration\nthen send a cpmCPUFallingThreshold notification \nto the NMS.")
cpmCPUFallingThresholdPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 4294967295)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPUFallingThresholdPeriod.setDescription("This is an observation interval. The value of this\nobject indicates that CPU utilization should be below\ncpmCPUFallingThresholdValue for this duration to send a \ncpmCPURisingThreshold notification to the NMS.")
cpmCPUThresholdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPUThresholdEntryStatus.setDescription("The status of this table entry.")
cpmCPUHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5))
cpmCPUHistoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmCPUHistoryThreshold.setDescription("The user  configured value of this object gives\nthe minimum percent CPU utilization of a process\nin the last cpmCPUMonInterval duration required to be a \nmember of history table. When this object is changed\nthe new value will have effect in the next interval.")
cpmCPUHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmCPUHistorySize.setDescription("A value configured by the user which specifies the\nnumber of reports in the history table. \nA report contains set of processes which crossed\nthe cpmCPUHistoryThreshold \nin the last cpmCPUMonInterval along with \nthe time at which this report is\ncreated, total and interrupt CPU utilizations. \nWhen this object is changed\nthe new value will have effect in the next interval.")
cpmCPUHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3))
if mibBuilder.loadTexts: cpmCPUHistoryTable.setDescription("A list of CPU utilization history entries.")
cpmCPUHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmCPUHistoryReportId"))
if mibBuilder.loadTexts: cpmCPUHistoryEntry.setDescription("A historical sample of CPU utilization statistics.\ncpmCPUTotalIndex identifies the CPU (or group of CPUs)\nfor which this history is collected. \nWhen the cpmCPUHistorySize is\nreached the least recent entry is lost.")
cpmCPUHistoryReportId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cpmCPUHistoryReportId.setDescription("All the entries which are created at the same time\nwill have same value for this object. When the\nconfigured threshold for being a part of History table\nis reached then the qualified processes become the\npart of history table. The entries which became the \npart of history table at one instant will have\nthe same value for this object. When this object\nreaches the max index value then it will wrap around.")
cpmCPUHistoryReportSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryReportSize.setDescription("The number of process entries in a report.\nThis object gives information about how many processes \nbecame a part of history table at one instant.")
cpmCPUHistoryTotalUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryTotalUtil.setDescription("Total percentage of CPU utilization\nat cpmCPUHistoryCreated.")
cpmCPUHistoryInterruptUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryInterruptUtil.setDescription("Percentage of CPU utilization in the interrupt context\nat cpmCPUHistoryCreated.")
cpmCPUHistoryCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryCreatedTime.setDescription("Time stamp with respect to sysUpTime indicating\nthe time at which this report is created.")
cpmCPUProcessHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4))
if mibBuilder.loadTexts: cpmCPUProcessHistoryTable.setDescription("A list of process history entries. This table contains\nCPU utilization of processes which crossed the \ncpmCPUHistoryThreshold.")
cpmCPUProcessHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmCPUHistoryReportId"), (0, "CISCO-PROCESS-MIB", "cpmCPUProcessHistoryIndex"))
if mibBuilder.loadTexts: cpmCPUProcessHistoryEntry.setDescription("A historical sample of process utilization\nstatistics. The entries in this table will have\ncorresponding entires in the cpmCPUHistoryTable.\nThe entries in this table get deleted when the entry\nassociated with this entry in the cpmCPUHistoryTable \ngets deleted.")
cpmCPUProcessHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cpmCPUProcessHistoryIndex.setDescription("An index that uniquely identifies an entry in\nthe cmpCPUProcessHistory table among those in the \nsame report. This index is between 1 to N, \nwhere N is the cpmCPUHistoryReportSize.")
cpmCPUHistoryProcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcId.setDescription("The process Id associated with this entry.")
cpmCPUHistoryProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcName.setDescription("The process name associated with this entry.")
cpmCPUHistoryProcCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcCreated.setDescription("The time when the process was created. The process ID\nand the time when the process was created, uniquely \nidentifies a process.")
cpmCPUHistoryProcUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcUtil.setDescription("The percentage CPU utilization of a process at\ncpmCPUHistoryCreatedTime.")
cpmThread = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3))
cpmThreadTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1))
if mibBuilder.loadTexts: cpmThreadTable.setDescription("This table contains generic information about\nPOSIX threads in the device.")
cpmThreadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"), (0, "CISCO-PROCESS-MIB", "cpmThreadID"))
if mibBuilder.loadTexts: cpmThreadEntry.setDescription("An entry containing the general statistics\nof a POSIX thread.")
cpmThreadID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cpmThreadID.setDescription("This object contains the thread ID. ThreadID is\nUnique per process.")
cpmThreadName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadName.setDescription("This object represents the name of the thread.\nThread names need not be unique. Hence statistics \nshould be analyzed against thread ID.")
cpmThreadPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadPriority.setDescription("This object indicates the priority of a POSIX thread.\nThe higher the number, the higher the priority of the \nthread over other threads.")
cpmThreadState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(10,14,16,7,13,11,15,2,3,1,5,6,17,4,8,18,9,12,)).subtype(namedValues=NamedValues(("other", 1), ("waitpage", 10), ("sigsuspend", 11), ("sigwaitinfo", 12), ("nanosleep", 13), ("mutex", 14), ("condvar", 15), ("join", 16), ("intr", 17), ("sem", 18), ("dead", 2), ("running", 3), ("ready", 4), ("stopped", 5), ("send", 6), ("receive", 7), ("reply", 8), ("stack", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadState.setDescription("This object indicates the current state of a thread.\nRunning state means that the thread is actively \nconsumig CPU. All the other states are just waiting \nstates. The valid states are:\nother         - Any other state apart from the listed \n                ones.\ndead          - Kernel is waiting to release the \n                thread's resources.\nrunning       - Actively running on a CPU.\nready         - Not running on a CPU, but is ready to \n                run (one or more higher or equal \n                priority threads are running).\nstopped       - Suspended (SIGSTOP signal).\nsend          - Waiting for a server to receive \n                a message.\nreceive       - Waiting for a client to send a message.\nreply         - Waiting for a server to reply to a \n                message.\nstack         - Waiting for more stack to be allocated.\nwaitpage      - Waiting for process manager to \n                resolve a fault on a page.\nsigsuspend    - Suspended for a signal.\nsigwaitinfo   - Waiting for a signal.\nnanosleep     - Sleeping for a period of time.\nmutex         - Waiting to acquire a mutex\ncondvar       - Waiting for a condition variable to be \n                signalled.\njoin          - Waiting for the completion of another \n                thread.\nintr          - Waiting for an interrupt.\nsem           - Waiting to acquire a semaphore.")
cpmThreadBlockingProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadBlockingProcess.setDescription("This object identifies the process on which the\ncurrent thread is blocked on. This points to the \ncpmProcessTable of the process on which the thread \nin context is blocked. This is valid only to threads\nwhich are either in send/reply states. For the \nrest of the threads it is returned as 0.0")
cpmThreadCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadCpuUtilization.setDescription("This object provides a general idea on how busy\nthe thread in context caused the processor to be.")
cpmThreadStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadStackSize.setDescription("This object indicates the stack size allocated to\nthe thread in context.")
cpmThreadStackSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadStackSizeOvrflw.setDescription("This object represents the upper 32-bit of cpmThreadStackSize.\nThis object needs to be supported only when the value of\ncpmThreadStackSize exceeds 32-bit, otherwise this object value\nwould be set to 0.")
cpmThreadHCStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadHCStackSize.setDescription("This object indicates the stack size allocated to the\nthread in context. This object is a 64-bit version of\ncpmThreadStackSize.")
cpmVirtualProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4))
cpmVirtualProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1))
if mibBuilder.loadTexts: cpmVirtualProcessTable.setDescription("This table contains information about virtual\nprocesses in a virtual machine.")
cpmVirtualProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1)).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"), (0, "CISCO-PROCESS-MIB", "cpmVirtualProcessID"))
if mibBuilder.loadTexts: cpmVirtualProcessEntry.setDescription("An entry containing the general statistics of a\nvirtual process in a virtual machine.")
cpmVirtualProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cpmVirtualProcessID.setDescription("This object indicates the process ID of a virtual\nprocess. PID is unique only inside one address space.\nVirtual process PID should be considered along with \nParent process cpmProcessPID.")
cpmVirtualProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessName.setDescription("This object indicates the name of a virtual process.\nIf the name is longer than 32 characters, it will be\ntruncated to the first 31 characters, and a `*' will be\nappended as the last character to imply this is a\ntruncated process name.")
cpmVirtualProcessUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessUtil5Sec.setDescription("This indicates an estimated CPU utilization by\na virtual process over the last 5 seconds.")
cpmVirtualProcessUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessUtil1Min.setDescription("This indicates an estimated CPU utilization by\na virtual process over the last one minute.")
cpmVirtualProcessUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessUtil5Min.setDescription("This indicates an estimated CPU utilization by\na virtual process over the last 5 minutes.")
cpmVirtualProcessMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemAllocated.setDescription("This object indicates the memory allocated by the\nvirtual process inside the address space of a \nprocess running on Native OS.")
cpmVirtualProcessMemFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemFreed.setDescription("This object indicates the memory freed by the virtual\nprocess inside the address space of a process running \non Native OS.")
cpmVirtualProcessInvokeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessInvokeCount.setDescription("The number of times a virtual process is invoked.")
cpmVirtualProcessRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessRuntime.setDescription("The amount of CPU time a virtual process has used in\nmicroseconds.")
cpmVirtualProcessMemAllocatedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemAllocatedOvrflw.setDescription("This object represents the upper 32-bit of\ncpmVirtualProcessMemAllocated. This object \nneeds to be supported only when the value of\ncpmVirtualProcessMemAllocated exceeds 32-bit,\notherwise this object value would be set to 0.")
cpmVirtualProcessHCMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessHCMemAllocated.setDescription("This object indicates the memory allocated by the\nvirtual process inside the address space of a process\nrunning on Native OS. This object is a 64-bit version\nof cpmVirtualProcessMemAllocated.")
cpmVirtualProcessMemFreedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemFreedOvrflw.setDescription("This object represents the upper 32-bit of\ncpmVirtualProcessMemFreed. This object needs\nto be supported only when the value of \ncpmVirtualProcessMemFreed exceeds 32-bit, \notherwise this object value would be set to 0.")
cpmVirtualProcessHCMemFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessHCMemFreed.setDescription("This object indicates the memory freed by the virtual process\ninside the address space of a process running on Native OS.This\nobject is a 64-bit version of cpmVirtualProcessMemAllocated.")
ciscoProcessMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 2))
ciscoProcessMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 2, 0))
ciscoProcessMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 3))
cpmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1))
cpmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2))

# Augmentions
cpmProcessEntry.registerAugmentions(("CISCO-PROCESS-MIB", "cpmProcessExtEntry"))
cpmProcessExtEntry.setIndexNames(*cpmProcessEntry.getIndexNames())

# Notifications

cpmCPURisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 109, 2, 0, 1)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUInterruptMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmProcessTimeCreated"), ("CISCO-PROCESS-MIB", "cpmCPURisingThresholdValue"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5SecRev"), ) )
if mibBuilder.loadTexts: cpmCPURisingThreshold.setDescription("A cpmCPURisingThreshold notification is sent\nwhen configured rising CPU utilization threshold\n(cpmCPURisingThresholdValue) is reached and\nCPU utilization remained above the threshold \nfor configured interval(cpmCPURisingThresholdPeriod)\nand such a notification is requested. \nThe cpmProcExtUtil5SecRev and cpmProcessTimeCreated \nobjects can be repeated multiple times\nin a notification indicating the top users of CPU.")
cpmCPUFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 109, 2, 0, 2)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUInterruptMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmCPUFallingThresholdValue"), ) )
if mibBuilder.loadTexts: cpmCPUFallingThreshold.setDescription("A cpmCPUFallingThresholdTrap is sent when the\nconfigured falling threshold\n(cpmCPURisingThresholdValue) \nis reached and CPU utilization remained under \nthreshold for configured \ninterval (cpmCPUFallingThresholdPeriod) \nand such a notification is requested.")

# Groups

cpmCPUTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 1)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUTotal1min"), ("CISCO-PROCESS-MIB", "cpmCPUTotalPhysicalIndex"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5sec"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5min"), ) )
if mibBuilder.loadTexts: cpmCPUTotalGroup.setDescription("A collection of objects providing CPU load monitoring\ninformation. This group is mandatory for all cisco devices.\nThis group is deprecated since the objects cpmCPUTotal5sec,\ncpmCPUTotal1min and cpmCPUTotal5min are\ndeprecated. A new object cpmCPUTotalGroupRev is\nadded in place of it.")
cpmProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 2)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessTimeCreated"), ("CISCO-PROCESS-MIB", "cpmProcessName"), ("CISCO-PROCESS-MIB", "cpmProcessuSecs"), ("CISCO-PROCESS-MIB", "cpmProcessPID"), ) )
if mibBuilder.loadTexts: cpmProcessGroup.setDescription("A collection of objects providing common process\nmonitoring information. This group is mandatory for \nall cisco devices. This object is deprecated\nby cpmProcessGroupRev.")
cpmProcessExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 3)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcExtInvoked"), ("CISCO-PROCESS-MIB", "cpmProcExtRuntime"), ("CISCO-PROCESS-MIB", "cpmProcExtMemFreed"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil1Min"), ("CISCO-PROCESS-MIB", "cpmProcExtMemAllocated"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5Sec"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5Min"), ("CISCO-PROCESS-MIB", "cpmProcExtPriority"), ) )
if mibBuilder.loadTexts: cpmProcessExtGroup.setDescription("A collection of objects providing additional and\nmore detailed process monitoring information. This \ngroup is mandatory for all cisco devices that have \nthe internal capability to keep this information. \nThis group is deprecated and new group\ncpmProcessExtGroupRev is added.")
cpmCPUTotalGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 4)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUTotal1minRev"), ("CISCO-PROCESS-MIB", "cpmCPUTotalPhysicalIndex"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5minRev"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5secRev"), ) )
if mibBuilder.loadTexts: cpmCPUTotalGroupRev.setDescription("A collection of objects providing CPU load monitoring\ninformation. This group is mandatory for all cisco\ndevices. This group deprecates cpmCPUTotalGroup.\nThis group is deprecated since the object\ncpmCPUTotal5secRev is deprecated.\nA new object cpmCPUTotalGroupRev1 is\nadded in place of it.")
cpmProcessExtGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 5)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcExtInvokedRev"), ("CISCO-PROCESS-MIB", "cpmProcExtRuntimeRev"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5SecRev"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5MinRev"), ("CISCO-PROCESS-MIB", "cpmProcExtMemFreedRev"), ("CISCO-PROCESS-MIB", "cpmProcExtPriorityRev"), ("CISCO-PROCESS-MIB", "cpmProcExtMemAllocatedRev"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil1MinRev"), ) )
if mibBuilder.loadTexts: cpmProcessExtGroupRev.setDescription("A collection of objects providing additional and\nmore detailed process monitoring information. This \ngroup is mandatory for all cisco devices that have \nthe internal capability to keep this information.\nThis group is formed after deprecating cpmProcessExtGroup.\ncpmProcExtMemAllocatedRev, cpmProcExtMemFreedRev,\ncpmProcExtInvokedRev, cpmProcExtRuntimeRev,\ncpmProcExtUtil5SecRev, cpmProcExtUtil1MinRev and \ncpmProcExtUtil5MinRev are the new objects added.")
cpmProcessGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 6)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessName"), ("CISCO-PROCESS-MIB", "cpmProcessTimeCreated"), ("CISCO-PROCESS-MIB", "cpmProcessPID"), ("CISCO-PROCESS-MIB", "cpmProcessAverageUSecs"), ) )
if mibBuilder.loadTexts: cpmProcessGroupRev.setDescription("A collection of objects providing common process\nmonitoring information. This group is mandatory for \nall cisco devices. This object deprecates\ncpmProcessGroup.")
cpmCPUTotalGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 7)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUTotal5minRev"), ("CISCO-PROCESS-MIB", "cpmCPUTotal1minRev"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmCPUMonInterval"), ("CISCO-PROCESS-MIB", "cpmCPUInterruptMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmCPUTotalPhysicalIndex"), ) )
if mibBuilder.loadTexts: cpmCPUTotalGroupRev1.setDescription("A collection of objects providing CPU load monitoring\ninformation. This group is mandatory for all cisco\ndevices. This group deprecates cpmCPUTotalGroupRev.")
cpmCPUThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 8)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUFallingThresholdPeriod"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdEntryStatus"), ("CISCO-PROCESS-MIB", "cpmCPURisingThresholdValue"), ("CISCO-PROCESS-MIB", "cpmCPUFallingThresholdValue"), ("CISCO-PROCESS-MIB", "cpmCPURisingThresholdPeriod"), ) )
if mibBuilder.loadTexts: cpmCPUThresholdGroup.setDescription("A collection of objects used for configuration\nof thresholding.")
cpmCPUHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 9)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUHistoryTotalUtil"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcId"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryInterruptUtil"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryCreatedTime"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcName"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryReportSize"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryThreshold"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcCreated"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcUtil"), ("CISCO-PROCESS-MIB", "cpmCPUHistorySize"), ) )
if mibBuilder.loadTexts: cpmCPUHistoryGroup.setDescription("A collection of objects providing information\nabout CPU utilization history.")
cpmCPUThresholdNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 10)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPURisingThreshold"), ("CISCO-PROCESS-MIB", "cpmCPUFallingThreshold"), ) )
if mibBuilder.loadTexts: cpmCPUThresholdNotificationGroup.setDescription("A group of notifications.")
cpmCPUPosixMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 11)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUMemoryLowest"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryUsed"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryKernelReserved"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryFree"), ) )
if mibBuilder.loadTexts: cpmCPUPosixMemoryGroup.setDescription("A collection of common objects providing\nCPU wide System memory information running\nPOSIX compliant OS.")
cpmPosixProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 12)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessTextSegmentSize"), ("CISCO-PROCESS-MIB", "cpmProcessDynamicMemorySize"), ("CISCO-PROCESS-MIB", "cpmProcessType"), ("CISCO-PROCESS-MIB", "cpmProcessRespawnAfterLastPatch"), ("CISCO-PROCESS-MIB", "cpmProcessRespawn"), ("CISCO-PROCESS-MIB", "cpmProcessDataSegmentSize"), ("CISCO-PROCESS-MIB", "cpmProcessMemoryCore"), ("CISCO-PROCESS-MIB", "cpmProcessRespawnCount"), ("CISCO-PROCESS-MIB", "cpmProcessLastRestartUser"), ("CISCO-PROCESS-MIB", "cpmProcessStackSize"), ) )
if mibBuilder.loadTexts: cpmPosixProcessGroup.setDescription("A collection of common objects providing Process\ninformation on devices running POSIX compliant OS.")
cpmThreadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 13)).setObjects(*(("CISCO-PROCESS-MIB", "cpmThreadState"), ("CISCO-PROCESS-MIB", "cpmThreadName"), ("CISCO-PROCESS-MIB", "cpmThreadStackSize"), ("CISCO-PROCESS-MIB", "cpmThreadCpuUtilization"), ("CISCO-PROCESS-MIB", "cpmThreadBlockingProcess"), ("CISCO-PROCESS-MIB", "cpmThreadPriority"), ) )
if mibBuilder.loadTexts: cpmThreadGroup.setDescription("A collection of objects providing thread information\ninformation on devices running POSIX compliant OS.")
cpmVirtualProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 14)).setObjects(*(("CISCO-PROCESS-MIB", "cpmVirtualProcessMemAllocated"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessName"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessUtil5Min"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessUtil1Min"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessMemFreed"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessInvokeCount"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessRuntime"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessUtil5Sec"), ) )
if mibBuilder.loadTexts: cpmVirtualProcessGroup.setDescription("A collection of objects providing virtual process\ninformation on devices that can run virtual machines.")
cpmCPUTotalOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 15)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUMemoryUsedOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryFreeOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryKernelReservedOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryLowestOvrflw"), ) )
if mibBuilder.loadTexts: cpmCPUTotalOverflowGroup.setDescription("A collection of Overflow (Ovrflw) objects providing CPU load\nmonitoring information.")
cpmCPUTotalHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 16)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUMemoryHCFree"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCUsed"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCLowest"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCKernelReserved"), ) )
if mibBuilder.loadTexts: cpmCPUTotalHCGroup.setDescription("A collection of High Capacity (HC) objects providing CPU\nload monitoring information.")
cpmProcessExtRevOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 17)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessTextSegmentSizeOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcExtMemFreedRevOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcessDynamicMemorySizeOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcExtMemAllocatedRevOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcessDataSegmentSizeOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcessStackSizeOvrflw"), ) )
if mibBuilder.loadTexts: cpmProcessExtRevOverflowGroup.setDescription("A collection of Overflow objects providing additional\nand more detailed process monitoring information.")
cpmProcessExtRevHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 18)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcExtHCMemAllocatedRev"), ("CISCO-PROCESS-MIB", "cpmProcessHCStackSize"), ("CISCO-PROCESS-MIB", "cpmProcessHCTextSegmentSize"), ("CISCO-PROCESS-MIB", "cpmProcessHCDynamicMemorySize"), ("CISCO-PROCESS-MIB", "cpmProcExtHCMemFreedRev"), ("CISCO-PROCESS-MIB", "cpmProcessHCDataSegmentSize"), ) )
if mibBuilder.loadTexts: cpmProcessExtRevHCGroup.setDescription("A collection of High Capacity objects providing\nadditional and more detailed process monitoring \ninformation.")
cpmThreadOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 19)).setObjects(*(("CISCO-PROCESS-MIB", "cpmThreadStackSizeOvrflw"), ) )
if mibBuilder.loadTexts: cpmThreadOverflowGroup.setDescription("A collection of Overflow objects providing thread\ninformation on devices running POSIX compliant OS.")
cpmThreadHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 20)).setObjects(*(("CISCO-PROCESS-MIB", "cpmThreadHCStackSize"), ) )
if mibBuilder.loadTexts: cpmThreadHCGroup.setDescription("A collection of High Capacity objects providing thread\ninformation on devices running POSIX compliant OS.")
cpmVirtualProcessOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 21)).setObjects(*(("CISCO-PROCESS-MIB", "cpmVirtualProcessMemFreedOvrflw"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessMemAllocatedOvrflw"), ) )
if mibBuilder.loadTexts: cpmVirtualProcessOverflowGroup.setDescription("A collection of Overflow objects providing virtual process\ninformation on devices that can run virtual machines.")
cpmVirtualProcessHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 22)).setObjects(*(("CISCO-PROCESS-MIB", "cpmVirtualProcessHCMemFreed"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCMemAllocated"), ) )
if mibBuilder.loadTexts: cpmVirtualProcessHCGroup.setDescription("A collection of High Capacity objects providing virtual process\ninformation on devices that can run virtual machines.")
cpmCPULoadAvgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 23)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPULoadAvg15min"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvg5min"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvg1min"), ) )
if mibBuilder.loadTexts: cpmCPULoadAvgGroup.setDescription("A collection of objects providing CPU load average\ninformation")
cpmCPUTotalMemoryCommitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 24)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUMemoryCommitted"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryCommittedOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCCommitted"), ) )
if mibBuilder.loadTexts: cpmCPUTotalMemoryCommitGroup.setDescription("A collection of objects providing CPU system Committed memory\ninformation.")

# Compliances

cProcessMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 1)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUTotalGroup"), ("CISCO-PROCESS-MIB", "cpmProcessGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroup"), ) )
if mibBuilder.loadTexts: cProcessMIBCompliance.setDescription("The compliance statement for entities which implement\nthe Cisco Process MIB. This is deprecated and new \ncompliance cProcessMIBComplianceRev is added.")
cProcessMIBComplianceRev = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 2)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ) )
if mibBuilder.loadTexts: cProcessMIBComplianceRev.setDescription("The compliance statement for entities which implement\nthe Cisco Process MIB. This compliance module\ndeprecates cProcessMIBCompliance.")
cProcessMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 3)).setObjects(*(("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ) )
if mibBuilder.loadTexts: cProcessMIBComplianceRev1.setDescription("The compliance statement for entities which implement\nthe Cisco Process MIB. This compliance module\ndeprecates cProcessMIBComplianceRev.")
cProcessMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 4)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ) )
if mibBuilder.loadTexts: cProcessMIBComplianceRev2.setDescription("The compliance statement for entities which implement\nthe Cisco Process MIB. This compliance module\ndeprecates cProcessMIBComplianceRev1.")
cProcessMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 5)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessExtRevOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmThreadHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ) )
if mibBuilder.loadTexts: cProcessMIBComplianceRev3.setDescription("The compliance statement for entities which implement\nthe Cisco Process MIB. This compliance module\ndeprecates cProcessMIBComplianceRev2.")
cProcessMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 6)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessExtRevOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvgGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmThreadHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ) )
if mibBuilder.loadTexts: cProcessMIBComplianceRev4.setDescription("The compliance statement for entities which implement\nthe Cisco Process MIB. This compliance module\ndeprecates cProcessMIBComplianceRev3.")
cProcessMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 7)).setObjects(*(("CISCO-PROCESS-MIB", "cpmProcessExtRevOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMemoryCommitGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvgGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmThreadHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ) )
if mibBuilder.loadTexts: cProcessMIBComplianceRev5.setDescription("The compliance statement for entities which implement\nthe Cisco Process MIB. This compliance module\ndeprecates cProcessMIBComplianceRev4")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", PYSNMP_MODULE_ID=ciscoProcessMIB)

# Types
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", CPULoadAverage=CPULoadAverage)

# Objects
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", ciscoProcessMIB=ciscoProcessMIB, ciscoProcessMIBObjects=ciscoProcessMIBObjects, cpmCPU=cpmCPU, cpmCPUTotalTable=cpmCPUTotalTable, cpmCPUTotalEntry=cpmCPUTotalEntry, cpmCPUTotalIndex=cpmCPUTotalIndex, cpmCPUTotalPhysicalIndex=cpmCPUTotalPhysicalIndex, cpmCPUTotal5sec=cpmCPUTotal5sec, cpmCPUTotal1min=cpmCPUTotal1min, cpmCPUTotal5min=cpmCPUTotal5min, cpmCPUTotal5secRev=cpmCPUTotal5secRev, cpmCPUTotal1minRev=cpmCPUTotal1minRev, cpmCPUTotal5minRev=cpmCPUTotal5minRev, cpmCPUMonInterval=cpmCPUMonInterval, cpmCPUTotalMonIntervalValue=cpmCPUTotalMonIntervalValue, cpmCPUInterruptMonIntervalValue=cpmCPUInterruptMonIntervalValue, cpmCPUMemoryUsed=cpmCPUMemoryUsed, cpmCPUMemoryFree=cpmCPUMemoryFree, cpmCPUMemoryKernelReserved=cpmCPUMemoryKernelReserved, cpmCPUMemoryLowest=cpmCPUMemoryLowest, cpmCPUMemoryUsedOvrflw=cpmCPUMemoryUsedOvrflw, cpmCPUMemoryHCUsed=cpmCPUMemoryHCUsed, cpmCPUMemoryFreeOvrflw=cpmCPUMemoryFreeOvrflw, cpmCPUMemoryHCFree=cpmCPUMemoryHCFree, cpmCPUMemoryKernelReservedOvrflw=cpmCPUMemoryKernelReservedOvrflw, cpmCPUMemoryHCKernelReserved=cpmCPUMemoryHCKernelReserved, cpmCPUMemoryLowestOvrflw=cpmCPUMemoryLowestOvrflw, cpmCPUMemoryHCLowest=cpmCPUMemoryHCLowest, cpmCPULoadAvg1min=cpmCPULoadAvg1min, cpmCPULoadAvg5min=cpmCPULoadAvg5min, cpmCPULoadAvg15min=cpmCPULoadAvg15min, cpmCPUMemoryCommitted=cpmCPUMemoryCommitted, cpmCPUMemoryCommittedOvrflw=cpmCPUMemoryCommittedOvrflw, cpmCPUMemoryHCCommitted=cpmCPUMemoryHCCommitted, cpmProcess=cpmProcess, cpmProcessTable=cpmProcessTable, cpmProcessEntry=cpmProcessEntry, cpmProcessPID=cpmProcessPID, cpmProcessName=cpmProcessName, cpmProcessuSecs=cpmProcessuSecs, cpmProcessTimeCreated=cpmProcessTimeCreated, cpmProcessAverageUSecs=cpmProcessAverageUSecs, cpmProcessExtTable=cpmProcessExtTable, cpmProcessExtEntry=cpmProcessExtEntry, cpmProcExtMemAllocated=cpmProcExtMemAllocated, cpmProcExtMemFreed=cpmProcExtMemFreed, cpmProcExtInvoked=cpmProcExtInvoked, cpmProcExtRuntime=cpmProcExtRuntime, cpmProcExtUtil5Sec=cpmProcExtUtil5Sec, cpmProcExtUtil1Min=cpmProcExtUtil1Min, cpmProcExtUtil5Min=cpmProcExtUtil5Min, cpmProcExtPriority=cpmProcExtPriority, cpmProcessExtRevTable=cpmProcessExtRevTable, cpmProcessExtRevEntry=cpmProcessExtRevEntry, cpmProcExtMemAllocatedRev=cpmProcExtMemAllocatedRev, cpmProcExtMemFreedRev=cpmProcExtMemFreedRev, cpmProcExtInvokedRev=cpmProcExtInvokedRev, cpmProcExtRuntimeRev=cpmProcExtRuntimeRev, cpmProcExtUtil5SecRev=cpmProcExtUtil5SecRev, cpmProcExtUtil1MinRev=cpmProcExtUtil1MinRev, cpmProcExtUtil5MinRev=cpmProcExtUtil5MinRev, cpmProcExtPriorityRev=cpmProcExtPriorityRev, cpmProcessType=cpmProcessType, cpmProcessRespawn=cpmProcessRespawn, cpmProcessRespawnCount=cpmProcessRespawnCount, cpmProcessRespawnAfterLastPatch=cpmProcessRespawnAfterLastPatch, cpmProcessMemoryCore=cpmProcessMemoryCore, cpmProcessLastRestartUser=cpmProcessLastRestartUser, cpmProcessTextSegmentSize=cpmProcessTextSegmentSize, cpmProcessDataSegmentSize=cpmProcessDataSegmentSize, cpmProcessStackSize=cpmProcessStackSize, cpmProcessDynamicMemorySize=cpmProcessDynamicMemorySize, cpmProcExtMemAllocatedRevOvrflw=cpmProcExtMemAllocatedRevOvrflw, cpmProcExtHCMemAllocatedRev=cpmProcExtHCMemAllocatedRev, cpmProcExtMemFreedRevOvrflw=cpmProcExtMemFreedRevOvrflw, cpmProcExtHCMemFreedRev=cpmProcExtHCMemFreedRev, cpmProcessTextSegmentSizeOvrflw=cpmProcessTextSegmentSizeOvrflw, cpmProcessHCTextSegmentSize=cpmProcessHCTextSegmentSize, cpmProcessDataSegmentSizeOvrflw=cpmProcessDataSegmentSizeOvrflw, cpmProcessHCDataSegmentSize=cpmProcessHCDataSegmentSize, cpmProcessStackSizeOvrflw=cpmProcessStackSizeOvrflw, cpmProcessHCStackSize=cpmProcessHCStackSize, cpmProcessDynamicMemorySizeOvrflw=cpmProcessDynamicMemorySizeOvrflw, cpmProcessHCDynamicMemorySize=cpmProcessHCDynamicMemorySize, cpmCPUThresholdTable=cpmCPUThresholdTable, cpmCPUThresholdEntry=cpmCPUThresholdEntry, cpmCPUThresholdClass=cpmCPUThresholdClass, cpmCPURisingThresholdValue=cpmCPURisingThresholdValue, cpmCPURisingThresholdPeriod=cpmCPURisingThresholdPeriod, cpmCPUFallingThresholdValue=cpmCPUFallingThresholdValue, cpmCPUFallingThresholdPeriod=cpmCPUFallingThresholdPeriod, cpmCPUThresholdEntryStatus=cpmCPUThresholdEntryStatus, cpmCPUHistory=cpmCPUHistory, cpmCPUHistoryThreshold=cpmCPUHistoryThreshold, cpmCPUHistorySize=cpmCPUHistorySize, cpmCPUHistoryTable=cpmCPUHistoryTable, cpmCPUHistoryEntry=cpmCPUHistoryEntry, cpmCPUHistoryReportId=cpmCPUHistoryReportId, cpmCPUHistoryReportSize=cpmCPUHistoryReportSize, cpmCPUHistoryTotalUtil=cpmCPUHistoryTotalUtil, cpmCPUHistoryInterruptUtil=cpmCPUHistoryInterruptUtil, cpmCPUHistoryCreatedTime=cpmCPUHistoryCreatedTime, cpmCPUProcessHistoryTable=cpmCPUProcessHistoryTable, cpmCPUProcessHistoryEntry=cpmCPUProcessHistoryEntry, cpmCPUProcessHistoryIndex=cpmCPUProcessHistoryIndex, cpmCPUHistoryProcId=cpmCPUHistoryProcId, cpmCPUHistoryProcName=cpmCPUHistoryProcName, cpmCPUHistoryProcCreated=cpmCPUHistoryProcCreated, cpmCPUHistoryProcUtil=cpmCPUHistoryProcUtil, cpmThread=cpmThread, cpmThreadTable=cpmThreadTable, cpmThreadEntry=cpmThreadEntry, cpmThreadID=cpmThreadID, cpmThreadName=cpmThreadName, cpmThreadPriority=cpmThreadPriority, cpmThreadState=cpmThreadState, cpmThreadBlockingProcess=cpmThreadBlockingProcess, cpmThreadCpuUtilization=cpmThreadCpuUtilization, cpmThreadStackSize=cpmThreadStackSize, cpmThreadStackSizeOvrflw=cpmThreadStackSizeOvrflw, cpmThreadHCStackSize=cpmThreadHCStackSize, cpmVirtualProcess=cpmVirtualProcess, cpmVirtualProcessTable=cpmVirtualProcessTable, cpmVirtualProcessEntry=cpmVirtualProcessEntry, cpmVirtualProcessID=cpmVirtualProcessID, cpmVirtualProcessName=cpmVirtualProcessName)
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", cpmVirtualProcessUtil5Sec=cpmVirtualProcessUtil5Sec, cpmVirtualProcessUtil1Min=cpmVirtualProcessUtil1Min, cpmVirtualProcessUtil5Min=cpmVirtualProcessUtil5Min, cpmVirtualProcessMemAllocated=cpmVirtualProcessMemAllocated, cpmVirtualProcessMemFreed=cpmVirtualProcessMemFreed, cpmVirtualProcessInvokeCount=cpmVirtualProcessInvokeCount, cpmVirtualProcessRuntime=cpmVirtualProcessRuntime, cpmVirtualProcessMemAllocatedOvrflw=cpmVirtualProcessMemAllocatedOvrflw, cpmVirtualProcessHCMemAllocated=cpmVirtualProcessHCMemAllocated, cpmVirtualProcessMemFreedOvrflw=cpmVirtualProcessMemFreedOvrflw, cpmVirtualProcessHCMemFreed=cpmVirtualProcessHCMemFreed, ciscoProcessMIBNotifPrefix=ciscoProcessMIBNotifPrefix, ciscoProcessMIBNotifs=ciscoProcessMIBNotifs, ciscoProcessMIBConformance=ciscoProcessMIBConformance, cpmCompliances=cpmCompliances, cpmGroups=cpmGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", cpmCPURisingThreshold=cpmCPURisingThreshold, cpmCPUFallingThreshold=cpmCPUFallingThreshold)

# Groups
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", cpmCPUTotalGroup=cpmCPUTotalGroup, cpmProcessGroup=cpmProcessGroup, cpmProcessExtGroup=cpmProcessExtGroup, cpmCPUTotalGroupRev=cpmCPUTotalGroupRev, cpmProcessExtGroupRev=cpmProcessExtGroupRev, cpmProcessGroupRev=cpmProcessGroupRev, cpmCPUTotalGroupRev1=cpmCPUTotalGroupRev1, cpmCPUThresholdGroup=cpmCPUThresholdGroup, cpmCPUHistoryGroup=cpmCPUHistoryGroup, cpmCPUThresholdNotificationGroup=cpmCPUThresholdNotificationGroup, cpmCPUPosixMemoryGroup=cpmCPUPosixMemoryGroup, cpmPosixProcessGroup=cpmPosixProcessGroup, cpmThreadGroup=cpmThreadGroup, cpmVirtualProcessGroup=cpmVirtualProcessGroup, cpmCPUTotalOverflowGroup=cpmCPUTotalOverflowGroup, cpmCPUTotalHCGroup=cpmCPUTotalHCGroup, cpmProcessExtRevOverflowGroup=cpmProcessExtRevOverflowGroup, cpmProcessExtRevHCGroup=cpmProcessExtRevHCGroup, cpmThreadOverflowGroup=cpmThreadOverflowGroup, cpmThreadHCGroup=cpmThreadHCGroup, cpmVirtualProcessOverflowGroup=cpmVirtualProcessOverflowGroup, cpmVirtualProcessHCGroup=cpmVirtualProcessHCGroup, cpmCPULoadAvgGroup=cpmCPULoadAvgGroup, cpmCPUTotalMemoryCommitGroup=cpmCPUTotalMemoryCommitGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", cProcessMIBCompliance=cProcessMIBCompliance, cProcessMIBComplianceRev=cProcessMIBComplianceRev, cProcessMIBComplianceRev1=cProcessMIBComplianceRev1, cProcessMIBComplianceRev2=cProcessMIBComplianceRev2, cProcessMIBComplianceRev3=cProcessMIBComplianceRev3, cProcessMIBComplianceRev4=cProcessMIBComplianceRev4, cProcessMIBComplianceRev5=cProcessMIBComplianceRev5)
