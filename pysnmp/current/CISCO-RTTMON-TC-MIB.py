# PySNMP SMI module. Autogenerated from smidump -f python CISCO-RTTMON-TC-MIB
# by libsmi2pysnmp-0.1.3 at Mon Dec  7 11:16:59 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( Bits, Integer32, ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class RttMonCodecType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,0,1,)
    namedValues = NamedValues(("notApplicable", 0), ("g711ulaw", 1), ("g711alaw", 2), ("g729a", 3), )
    
class RttMonCtrlIndex(Unsigned32):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,2147483647)
    
class RttMonIdLst(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)
    
class RttMonLSPPingReplyMode(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("replyIpv4Udp", 1), ("replyIpv4UdpRA", 2), )
    
class RttMonOperation(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,7,0,6,3,1,5,2,)
    namedValues = NamedValues(("notApplicable", 0), ("httpGet", 1), ("httpRaw", 2), ("ftpGet", 3), ("ftpPassive", 4), ("ftpActive", 5), ("voipDTAlertRinging", 6), ("voipDTConnectOK", 7), )
    
class RttMonProtocol(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(11,40,1,16,35,21,37,41,10,25,26,7,32,30,34,23,2,9,19,27,5,12,39,8,38,15,13,42,31,20,17,4,14,6,18,24,22,28,36,29,3,33,)
    namedValues = NamedValues(("notApplicable", 1), ("appleTalkEchoAppl", 10), ("decNetEcho", 11), ("decNetEchoAppl", 12), ("ipxEcho", 13), ("ipxEchoAppl", 14), ("isoClnsEcho", 15), ("isoClnsEchoAppl", 16), ("vinesEcho", 17), ("vinesEchoAppl", 18), ("xnsEcho", 19), ("ipIcmpEcho", 2), ("xnsEchoAppl", 20), ("apolloEcho", 21), ("apolloEchoAppl", 22), ("netbiosEchoAppl", 23), ("ipTcpConn", 24), ("httpAppl", 25), ("dnsAppl", 26), ("jitterAppl", 27), ("dlswAppl", 28), ("dhcpAppl", 29), ("ipUdpEchoAppl", 3), ("ftpAppl", 30), ("mplsLspPingAppl", 31), ("voipAppl", 32), ("rtpAppl", 33), ("icmpJitterAppl", 34), ("ethernetPingAppl", 35), ("ethernetJitterAppl", 36), ("videoAppl", 37), ("y1731dmm", 38), ("y17311dm", 39), ("snaRUEcho", 4), ("y1731lmm", 40), ("mcastJitterAppl", 41), ("y1731slm", 42), ("snaLU0EchoAppl", 5), ("snaLU2EchoAppl", 6), ("snaLU62Echo", 7), ("snaLU62EchoAppl", 8), ("appleTalkEcho", 9), )
    
class RttMonReactVar(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(27,21,3,30,18,1,15,8,28,5,9,19,13,2,11,31,14,23,29,12,10,32,17,6,20,4,26,7,22,24,25,16,)
    namedValues = NamedValues(("rtt", 1), ("jitterAvg", 10), ("icpif", 11), ("packetMIA", 12), ("packetLateArrival", 13), ("packetOutOfSequence", 14), ("maxOfPositiveSD", 15), ("maxOfNegativeSD", 16), ("maxOfPositiveDS", 17), ("maxOfNegativeDS", 18), ("iaJitterDS", 19), ("jitterSDAvg", 2), ("frameLossDS", 20), ("mosLQDS", 21), ("mosCQDS", 22), ("rFactorDS", 23), ("successivePacketLoss", 24), ("maxOfLatencyDS", 25), ("maxOfLatencySD", 26), ("latencyDSAvg", 27), ("latencySDAvg", 28), ("packetLoss", 29), ("jitterDSAvg", 3), ("iaJitterSD", 30), ("mosCQSD", 31), ("rFactorSD", 32), ("packetLossSD", 4), ("packetLossDS", 5), ("mos", 6), ("timeout", 7), ("connectionLoss", 8), ("verifyError", 9), )
    
class RttMonRttType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(19,16,9,24,1,22,14,5,12,2,4,10,8,11,15,6,7,18,20,21,13,25,23,17,3,)
    namedValues = NamedValues(("echo", 1), ("dlsw", 10), ("dhcp", 11), ("ftp", 12), ("voip", 13), ("rtp", 14), ("lspGroup", 15), ("icmpjitter", 16), ("lspPing", 17), ("lspTrace", 18), ("ethernetPing", 19), ("pathEcho", 2), ("ethernetJitter", 20), ("lspPingPseudowire", 21), ("video", 22), ("y1731Delay", 23), ("y1731Loss", 24), ("mcastJitter", 25), ("fileIO", 3), ("script", 4), ("udpEcho", 5), ("tcpConnect", 6), ("http", 7), ("dns", 8), ("jitter", 9), )
    
class RttMonTargetAddress(OctetString):
    pass

class RttMplsVpnMonLpdFailureSense(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,3,4,1,7,6,2,)
    namedValues = NamedValues(("unknown", 1), ("noPath", 2), ("allPathsBroken", 3), ("allPathsUnexplorable", 4), ("allPathsBrokenOrUnexplorable", 5), ("timeout", 6), ("error", 7), )
    
class RttMplsVpnMonLpdGrpStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,2,4,)
    namedValues = NamedValues(("unknown", 1), ("up", 2), ("partial", 3), ("down", 4), )
    
class RttMplsVpnMonRttType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,2,)
    namedValues = NamedValues(("jitter", 1), ("echo", 2), ("pathEcho", 3), )
    
class RttReset(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("ready", 1), ("reset", 2), )
    
class RttResponseSense(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(26,19,11,28,32,10,23,12,7,14,9,35,3,15,36,29,38,5,1,2,37,18,33,34,21,13,30,22,0,17,4,16,6,25,24,31,20,8,27,)
    namedValues = NamedValues(("other", 0), ("ok", 1), ("applicationSpecific", 10), ("dnsServerTimeout", 11), ("tcpConnectTimeout", 12), ("httpTransactionTimeout", 13), ("dnsQueryError", 14), ("httpError", 15), ("error", 16), ("mplsLspEchoTxError", 17), ("mplsLspUnreachable", 18), ("mplsLspMalformedReq", 19), ("disconnected", 2), ("mplsLspReachButNotFEC", 20), ("enableOk", 21), ("enableNoConnect", 22), ("enableVersionFail", 23), ("enableInternalError", 24), ("enableAbort", 25), ("enableFail", 26), ("enableAuthFail", 27), ("enableFormatError", 28), ("enablePortInUse", 29), ("overThreshold", 3), ("statsRetrieveOk", 30), ("statsRetrieveNoConnect", 31), ("statsRetrieveVersionFail", 32), ("statsRetrieveInternalError", 33), ("statsRetrieveAbort", 34), ("statsRetrieveFail", 35), ("statsRetrieveAuthFail", 36), ("statsRetrieveFormatError", 37), ("statsRetrievePortInUse", 38), ("timeout", 4), ("busy", 5), ("notConnected", 6), ("dropped", 7), ("sequenceError", 8), ("verifyError", 9), )
    

# Objects

ciscoRttMonTCMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 485)).setRevisions(("2012-05-25 00:00","2011-09-15 00:00","2010-04-26 00:00","2006-08-11 00:00","2006-07-17 00:00","2006-03-02 00:00","2005-08-09 00:00",))
if mibBuilder.loadTexts: ciscoRttMonTCMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoRttMonTCMIB.setContactInfo("Cisco Systems, Inc.\nCustomer Service \n\nPostal: 170 W Tasman Drive\nSan Jose, CA 95134\n\nTel: +1 800 553 NETS\nEmail: cs-ipsla@cisco.com")
if mibBuilder.loadTexts: ciscoRttMonTCMIB.setDescription("This MIB contains textual conventions used by\nCISCO-RTTMON-MIB, CISCO-RTTMON-RTP-MIB and \nCISCO-RTTMON-ICMP-MIB, but they are not limited \nto only these MIBs. \nThese textual conventions were originally defined in \nCISCO-RTTMON-MIB.\n\nAcronyms:\n  FEC: Forward Equivalence Class\n  LPD: Label Path Discovery\n  LSP: Label Switched Path\n  MPLS: Multi Protocol Label Switching\n  RTT: Round Trip Time\n  SAA: Service Assurance Agent\n  VPN: Virtual Private Network\n  CFM: Connection Fault Management")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-RTTMON-TC-MIB", PYSNMP_MODULE_ID=ciscoRttMonTCMIB)

# Types
mibBuilder.exportSymbols("CISCO-RTTMON-TC-MIB", RttMonCodecType=RttMonCodecType, RttMonCtrlIndex=RttMonCtrlIndex, RttMonIdLst=RttMonIdLst, RttMonLSPPingReplyMode=RttMonLSPPingReplyMode, RttMonOperation=RttMonOperation, RttMonProtocol=RttMonProtocol, RttMonReactVar=RttMonReactVar, RttMonRttType=RttMonRttType, RttMonTargetAddress=RttMonTargetAddress, RttMplsVpnMonLpdFailureSense=RttMplsVpnMonLpdFailureSense, RttMplsVpnMonLpdGrpStatus=RttMplsVpnMonLpdGrpStatus, RttMplsVpnMonRttType=RttMplsVpnMonRttType, RttReset=RttReset, RttResponseSense=RttResponseSense)

# Objects
mibBuilder.exportSymbols("CISCO-RTTMON-TC-MIB", ciscoRttMonTCMIB=ciscoRttMonTCMIB)

