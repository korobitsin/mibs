# PySNMP SMI module. Autogenerated from smidump -f python ACD-PAA-MIB
# by libsmi2pysnmp-0.1.3 at Thu Apr 24 23:40:30 2014,
# Python version (2, 6, 6, 'final', 0)

# Imports

( acdMibs, ) = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DateAndTime, DisplayString, MacAddress, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "TruthValue")

# Objects

acdPaa = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 5)).setRevisions(("2009-02-23 01:00","2008-02-06 01:00","2007-10-12 01:00","2006-12-18 01:00","2006-11-11 01:00",))
if mibBuilder.loadTexts: acdPaa.setOrganization("Accedian Networks, Inc.")
if mibBuilder.loadTexts: acdPaa.setContactInfo("Accedian Technical Assistance Center\nAccedian Networks, Inc.\n4878 Levy, suite 202\nSaint-Laurent, Quebec Canada H4R 2P1\nE-mail: support@accedian.com")
if mibBuilder.loadTexts: acdPaa.setDescription("PAA database for this Accedian Networks device.")
acdPaaResultTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1))
if mibBuilder.loadTexts: acdPaaResultTable.setDescription("Result table of all Paa entries")
acdPaaResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1)).setIndexNames((0, "ACD-PAA-MIB", "acdPaaResultID"))
if mibBuilder.loadTexts: acdPaaResultEntry.setDescription("An entry consisting of results for a PAA instance.")
acdPaaResultID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultID.setDescription("Unique value for each PAA instance. Its value ranges from 1 to\nMAXINT (4 bytes). ")
acdPaaResultState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,3,1,6,5,2,4,)).subtype(namedValues=NamedValues(("disabled", 0), ("associating", 1), ("associated", 2), ("running", 3), ("idle", 4), ("lockedIS", 5), ("lockedOOS", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultState.setDescription("Indicates the state of the instance.")
acdPaaResultPktLossNeCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValid.setDescription("Indicates the validity of the Near-end current packet loss results.")
acdPaaResultPktLossNeCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValue.setDescription("Indicates the Near-end current packet loss. The packet loss is the\npercent of packets transmitted but not received of the Ethernet segment\nin hundredths of a percent (100 is 1%).")
acdPaaResultPktLossNePrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValid.setDescription("Indicates the validity of the Near-end previous packet loss results.")
acdPaaResultPktLossNePrevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValue.setDescription("Indicates the Near-end previous packet loss. The packet loss is the\npercent of packets transmitted but not received of the Ethernet segment\nin hundredths of a percent (100 is 1%).")
acdPaaResultPktLossFeCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValid.setDescription("Indicates the validity of the Far-end current packet loss results.")
acdPaaResultPktLossFeCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValue.setDescription("Indicates the Far-end current packet loss. The packet loss is the\npercent of packets transmitted but not received of the Ethernet segment\nin hundredths of a percent (100 is 1%).")
acdPaaResultPktLossFePrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValid.setDescription("Indicates the validity of the Far-end previous packet loss results.")
acdPaaResultPktLossFePrevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValue.setDescription("Indicates the Far-end previous packet loss. The packet loss is the\npercent of packets transmitted but not received of the Ethernet segment\nin hundredths of a percent (100 is 1%).")
acdPaaResultOneWayDvInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvInstValue.setDescription("Indicates the One-way delay variation instantaneous value. The value\nis expressed in micro-seconds.")
acdPaaResultOneWayDvCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrValid.setDescription("Indicates the validity of the current One-way delay variation results.")
acdPaaResultOneWayDvCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrMinValue.setDescription("Indicates the current One-way delay variation minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultOneWayDvCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrMaxValue.setDescription("Indicates the current One-way delay variation maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultOneWayDvCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrAvgValue.setDescription("Indicates the current One-way delay variation average value. The value\nis expressed in micro-seconds.")
acdPaaResultOneWayDvCurrThreshExc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrThreshExc.setDescription("Indicates the current number of samples exceeding the limit.")
acdPaaResultOneWayDvPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevValid.setDescription("Indicates the validity of the previous One-way delay variation results.")
acdPaaResultOneWayDvPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevMinValue.setDescription("Indicates the previous One-way delay variation minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultOneWayDvPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevMaxValue.setDescription("Indicates the previous One-way delay variation maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultOneWayDvPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevAvgValue.setDescription("Indicates the previous One-way delay variation average value. The value\nis expressed in micro-seconds.")
acdPaaResultOneWayDvPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevThreshEx.setDescription("Indicates the previous number of samples exceeding the limit.")
acdPaaResultTwoWayDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayInstValue.setDescription("Indicates the Two-way delay instantaneous value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrValid.setDescription("Indicates the validity of the current Two-way delay results.")
acdPaaResultTwoWayDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrMinValue.setDescription("Indicates the current Two-way delay minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrMaxValue.setDescription("Indicates the current Two-way delay maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrAvgValue.setDescription("Indicates the current Two-way delay average value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrThreshEx.setDescription("Indicates the current number of samples exceeding the limit.")
acdPaaResultTwoWayDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevValid.setDescription("Indicates the validity of the previous Two-way delay results.")
acdPaaResultTwoWayDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevMinValue.setDescription("Indicates the previous Two-way delay minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevMaxValue.setDescription("Indicates the previous Two-way delay maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevAvgValue.setDescription("Indicates the previous Two-way delay average value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevThreshEx.setDescription("Indicates the previous number of samples exceeding the limit.")
acdPaaResultTwoWayDvInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvInstValue.setDescription("Indicates the Two-way delay variation instantaneous value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDvCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrValid.setDescription("Indicates the validity of the current Two-way delay variation results.")
acdPaaResultTwoWayDvCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrMinValue.setDescription("Indicates the current Two-way delay variation minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDvCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrMaxValue.setDescription("Indicates the current Two-way delay variation maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDvCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrAvgValue.setDescription("Indicates the current Two-way delay variation average value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDvCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrThreshEx.setDescription("Indicates the current number of samples exceeding the limit.")
acdPaaResultTwoWayDvPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevValid.setDescription("Indicates the validity of the previous Two-way delay variation results.")
acdPaaResultTwoWayDvPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevMinValue.setDescription("Indicates the previous Two-way delay variation minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDvPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevMaxValue.setDescription("Indicates the previous Two-way delay variation maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDvPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevAvgValue.setDescription("Indicates the previous Two-way delay variation average value. The value\nis expressed in micro-seconds.")
acdPaaResultTwoWayDvPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevThreshEx.setDescription("Indicates the previous number of samples exceeding the limit.")
acdPaaResultOneWayDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayInstValue.setDescription("Indicate the One-way delay instantaneous value. The value\nis express in micro-seconds.")
acdPaaResultOneWayDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrValid.setDescription("Indicate the validity of the current One-way delay results.")
acdPaaResultOneWayDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrMinValue.setDescription("Indicate the current One-way delay minimum value. The value\nis express in micro-seconds.")
acdPaaResultOneWayDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrMaxValue.setDescription("Indicate the current One-way delay maximum value. The value\nis express in micro-seconds.")
acdPaaResultOneWayDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrAvgValue.setDescription("Indicate the current One-way delay average value. The value\nis express in micro-seconds.")
acdPaaResultOneWayDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrThreshEx.setDescription("Indicate the current number of sample exceeding the limit.")
acdPaaResultOneWayDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevValid.setDescription("Indicate the validity of the previous One-way delay results.")
acdPaaResultOneWayDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevMinValue.setDescription("Indicate the previous One-way delay minimum value. The value\nis express in micro-seconds.")
acdPaaResultOneWayDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevMaxValue.setDescription("Indicate the previous One-way delay maximum value. The value\nis express in micro-seconds.")
acdPaaResultOneWayDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevAvgValue.setDescription("Indicate the previous One-way delay average value. The value\nis express in micro-seconds.")
acdPaaResultOneWayDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevThreshEx.setDescription("Indicate the previous number of sample exceeding the limit.")
acdPaaResultPktLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossTime.setDescription("Indicates the time when the current packet loss results\nwere moved to the previous packet loss results.")
acdPaaResultOneWayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayTime.setDescription("Indicates the time when the current one-way results\nwere moved to the previous one-way results.")
acdPaaResultTwoWayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayTime.setDescription("Indicates the time when the current two-way results\nwere moved to the previous two-way results.")
acdPaaResultPktLossNeCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrSamples.setDescription("Indicates the number of samples gathered to calculate\nthe current period near-end packet loss results.")
acdPaaResultPktLossNePrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevSamples.setDescription("Indicates the number of samples gathered to calculate\nthe previous period near-end packet loss results.")
acdPaaResultPktLossFeCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrSamples.setDescription("Indicates the number of samples gathered to calculate\nthe current period far-end packet loss results.")
acdPaaResultPktLossFePrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevSamples.setDescription("Indicates the number of samples gathered to calculate\nthe previous period far-end packet loss results.")
acdPaaResultOneWayDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayCurrSamples.setDescription("Indicates the number of samples gathered to calculate\nthe current period one-way delay results.")
acdPaaResultOneWayDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDelayPrevSamples.setDescription("Indicates the number of samples gathered to calculate\nthe previous period one-way delay results.")
acdPaaResultOneWayDvCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvCurrSamples.setDescription("Indicates the number of samples gathered to calculate\nthe current period one-way delay variation results.")
acdPaaResultOneWayDvPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultOneWayDvPrevSamples.setDescription("Indicates the number of samples gathered to calculate\nthe previous period one-way delay variation results.")
acdPaaResultTwoWayDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayCurrSamples.setDescription("Indicates the number of samples gathered to calculate\nthe current period two-way delay results.")
acdPaaResultTwoWayDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDelayPrevSamples.setDescription("Indicates the number of samples gathered to calculate\nthe previous period two-way delay results.")
acdPaaResultTwoWayDvCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 68), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvCurrSamples.setDescription("Indicates the number of samples gathered to calculate\nthe current period two-way delay variation results.")
acdPaaResultTwoWayDvPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 69), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultTwoWayDvPrevSamples.setDescription("Indicates the number of samples gathered to calculate\nthe previous period two-way delay variation results.")
acdPaaResultIgmpJoinDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayInstValue.setDescription("Indicates the IGMP Join delay instantaneous value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpJoinDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 71), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrValid.setDescription("Indicates the validity of the current IGMP Join delay results.")
acdPaaResultIgmpJoinDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrMinValue.setDescription("Indicates the current IGMP Join delay minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpJoinDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrMaxValue.setDescription("Indicates the current IGMP Join delay maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpJoinDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrAvgValue.setDescription("Indicates the current IGMP Join delay average value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpJoinDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrThreshEx.setDescription("Indicates the current number of IGMP Join samples exceeding the limit.")
acdPaaResultIgmpJoinDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 76), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevValid.setDescription("Indicates the validity of the previous IGMP Join delay results.")
acdPaaResultIgmpJoinDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevMinValue.setDescription("Indicates the previous IGMP Join delay minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpJoinDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevMaxValue.setDescription("Indicates the previous IGMP Join delay maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpJoinDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevAvgValue.setDescription("Indicates the previous IGMP Join delay average value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpJoinDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevThreshEx.setDescription("Indicates the previous number of IGMP Join samples exceeding the limit.")
acdPaaResultIgmpLeaveDelayInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayInstValue.setDescription("Indicates the IGMP Leave delay instantaneous value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpLeaveDelayCurrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 82), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrValid.setDescription("Indicates the validity of the current IGMP Leave delay results.")
acdPaaResultIgmpLeaveDelayCurrMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrMinValue.setDescription("Indicates the current IGMP Leave delay minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpLeaveDelayCurrMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrMaxValue.setDescription("Indicates the current IGMP Leave delay maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpLeaveDelayCurrAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrAvgValue.setDescription("Indicates the current IGMP Leave delay average value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpLeaveDelayCurrThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrThreshEx.setDescription("Indicates the current number of IGMP Leave samples exceeding the limit.")
acdPaaResultIgmpLeaveDelayPrevValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 87), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevValid.setDescription("Indicates the validity of the previous IGMP Leave delay results.")
acdPaaResultIgmpLeaveDelayPrevMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevMinValue.setDescription("Indicates the previous IGMP Leave delay minimum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpLeaveDelayPrevMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevMaxValue.setDescription("Indicates the previous IGMP Leave delay maximum value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpLeaveDelayPrevAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevAvgValue.setDescription("Indicates the previous IGMP Leave delay average value. The value\nis expressed in micro-seconds.")
acdPaaResultIgmpLeaveDelayPrevThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 91), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevThreshEx.setDescription("Indicates the previous number of IGMP Leave samples exceeding the limit.")
acdPaaResultIgmpJoinDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 92), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayTime.setDescription("Indicates the time when the current IGMP Join delay results\nwere moved to the previous IGMP join delay results.")
acdPaaResultIgmpLeaveDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayTime.setDescription("Indicates the time when the current IGMP Leave results\nwere moved to the previous IGMP Leave results.")
acdPaaResultIgmpJoinDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayCurrSamples.setDescription("Indicates the number of IGMP Join samples gathered to calculate\nthe current period IGMP Join delay results.")
acdPaaResultIgmpJoinDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpJoinDelayPrevSamples.setDescription("Indicates the number of IGMP Join samples gathered to calculate\nthe previous period IGMP Join delay results.")
acdPaaResultIgmpLeaveDelayCurrSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayCurrSamples.setDescription("Indicates the number of IGMP Leave samples gathered to calculate\nthe current period IGMP Leave delay results.")
acdPaaResultIgmpLeaveDelayPrevSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 97), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultIgmpLeaveDelayPrevSamples.setDescription("Indicates the number of IGMP Leave samples gathered to calculate\nthe previous period IGMP Leave delay results.")
acdPaaResultPktLossCurrGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 98), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossCurrGaps.setDescription("Indicates the number of gaps that occured in\nthe current period.")
acdPaaResultPktLossPrevGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossPrevGaps.setDescription("Indicates the number of gaps that occured in\nthe previous period.")
acdPaaResultPktLossCurrLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossCurrLargestGap.setDescription("Indicates the size of the largest gap that occured in\nthe current period.")
acdPaaResultPktLossPrevLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossPrevLargestGap.setDescription("Indicates the size of the largest gap that occured in\nthe previous period.")
acdPaaResultPktLossNeCurrValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 102), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrValueExt.setDescription("Extended near-end current packet loss. The packet loss is\nthe percent of packets transmitted but not received in\nmillionth of a percent (1,000,000 is 1%).")
acdPaaResultPktLossNePrevValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 103), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevValueExt.setDescription("Extended near-end previous packet loss. The packet loss is\nthe percent of packets transmitted but not received in\nmillionth of a percent (1,000,000 is 1%).")
acdPaaResultPktLossFeCurrValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 104), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrValueExt.setDescription("Extended far-end current packet loss. The packet loss is\nthe percent of packets transmitted but not received in\nmillionth of a percent (1,000,000 is 1%).")
acdPaaResultPktLossFePrevValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 105), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevValueExt.setDescription("Extended far-end previous packet loss. The packet loss is\nthe percent of packets transmitted but not received in\nmillionth of a percent (1,000,000 is 1%).")
acdPaaResultPktLossNeCurrNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 106), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNeCurrNbrLoss.setDescription("Indicates the current period number of near-end packet lost.\nThis should be less or equal to acdPaaResultPktLossNeCurrSamples. ")
acdPaaResultPktLossNePrevNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 107), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossNePrevNbrLoss.setDescription("Indicates the previous period number of near-end packet lost.\nThis should be less or equal to acdPaaResultPktLossNePrevSamples.")
acdPaaResultPktLossFeCurrNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 108), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFeCurrNbrLoss.setDescription("Indicates the current period number of far-end packet lost.\nThis should be less or equal to acdPaaResultPktLossFeCurrSamples. ")
acdPaaResultPktLossFePrevNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 1, 1, 109), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaResultPktLossFePrevNbrLoss.setDescription("Indicates the previous period number of far-end packet lost.\nThis should be less or equal to acdPaaResultPktLossFePrevSamples.")
acdPaaStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2))
if mibBuilder.loadTexts: acdPaaStatusTable.setDescription("Status table of all Paa entries")
acdPaaStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1)).setIndexNames((0, "ACD-PAA-MIB", "acdPaaStatusID"))
if mibBuilder.loadTexts: acdPaaStatusEntry.setDescription("An entry consisting of the status for a PAA instance.")
acdPaaStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusID.setDescription("Unique value for each PAA instance. Its value ranges from 1 to\nMAXINT (4 bytes). ")
acdPaaStatusCcAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusCcAlert.setDescription("Indicates the presence of the Connectivity Check alert.")
acdPaaStatusPktLossAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusPktLossAlert.setDescription("Indicates the presence of the Packet Loss alert.")
acdPaaStatusOneWayDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayDvAlert.setDescription("Indicates the presence of the One-way Delay Variation alert.")
acdPaaStatusOneWayAvgDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayAvgDvAlert.setDescription("Indicates the presence of the One-way Average Delay Variation alert.")
acdPaaStatusTwoWayDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayDelayAlert.setDescription("Indicates the presence of the Two-way Delay alert.")
acdPaaStatusTwoWayAvgDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayAvgDelayAlert.setDescription("Indicates the presence of the Two-way Average Delay alert.")
acdPaaStatusTwoWayDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayDvAlert.setDescription("Indicates the presence of the Two-way Delay Variation alert.")
acdPaaStatusTwoWayAvgDvAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusTwoWayAvgDvAlert.setDescription("Indicates the presence of the Two-way Average Delay Variation alert.")
acdPaaStatusOneWayDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayDelayAlert.setDescription("Indicate the presence of the One Way Delay alert.")
acdPaaStatusOneWayAvgDelayAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusOneWayAvgDelayAlert.setDescription("Indicate the presence of the One Way Average Delay alert.")
acdPaaStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(0,3,1,6,5,2,4,)).subtype(namedValues=NamedValues(("disabled", 0), ("associating", 1), ("associated", 2), ("running", 3), ("idle", 4), ("lockedIS", 5), ("lockedOOS", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusState.setDescription("Paa instance state.")
acdPaaStatusPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaStatusPeerAddress.setDescription("The peer address. Dynamically resolved or statically configured.")
acdPaaUdpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3))
if mibBuilder.loadTexts: acdPaaUdpCfgTable.setDescription("Configuration table of all UDP PAA entries.")
acdPaaUdpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1)).setIndexNames((0, "ACD-PAA-MIB", "acdPaaUdpCfgID"))
if mibBuilder.loadTexts: acdPaaUdpCfgEntry.setDescription("An entry consisting of all settings to manage a PAA instance.")
acdPaaUdpCfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaUdpCfgID.setDescription("Unique value for each PAA instance. This value follows the ordering\nof the status and the results table. Its value ranges from 1 to\nMAXINT (4 bytes).")
acdPaaUdpCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgName.setDescription("This is a string to identify this PAA instance.")
acdPaaUdpCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("enable", 0), ("disable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgState.setDescription("Configuration state of this PAA entry.")
acdPaaUdpCfgPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktSize.setDescription("Transmit packet size.")
acdPaaUdpCfgSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgSamplingPeriod.setDescription("Interval in milliseconds at which PAA issues PAA measurement packets.")
acdPaaUdpCfgCcLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgCcLossThresh.setDescription("Maximum number of lost CCM (Connectivity Check Messages) for declaring a connectvity loss.")
acdPaaUdpCfgPktLossRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossRefPeriod.setDescription("Reference period in milliseconds for packet loss measurement.")
acdPaaUdpCfgPktLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossThresh.setDescription("Allowed packet loss, in pecentage (%).")
acdPaaUdpCfgOneWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayRefPeriod.setDescription("Reference period in milliseconds for one-way measurement.")
acdPaaUdpCfgOneWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDvMax.setDescription("Maximum allowed instantaneous delay variation.")
acdPaaUdpCfgOneWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDvThresh.setDescription("Number of consecutive delay variations greater than the threshold.")
acdPaaUdpCfgOneWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayAvgDvThresh.setDescription("One-way average delay variation threshold.")
acdPaaUdpCfgTwoWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayRefPeriod.setDescription("Reference period in milliseconds for two-way measurement.")
acdPaaUdpCfgTwoWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDelayMax.setDescription("Maximum allowed instantaneous delay.")
acdPaaUdpCfgTwoWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDelayThresh.setDescription("Number of consecutive delays greater than the threshold.")
acdPaaUdpCfgTwoWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayAvgDelayThresh.setDescription("Two-way average delay threshold.")
acdPaaUdpCfgTwoWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDvMax.setDescription("Maximum allowed instantaneous delay variation.")
acdPaaUdpCfgTwoWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayDvThresh.setDescription("Number of consecutive delay variations greater than the threshold.")
acdPaaUdpCfgTwoWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgTwoWayAvgDvThresh.setDescription("Two-way average delay variation threshold.")
acdPaaUdpCfgIPv4DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIPv4DstAddr.setDescription("The destination IP address used to reach the peer PAA instance.")
acdPaaUdpCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPortNumber.setDescription("The source UDP port number on which to listen for peer PAA samples.")
acdPaaUdpCfgDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgDscpValue.setDescription("The DSCP value used to reach the peer PAA instance. Its value ranges\nfrom 0 to 64.")
acdPaaUdpCfgVlan1PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgVlan1PbitsValue.setDescription("The first VLAN priority used to tag the outgoing traffic.\nIts value ranges from 0 to 7.")
acdPaaUdpCfgVlan2PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgVlan2PbitsValue.setDescription("The second VLAN priority used to tag the outgoing traffic.\nIts value ranges from 0 to 7.")
acdPaaUdpCfgOneWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDelayMax.setDescription("Maximum allowed instantaneous delay.")
acdPaaUdpCfgOneWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayDelayThresh.setDescription("Nbr consecutive delay > max before alert.")
acdPaaUdpCfgOneWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOneWayAvgDelayThresh.setDescription("Two-way average delay threshold.")
acdPaaUdpCfgDestinationPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgDestinationPortNumber.setDescription("The destination UDP port number used to reach the peer PAA instance.")
acdPaaUdpCfgPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPeerID.setDescription("Unique value for the peer PAA instance. This value follows the ordering\nof the status and the results table. Its value ranges from 1 to\nMAXINT (4 bytes).")
acdPaaUdpCfgOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgOperationMode.setDescription("PAA Operation Mode. Its values are: 1 = Bi-Dir, 2 = Source, 3 = Sink")
acdPaaUdpCfgIgmpOneWayJoinPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpOneWayJoinPeriod.setDescription("The IGMP One-way join period is the amount of time to wait from the\nbeginning of the period before an IGMP join request is sent out.")
acdPaaUdpCfgIgmpRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpRefPeriod.setDescription("The IGMP reference period is the total amount of time in which we\nsample IGMP join and leave requests. It must be a minimum of (10 * One-way ref. period).")
acdPaaUdpCfgIgmpMaxJoinDly = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpMaxJoinDly.setDescription("The maximum join delay objective.")
acdPaaUdpCfgIgmpJoinDlyThres = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpJoinDlyThres.setDescription("The maximum consecutive join delay samples allowed greater than the maximum join delay.")
acdPaaUdpCfgIgmpJoinAvgDlyThres = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpJoinAvgDlyThres.setDescription("The maximum join average delay.")
acdPaaUdpCfgIgmpMaxLvDly = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpMaxLvDly.setDescription("The maximum join delay objective.")
acdPaaUdpCfgIgmpLvDlyThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpLvDlyThresh.setDescription("The maximum consecutive leave delay samples allowed greater than the maximum leave delay.")
acdPaaUdpCfgIgmpLvAvgDlyThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgIgmpLvAvgDlyThresh.setDescription("The maximum leave delay average.")
acdPaaUdpCfgPktLossThreshExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 3, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaUdpCfgPktLossThreshExt.setDescription("Extended packet loss ratio threshold allowed without issuing an alarm\nexpressed in millionth of percent (1,000,000 is 1%).")
acdPaaL2CfgTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4))
if mibBuilder.loadTexts: acdPaaL2CfgTable.setDescription("Configuration table of all L2 PAA entries")
acdPaaL2CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1)).setIndexNames((0, "ACD-PAA-MIB", "acdPaaL2CfgID"))
if mibBuilder.loadTexts: acdPaaL2CfgEntry.setDescription("An entry consisting of all settings to manage a PAA instance.")
acdPaaL2CfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaL2CfgID.setDescription("Unique value for each PAA instance. This value follows the ordering\nof the status and the results table. Its value ranges from 1 to\nMAXINT (4 bytes).")
acdPaaL2CfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgName.setDescription("This is a string to identify this PAA instance.")
acdPaaL2CfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("enable", 0), ("disable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgState.setDescription("Configuration state of this PAA entry.")
acdPaaL2CfgPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktSize.setDescription("Transmit packet size.")
acdPaaL2CfgSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgSamplingPeriod.setDescription("Interval in milliseconds at which PAA issues PAA measurement packets.")
acdPaaL2CfgCcLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgCcLossThresh.setDescription("Maximum number of lost CCM (Connectivity Check Messages) for declaring a connectvity loss.")
acdPaaL2CfgPktLossRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktLossRefPeriod.setDescription("Reference period in milliseconds for packet loss measurement.")
acdPaaL2CfgPktLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktLossThresh.setDescription("Allowed packet loss, in percentage (%).")
acdPaaL2CfgOneWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayRefPeriod.setDescription("Reference period in milliseconds for one-way measurement.")
acdPaaL2CfgOneWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDvMax.setDescription("Maximum allowed instantaneous delay variation.")
acdPaaL2CfgOneWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDvThresh.setDescription("Number of consecutive delay variations greater than the threshold.")
acdPaaL2CfgOneWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayAvgDvThresh.setDescription("One-way average delay variation threshold.")
acdPaaL2CfgTwoWayRefPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayRefPeriod.setDescription("Reference period in milliseconds for two-way measurement.")
acdPaaL2CfgTwoWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDelayMax.setDescription("Maximum allowed instantaneous delay.")
acdPaaL2CfgTwoWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDelayThresh.setDescription("Number of consecutive delays greater than the threshold.")
acdPaaL2CfgTwoWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayAvgDelayThresh.setDescription("Two-way average delay threshold.")
acdPaaL2CfgTwoWayDvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDvMax.setDescription("Maximum allowed instantaneous delay variation.")
acdPaaL2CfgTwoWayDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayDvThresh.setDescription("Number of consecutive delay variations greater than the threshold.")
acdPaaL2CfgTwoWayAvgDvThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgTwoWayAvgDvThresh.setDescription("Two-way average delay variation threshold.")
acdPaaL2CfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPortName.setDescription("The Port Name used to reach the peer PAA instance.")
acdPaaL2CfgMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 21), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgMacDst.setDescription("The MAC address used to reach the peer PAA instance.")
acdPaaL2CfgEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgEtype.setDescription("The Ethernet type used for this PAA instance.")
acdPaaL2CfgVlan1IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan1IdEn.setDescription("Enable or disable the first VLAN ID check")
acdPaaL2CfgVlan1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan1Id.setDescription("The first VLAN ID used to compare the incoming PAA traffic.\nIts value ranges from 0 to 4095.")
acdPaaL2CfgVlan2IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan2IdEn.setDescription("Enable or disable the second VLAN ID check")
acdPaaL2CfgVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan2Id.setDescription("The second VLAN ID used to compare the incoming PAA traffic.\nIts value ranges from 0 to 4095.")
acdPaaL2CfgVlan1PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan1PbitsValue.setDescription("The first VLAN priority used to tag the outgoing traffic.\nIts value ranges from 0 to 7.")
acdPaaL2CfgVlan2PbitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgVlan2PbitsValue.setDescription("The second VLAN priority used to tag the outgoing traffic.\nIts value ranges from 0 to 7.")
acdPaaL2CfgOneWayDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDelayMax.setDescription("Maximum allowed instantaneous delay.")
acdPaaL2CfgOneWayDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayDelayThresh.setDescription("Nbr consecutive delay > max before alert.")
acdPaaL2CfgOneWayAvgDelayThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOneWayAvgDelayThresh.setDescription("One-way average delay threshold.")
acdPaaL2CfgPeerID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPeerID.setDescription("Unique value for the peer PAA instance. This value follows the ordering\nof the status and the results table. Its value ranges from 1 to\nMAXINT (4 bytes).")
acdPaaL2CfgOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgOperationMode.setDescription("PAA Operation Mode. Its values are: 1 = Bi-Dir, 2 = Source, 3 = Sink")
acdPaaL2CfgPktLossThreshExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 4, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPaaL2CfgPktLossThreshExt.setDescription("Extended packet loss ratio threshold allowed without issuing an alarm\nexpressed in millionth of percent (1,000,000 is 1%).")
acdPaaHistResultTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5))
if mibBuilder.loadTexts: acdPaaHistResultTable.setDescription("Result table of all Paa entries")
acdPaaHistResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1)).setIndexNames((0, "ACD-PAA-MIB", "acdPaaHistResultID"), (0, "ACD-PAA-MIB", "acdPaaHistResultSampleIndex"))
if mibBuilder.loadTexts: acdPaaHistResultEntry.setDescription("An entry consisting of results for a PAA instance for a specific\nperiodin time.")
acdPaaHistResultID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultID.setDescription("Unique value for each PAA instance. Its value ranges from 1 to\nMAXINT (4 bytes). ")
acdPaaHistResultSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultSampleIndex.setDescription("An index that uniquely identifies the particular sample this entry\nrepresents among all samples associated with the same PAA instance.\nThis index starts at 1 and increases by one as each new sample.")
acdPaaHistResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("valid", 1), ("invalid", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultStatus.setDescription("The status of this acdPaaHistResult entry.")
acdPaaHistResultDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultDuration.setDescription("The interval in seconds over which the data is sampled for this entry.")
acdPaaHistResultIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIntervalEnd.setDescription("This is the time of the end of this entry.")
acdPaaHistResultPktLossNeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValid.setDescription("Indicates the validity of the Near-end packet loss results during\nthis sampling interval.")
acdPaaHistResultPktLossNeSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeSamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate the Near-end packet loss.")
acdPaaHistResultPktLossNeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValue.setDescription("Indicates the Near-end packet loss during this sampling interval.\nThe packet loss is the percent of packets transmitted but not\nreceived of the Ethernet segment in hundredths of a percent.")
acdPaaHistResultPktLossFeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValid.setDescription("Indicates the validity of the Far-end packet loss results during\nthis sampling interval.")
acdPaaHistResultPktLossFeSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeSamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate the Far-end packet loss.")
acdPaaHistResultPktLossFeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValue.setDescription("Indicates the Far-end packet loss during this sampling interval.\nThe packet loss is the percent of packets transmitted but not\nreceived of the Ethernet segment in hundredths of a percent.")
acdPaaHistResultOneWayDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayValid.setDescription("Indicate the validity of the One-way delay results during this\nsampling interval.")
acdPaaHistResultOneWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelaySamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate One-way delay results.")
acdPaaHistResultOneWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayMinValue.setDescription("Indicate the One-way delay minimum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultOneWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayMaxValue.setDescription("Indicate the One-way delay maximum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultOneWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayAvgValue.setDescription("Indicate the One-way delay average value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultOneWayDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDelayThreshEx.setDescription("Indicate the number of sample exceeding the limit during this\nsampling interval.")
acdPaaHistResultOneWayDvValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvValid.setDescription("Indicates the validity of the One-way delay variation results\nduring this sampling interval.")
acdPaaHistResultOneWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvSamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate One-way delay variation results.")
acdPaaHistResultOneWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvMinValue.setDescription("Indicates the One-way delay variation minimum value during this\nsampling interval. The value is expressed in micro-seconds.")
acdPaaHistResultOneWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvMaxValue.setDescription("Indicates the One-way delay variation maximum value during this\nsampling interval. The value is expressed in micro-seconds.")
acdPaaHistResultOneWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvAvgValue.setDescription("Indicates the One-way delay variation average value during this\nsampling interval. The value is expressed in micro-seconds.")
acdPaaHistResultOneWayDvThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultOneWayDvThreshEx.setDescription("Indicates the number of samples exceeding the limit during this\nsampling interval.")
acdPaaHistResultTwoWayDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayValid.setDescription("Indicates the validity of the Two-way delay results during this\nsampling interval.")
acdPaaHistResultTwoWayDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelaySamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate Two-way delay results.")
acdPaaHistResultTwoWayDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayMinValue.setDescription("Indicates the Two-way delay minimum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultTwoWayDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayMaxValue.setDescription("Indicates the Two-way delay maximum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultTwoWayDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayAvgValue.setDescription("Indicates the Two-way delay average value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultTwoWayDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDelayThreshEx.setDescription("Indicates the number of samples exceeding the limit during this\nsampling interval.")
acdPaaHistResultTwoWayDvValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvValid.setDescription("Indicates the validity of the Two-way delay variation results during\nthis sampling interval.")
acdPaaHistResultTwoWayDvSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvSamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate Two-way delay variation results.")
acdPaaHistResultTwoWayDvMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvMinValue.setDescription("Indicates the Two-way delay variation minimum value during this\nsampling interval. The value is expressed in micro-seconds.")
acdPaaHistResultTwoWayDvMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvMaxValue.setDescription("Indicates the Two-way delay variation maximum value during this\nsampling interval. The value is expressed in micro-seconds.")
acdPaaHistResultTwoWayDvAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvAvgValue.setDescription("Indicates the Two-way delay variation average value during this\nsampling interval. The value is expressed in micro-seconds.")
acdPaaHistResultTwoWayDvThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultTwoWayDvThreshEx.setDescription("Indicates the number of samples exceeding the limit during this\nsampling interval.")
acdPaaHistResultIgmpJoinDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayValid.setDescription("Indicates the validity of the IGMP Join delay results during this\nsampling interval.")
acdPaaHistResultIgmpJoinDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelaySamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate IGMP Join delay results.")
acdPaaHistResultIgmpJoinDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayMinValue.setDescription("Indicates the IGMP Join delay minimum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultIgmpJoinDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayMaxValue.setDescription("Indicates the IGMP Join delay maximum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultIgmpJoinDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayAvgValue.setDescription("Indicates the IGMP Join delay average value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultIgmpJoinDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpJoinDelayThreshEx.setDescription("Indicates the number of IGMP Join samples exceeding the limit during this\nsampling interval.")
acdPaaHistResultIgmpLeaveDelayValid = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayValid.setDescription("Indicates the validity of the IGMP Leave delay results during this\nsampling interval.")
acdPaaHistResultIgmpLeaveDelaySamples = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelaySamples.setDescription("Indicates the number of samples gathered during the sampling\ninterval to calculate IGMP Leave delay results.")
acdPaaHistResultIgmpLeaveDelayMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayMinValue.setDescription("Indicates the IGMP Leave delay minimum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultIgmpLeaveDelayMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayMaxValue.setDescription("Indicates the IGMP Leave delay maximum value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultIgmpLeaveDelayAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayAvgValue.setDescription("Indicates the IGMP Leave delay average value during this sampling\ninterval. The value is expressed in micro-seconds.")
acdPaaHistResultIgmpLeaveDelayThreshEx = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultIgmpLeaveDelayThreshEx.setDescription("Indicates the number of IGMP Leave samples exceeding the limit during this\nsampling interval.")
acdPaaHistResultPktLossNeValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeValueExt.setDescription("Extended near-end packet loss ratio. The packet loss is the percent\nof packets transmitted but not received in millionth of a percent\n(1,000,000 is 1%).")
acdPaaHistResultPktLossFeValueExt = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeValueExt.setDescription("Extended far-end packet loss ratio. The packet loss is the percent\nof packets transmitted but not received in millionth of a percent\n(1,000,000 is 1%).")
acdPaaHistResultPktLossNeNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossNeNbrLoss.setDescription("Indicates the number of near-end packet lost for the period.\nThis should be less or equal to acdPaaHistResultPktLossNeSamples.")
acdPaaHistResultPktLossFeNbrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 5, 5, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPaaHistResultPktLossFeNbrLoss.setDescription("Indicates the number of far-end packet lost for the period.\nThis should be less or equal to acdPaaHistResultPktLossNeSamples.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("ACD-PAA-MIB", PYSNMP_MODULE_ID=acdPaa)

# Objects
mibBuilder.exportSymbols("ACD-PAA-MIB", acdPaa=acdPaa, acdPaaResultTable=acdPaaResultTable, acdPaaResultEntry=acdPaaResultEntry, acdPaaResultID=acdPaaResultID, acdPaaResultState=acdPaaResultState, acdPaaResultPktLossNeCurrValid=acdPaaResultPktLossNeCurrValid, acdPaaResultPktLossNeCurrValue=acdPaaResultPktLossNeCurrValue, acdPaaResultPktLossNePrevValid=acdPaaResultPktLossNePrevValid, acdPaaResultPktLossNePrevValue=acdPaaResultPktLossNePrevValue, acdPaaResultPktLossFeCurrValid=acdPaaResultPktLossFeCurrValid, acdPaaResultPktLossFeCurrValue=acdPaaResultPktLossFeCurrValue, acdPaaResultPktLossFePrevValid=acdPaaResultPktLossFePrevValid, acdPaaResultPktLossFePrevValue=acdPaaResultPktLossFePrevValue, acdPaaResultOneWayDvInstValue=acdPaaResultOneWayDvInstValue, acdPaaResultOneWayDvCurrValid=acdPaaResultOneWayDvCurrValid, acdPaaResultOneWayDvCurrMinValue=acdPaaResultOneWayDvCurrMinValue, acdPaaResultOneWayDvCurrMaxValue=acdPaaResultOneWayDvCurrMaxValue, acdPaaResultOneWayDvCurrAvgValue=acdPaaResultOneWayDvCurrAvgValue, acdPaaResultOneWayDvCurrThreshExc=acdPaaResultOneWayDvCurrThreshExc, acdPaaResultOneWayDvPrevValid=acdPaaResultOneWayDvPrevValid, acdPaaResultOneWayDvPrevMinValue=acdPaaResultOneWayDvPrevMinValue, acdPaaResultOneWayDvPrevMaxValue=acdPaaResultOneWayDvPrevMaxValue, acdPaaResultOneWayDvPrevAvgValue=acdPaaResultOneWayDvPrevAvgValue, acdPaaResultOneWayDvPrevThreshEx=acdPaaResultOneWayDvPrevThreshEx, acdPaaResultTwoWayDelayInstValue=acdPaaResultTwoWayDelayInstValue, acdPaaResultTwoWayDelayCurrValid=acdPaaResultTwoWayDelayCurrValid, acdPaaResultTwoWayDelayCurrMinValue=acdPaaResultTwoWayDelayCurrMinValue, acdPaaResultTwoWayDelayCurrMaxValue=acdPaaResultTwoWayDelayCurrMaxValue, acdPaaResultTwoWayDelayCurrAvgValue=acdPaaResultTwoWayDelayCurrAvgValue, acdPaaResultTwoWayDelayCurrThreshEx=acdPaaResultTwoWayDelayCurrThreshEx, acdPaaResultTwoWayDelayPrevValid=acdPaaResultTwoWayDelayPrevValid, acdPaaResultTwoWayDelayPrevMinValue=acdPaaResultTwoWayDelayPrevMinValue, acdPaaResultTwoWayDelayPrevMaxValue=acdPaaResultTwoWayDelayPrevMaxValue, acdPaaResultTwoWayDelayPrevAvgValue=acdPaaResultTwoWayDelayPrevAvgValue, acdPaaResultTwoWayDelayPrevThreshEx=acdPaaResultTwoWayDelayPrevThreshEx, acdPaaResultTwoWayDvInstValue=acdPaaResultTwoWayDvInstValue, acdPaaResultTwoWayDvCurrValid=acdPaaResultTwoWayDvCurrValid, acdPaaResultTwoWayDvCurrMinValue=acdPaaResultTwoWayDvCurrMinValue, acdPaaResultTwoWayDvCurrMaxValue=acdPaaResultTwoWayDvCurrMaxValue, acdPaaResultTwoWayDvCurrAvgValue=acdPaaResultTwoWayDvCurrAvgValue, acdPaaResultTwoWayDvCurrThreshEx=acdPaaResultTwoWayDvCurrThreshEx, acdPaaResultTwoWayDvPrevValid=acdPaaResultTwoWayDvPrevValid, acdPaaResultTwoWayDvPrevMinValue=acdPaaResultTwoWayDvPrevMinValue, acdPaaResultTwoWayDvPrevMaxValue=acdPaaResultTwoWayDvPrevMaxValue, acdPaaResultTwoWayDvPrevAvgValue=acdPaaResultTwoWayDvPrevAvgValue, acdPaaResultTwoWayDvPrevThreshEx=acdPaaResultTwoWayDvPrevThreshEx, acdPaaResultOneWayDelayInstValue=acdPaaResultOneWayDelayInstValue, acdPaaResultOneWayDelayCurrValid=acdPaaResultOneWayDelayCurrValid, acdPaaResultOneWayDelayCurrMinValue=acdPaaResultOneWayDelayCurrMinValue, acdPaaResultOneWayDelayCurrMaxValue=acdPaaResultOneWayDelayCurrMaxValue, acdPaaResultOneWayDelayCurrAvgValue=acdPaaResultOneWayDelayCurrAvgValue, acdPaaResultOneWayDelayCurrThreshEx=acdPaaResultOneWayDelayCurrThreshEx, acdPaaResultOneWayDelayPrevValid=acdPaaResultOneWayDelayPrevValid, acdPaaResultOneWayDelayPrevMinValue=acdPaaResultOneWayDelayPrevMinValue, acdPaaResultOneWayDelayPrevMaxValue=acdPaaResultOneWayDelayPrevMaxValue, acdPaaResultOneWayDelayPrevAvgValue=acdPaaResultOneWayDelayPrevAvgValue, acdPaaResultOneWayDelayPrevThreshEx=acdPaaResultOneWayDelayPrevThreshEx, acdPaaResultPktLossTime=acdPaaResultPktLossTime, acdPaaResultOneWayTime=acdPaaResultOneWayTime, acdPaaResultTwoWayTime=acdPaaResultTwoWayTime, acdPaaResultPktLossNeCurrSamples=acdPaaResultPktLossNeCurrSamples, acdPaaResultPktLossNePrevSamples=acdPaaResultPktLossNePrevSamples, acdPaaResultPktLossFeCurrSamples=acdPaaResultPktLossFeCurrSamples, acdPaaResultPktLossFePrevSamples=acdPaaResultPktLossFePrevSamples, acdPaaResultOneWayDelayCurrSamples=acdPaaResultOneWayDelayCurrSamples, acdPaaResultOneWayDelayPrevSamples=acdPaaResultOneWayDelayPrevSamples, acdPaaResultOneWayDvCurrSamples=acdPaaResultOneWayDvCurrSamples, acdPaaResultOneWayDvPrevSamples=acdPaaResultOneWayDvPrevSamples, acdPaaResultTwoWayDelayCurrSamples=acdPaaResultTwoWayDelayCurrSamples, acdPaaResultTwoWayDelayPrevSamples=acdPaaResultTwoWayDelayPrevSamples, acdPaaResultTwoWayDvCurrSamples=acdPaaResultTwoWayDvCurrSamples, acdPaaResultTwoWayDvPrevSamples=acdPaaResultTwoWayDvPrevSamples, acdPaaResultIgmpJoinDelayInstValue=acdPaaResultIgmpJoinDelayInstValue, acdPaaResultIgmpJoinDelayCurrValid=acdPaaResultIgmpJoinDelayCurrValid, acdPaaResultIgmpJoinDelayCurrMinValue=acdPaaResultIgmpJoinDelayCurrMinValue, acdPaaResultIgmpJoinDelayCurrMaxValue=acdPaaResultIgmpJoinDelayCurrMaxValue, acdPaaResultIgmpJoinDelayCurrAvgValue=acdPaaResultIgmpJoinDelayCurrAvgValue, acdPaaResultIgmpJoinDelayCurrThreshEx=acdPaaResultIgmpJoinDelayCurrThreshEx, acdPaaResultIgmpJoinDelayPrevValid=acdPaaResultIgmpJoinDelayPrevValid, acdPaaResultIgmpJoinDelayPrevMinValue=acdPaaResultIgmpJoinDelayPrevMinValue, acdPaaResultIgmpJoinDelayPrevMaxValue=acdPaaResultIgmpJoinDelayPrevMaxValue, acdPaaResultIgmpJoinDelayPrevAvgValue=acdPaaResultIgmpJoinDelayPrevAvgValue, acdPaaResultIgmpJoinDelayPrevThreshEx=acdPaaResultIgmpJoinDelayPrevThreshEx, acdPaaResultIgmpLeaveDelayInstValue=acdPaaResultIgmpLeaveDelayInstValue, acdPaaResultIgmpLeaveDelayCurrValid=acdPaaResultIgmpLeaveDelayCurrValid, acdPaaResultIgmpLeaveDelayCurrMinValue=acdPaaResultIgmpLeaveDelayCurrMinValue, acdPaaResultIgmpLeaveDelayCurrMaxValue=acdPaaResultIgmpLeaveDelayCurrMaxValue, acdPaaResultIgmpLeaveDelayCurrAvgValue=acdPaaResultIgmpLeaveDelayCurrAvgValue, acdPaaResultIgmpLeaveDelayCurrThreshEx=acdPaaResultIgmpLeaveDelayCurrThreshEx, acdPaaResultIgmpLeaveDelayPrevValid=acdPaaResultIgmpLeaveDelayPrevValid, acdPaaResultIgmpLeaveDelayPrevMinValue=acdPaaResultIgmpLeaveDelayPrevMinValue, acdPaaResultIgmpLeaveDelayPrevMaxValue=acdPaaResultIgmpLeaveDelayPrevMaxValue, acdPaaResultIgmpLeaveDelayPrevAvgValue=acdPaaResultIgmpLeaveDelayPrevAvgValue, acdPaaResultIgmpLeaveDelayPrevThreshEx=acdPaaResultIgmpLeaveDelayPrevThreshEx, acdPaaResultIgmpJoinDelayTime=acdPaaResultIgmpJoinDelayTime, acdPaaResultIgmpLeaveDelayTime=acdPaaResultIgmpLeaveDelayTime, acdPaaResultIgmpJoinDelayCurrSamples=acdPaaResultIgmpJoinDelayCurrSamples, acdPaaResultIgmpJoinDelayPrevSamples=acdPaaResultIgmpJoinDelayPrevSamples, acdPaaResultIgmpLeaveDelayCurrSamples=acdPaaResultIgmpLeaveDelayCurrSamples, acdPaaResultIgmpLeaveDelayPrevSamples=acdPaaResultIgmpLeaveDelayPrevSamples, acdPaaResultPktLossCurrGaps=acdPaaResultPktLossCurrGaps, acdPaaResultPktLossPrevGaps=acdPaaResultPktLossPrevGaps, acdPaaResultPktLossCurrLargestGap=acdPaaResultPktLossCurrLargestGap, acdPaaResultPktLossPrevLargestGap=acdPaaResultPktLossPrevLargestGap, acdPaaResultPktLossNeCurrValueExt=acdPaaResultPktLossNeCurrValueExt, acdPaaResultPktLossNePrevValueExt=acdPaaResultPktLossNePrevValueExt, acdPaaResultPktLossFeCurrValueExt=acdPaaResultPktLossFeCurrValueExt, acdPaaResultPktLossFePrevValueExt=acdPaaResultPktLossFePrevValueExt, acdPaaResultPktLossNeCurrNbrLoss=acdPaaResultPktLossNeCurrNbrLoss, acdPaaResultPktLossNePrevNbrLoss=acdPaaResultPktLossNePrevNbrLoss, acdPaaResultPktLossFeCurrNbrLoss=acdPaaResultPktLossFeCurrNbrLoss, acdPaaResultPktLossFePrevNbrLoss=acdPaaResultPktLossFePrevNbrLoss, acdPaaStatusTable=acdPaaStatusTable, acdPaaStatusEntry=acdPaaStatusEntry, acdPaaStatusID=acdPaaStatusID, acdPaaStatusCcAlert=acdPaaStatusCcAlert, acdPaaStatusPktLossAlert=acdPaaStatusPktLossAlert, acdPaaStatusOneWayDvAlert=acdPaaStatusOneWayDvAlert, acdPaaStatusOneWayAvgDvAlert=acdPaaStatusOneWayAvgDvAlert, acdPaaStatusTwoWayDelayAlert=acdPaaStatusTwoWayDelayAlert, acdPaaStatusTwoWayAvgDelayAlert=acdPaaStatusTwoWayAvgDelayAlert, acdPaaStatusTwoWayDvAlert=acdPaaStatusTwoWayDvAlert, acdPaaStatusTwoWayAvgDvAlert=acdPaaStatusTwoWayAvgDvAlert, acdPaaStatusOneWayDelayAlert=acdPaaStatusOneWayDelayAlert, acdPaaStatusOneWayAvgDelayAlert=acdPaaStatusOneWayAvgDelayAlert, acdPaaStatusState=acdPaaStatusState)
mibBuilder.exportSymbols("ACD-PAA-MIB", acdPaaStatusPeerAddress=acdPaaStatusPeerAddress, acdPaaUdpCfgTable=acdPaaUdpCfgTable, acdPaaUdpCfgEntry=acdPaaUdpCfgEntry, acdPaaUdpCfgID=acdPaaUdpCfgID, acdPaaUdpCfgName=acdPaaUdpCfgName, acdPaaUdpCfgState=acdPaaUdpCfgState, acdPaaUdpCfgPktSize=acdPaaUdpCfgPktSize, acdPaaUdpCfgSamplingPeriod=acdPaaUdpCfgSamplingPeriod, acdPaaUdpCfgCcLossThresh=acdPaaUdpCfgCcLossThresh, acdPaaUdpCfgPktLossRefPeriod=acdPaaUdpCfgPktLossRefPeriod, acdPaaUdpCfgPktLossThresh=acdPaaUdpCfgPktLossThresh, acdPaaUdpCfgOneWayRefPeriod=acdPaaUdpCfgOneWayRefPeriod, acdPaaUdpCfgOneWayDvMax=acdPaaUdpCfgOneWayDvMax, acdPaaUdpCfgOneWayDvThresh=acdPaaUdpCfgOneWayDvThresh, acdPaaUdpCfgOneWayAvgDvThresh=acdPaaUdpCfgOneWayAvgDvThresh, acdPaaUdpCfgTwoWayRefPeriod=acdPaaUdpCfgTwoWayRefPeriod, acdPaaUdpCfgTwoWayDelayMax=acdPaaUdpCfgTwoWayDelayMax, acdPaaUdpCfgTwoWayDelayThresh=acdPaaUdpCfgTwoWayDelayThresh, acdPaaUdpCfgTwoWayAvgDelayThresh=acdPaaUdpCfgTwoWayAvgDelayThresh, acdPaaUdpCfgTwoWayDvMax=acdPaaUdpCfgTwoWayDvMax, acdPaaUdpCfgTwoWayDvThresh=acdPaaUdpCfgTwoWayDvThresh, acdPaaUdpCfgTwoWayAvgDvThresh=acdPaaUdpCfgTwoWayAvgDvThresh, acdPaaUdpCfgIPv4DstAddr=acdPaaUdpCfgIPv4DstAddr, acdPaaUdpCfgPortNumber=acdPaaUdpCfgPortNumber, acdPaaUdpCfgDscpValue=acdPaaUdpCfgDscpValue, acdPaaUdpCfgVlan1PbitsValue=acdPaaUdpCfgVlan1PbitsValue, acdPaaUdpCfgVlan2PbitsValue=acdPaaUdpCfgVlan2PbitsValue, acdPaaUdpCfgOneWayDelayMax=acdPaaUdpCfgOneWayDelayMax, acdPaaUdpCfgOneWayDelayThresh=acdPaaUdpCfgOneWayDelayThresh, acdPaaUdpCfgOneWayAvgDelayThresh=acdPaaUdpCfgOneWayAvgDelayThresh, acdPaaUdpCfgDestinationPortNumber=acdPaaUdpCfgDestinationPortNumber, acdPaaUdpCfgPeerID=acdPaaUdpCfgPeerID, acdPaaUdpCfgOperationMode=acdPaaUdpCfgOperationMode, acdPaaUdpCfgIgmpOneWayJoinPeriod=acdPaaUdpCfgIgmpOneWayJoinPeriod, acdPaaUdpCfgIgmpRefPeriod=acdPaaUdpCfgIgmpRefPeriod, acdPaaUdpCfgIgmpMaxJoinDly=acdPaaUdpCfgIgmpMaxJoinDly, acdPaaUdpCfgIgmpJoinDlyThres=acdPaaUdpCfgIgmpJoinDlyThres, acdPaaUdpCfgIgmpJoinAvgDlyThres=acdPaaUdpCfgIgmpJoinAvgDlyThres, acdPaaUdpCfgIgmpMaxLvDly=acdPaaUdpCfgIgmpMaxLvDly, acdPaaUdpCfgIgmpLvDlyThresh=acdPaaUdpCfgIgmpLvDlyThresh, acdPaaUdpCfgIgmpLvAvgDlyThresh=acdPaaUdpCfgIgmpLvAvgDlyThresh, acdPaaUdpCfgPktLossThreshExt=acdPaaUdpCfgPktLossThreshExt, acdPaaL2CfgTable=acdPaaL2CfgTable, acdPaaL2CfgEntry=acdPaaL2CfgEntry, acdPaaL2CfgID=acdPaaL2CfgID, acdPaaL2CfgName=acdPaaL2CfgName, acdPaaL2CfgState=acdPaaL2CfgState, acdPaaL2CfgPktSize=acdPaaL2CfgPktSize, acdPaaL2CfgSamplingPeriod=acdPaaL2CfgSamplingPeriod, acdPaaL2CfgCcLossThresh=acdPaaL2CfgCcLossThresh, acdPaaL2CfgPktLossRefPeriod=acdPaaL2CfgPktLossRefPeriod, acdPaaL2CfgPktLossThresh=acdPaaL2CfgPktLossThresh, acdPaaL2CfgOneWayRefPeriod=acdPaaL2CfgOneWayRefPeriod, acdPaaL2CfgOneWayDvMax=acdPaaL2CfgOneWayDvMax, acdPaaL2CfgOneWayDvThresh=acdPaaL2CfgOneWayDvThresh, acdPaaL2CfgOneWayAvgDvThresh=acdPaaL2CfgOneWayAvgDvThresh, acdPaaL2CfgTwoWayRefPeriod=acdPaaL2CfgTwoWayRefPeriod, acdPaaL2CfgTwoWayDelayMax=acdPaaL2CfgTwoWayDelayMax, acdPaaL2CfgTwoWayDelayThresh=acdPaaL2CfgTwoWayDelayThresh, acdPaaL2CfgTwoWayAvgDelayThresh=acdPaaL2CfgTwoWayAvgDelayThresh, acdPaaL2CfgTwoWayDvMax=acdPaaL2CfgTwoWayDvMax, acdPaaL2CfgTwoWayDvThresh=acdPaaL2CfgTwoWayDvThresh, acdPaaL2CfgTwoWayAvgDvThresh=acdPaaL2CfgTwoWayAvgDvThresh, acdPaaL2CfgPortName=acdPaaL2CfgPortName, acdPaaL2CfgMacDst=acdPaaL2CfgMacDst, acdPaaL2CfgEtype=acdPaaL2CfgEtype, acdPaaL2CfgVlan1IdEn=acdPaaL2CfgVlan1IdEn, acdPaaL2CfgVlan1Id=acdPaaL2CfgVlan1Id, acdPaaL2CfgVlan2IdEn=acdPaaL2CfgVlan2IdEn, acdPaaL2CfgVlan2Id=acdPaaL2CfgVlan2Id, acdPaaL2CfgVlan1PbitsValue=acdPaaL2CfgVlan1PbitsValue, acdPaaL2CfgVlan2PbitsValue=acdPaaL2CfgVlan2PbitsValue, acdPaaL2CfgOneWayDelayMax=acdPaaL2CfgOneWayDelayMax, acdPaaL2CfgOneWayDelayThresh=acdPaaL2CfgOneWayDelayThresh, acdPaaL2CfgOneWayAvgDelayThresh=acdPaaL2CfgOneWayAvgDelayThresh, acdPaaL2CfgPeerID=acdPaaL2CfgPeerID, acdPaaL2CfgOperationMode=acdPaaL2CfgOperationMode, acdPaaL2CfgPktLossThreshExt=acdPaaL2CfgPktLossThreshExt, acdPaaHistResultTable=acdPaaHistResultTable, acdPaaHistResultEntry=acdPaaHistResultEntry, acdPaaHistResultID=acdPaaHistResultID, acdPaaHistResultSampleIndex=acdPaaHistResultSampleIndex, acdPaaHistResultStatus=acdPaaHistResultStatus, acdPaaHistResultDuration=acdPaaHistResultDuration, acdPaaHistResultIntervalEnd=acdPaaHistResultIntervalEnd, acdPaaHistResultPktLossNeValid=acdPaaHistResultPktLossNeValid, acdPaaHistResultPktLossNeSamples=acdPaaHistResultPktLossNeSamples, acdPaaHistResultPktLossNeValue=acdPaaHistResultPktLossNeValue, acdPaaHistResultPktLossFeValid=acdPaaHistResultPktLossFeValid, acdPaaHistResultPktLossFeSamples=acdPaaHistResultPktLossFeSamples, acdPaaHistResultPktLossFeValue=acdPaaHistResultPktLossFeValue, acdPaaHistResultOneWayDelayValid=acdPaaHistResultOneWayDelayValid, acdPaaHistResultOneWayDelaySamples=acdPaaHistResultOneWayDelaySamples, acdPaaHistResultOneWayDelayMinValue=acdPaaHistResultOneWayDelayMinValue, acdPaaHistResultOneWayDelayMaxValue=acdPaaHistResultOneWayDelayMaxValue, acdPaaHistResultOneWayDelayAvgValue=acdPaaHistResultOneWayDelayAvgValue, acdPaaHistResultOneWayDelayThreshEx=acdPaaHistResultOneWayDelayThreshEx, acdPaaHistResultOneWayDvValid=acdPaaHistResultOneWayDvValid, acdPaaHistResultOneWayDvSamples=acdPaaHistResultOneWayDvSamples, acdPaaHistResultOneWayDvMinValue=acdPaaHistResultOneWayDvMinValue, acdPaaHistResultOneWayDvMaxValue=acdPaaHistResultOneWayDvMaxValue, acdPaaHistResultOneWayDvAvgValue=acdPaaHistResultOneWayDvAvgValue, acdPaaHistResultOneWayDvThreshEx=acdPaaHistResultOneWayDvThreshEx, acdPaaHistResultTwoWayDelayValid=acdPaaHistResultTwoWayDelayValid, acdPaaHistResultTwoWayDelaySamples=acdPaaHistResultTwoWayDelaySamples, acdPaaHistResultTwoWayDelayMinValue=acdPaaHistResultTwoWayDelayMinValue, acdPaaHistResultTwoWayDelayMaxValue=acdPaaHistResultTwoWayDelayMaxValue, acdPaaHistResultTwoWayDelayAvgValue=acdPaaHistResultTwoWayDelayAvgValue, acdPaaHistResultTwoWayDelayThreshEx=acdPaaHistResultTwoWayDelayThreshEx, acdPaaHistResultTwoWayDvValid=acdPaaHistResultTwoWayDvValid, acdPaaHistResultTwoWayDvSamples=acdPaaHistResultTwoWayDvSamples, acdPaaHistResultTwoWayDvMinValue=acdPaaHistResultTwoWayDvMinValue, acdPaaHistResultTwoWayDvMaxValue=acdPaaHistResultTwoWayDvMaxValue, acdPaaHistResultTwoWayDvAvgValue=acdPaaHistResultTwoWayDvAvgValue, acdPaaHistResultTwoWayDvThreshEx=acdPaaHistResultTwoWayDvThreshEx, acdPaaHistResultIgmpJoinDelayValid=acdPaaHistResultIgmpJoinDelayValid, acdPaaHistResultIgmpJoinDelaySamples=acdPaaHistResultIgmpJoinDelaySamples, acdPaaHistResultIgmpJoinDelayMinValue=acdPaaHistResultIgmpJoinDelayMinValue, acdPaaHistResultIgmpJoinDelayMaxValue=acdPaaHistResultIgmpJoinDelayMaxValue, acdPaaHistResultIgmpJoinDelayAvgValue=acdPaaHistResultIgmpJoinDelayAvgValue, acdPaaHistResultIgmpJoinDelayThreshEx=acdPaaHistResultIgmpJoinDelayThreshEx, acdPaaHistResultIgmpLeaveDelayValid=acdPaaHistResultIgmpLeaveDelayValid, acdPaaHistResultIgmpLeaveDelaySamples=acdPaaHistResultIgmpLeaveDelaySamples, acdPaaHistResultIgmpLeaveDelayMinValue=acdPaaHistResultIgmpLeaveDelayMinValue, acdPaaHistResultIgmpLeaveDelayMaxValue=acdPaaHistResultIgmpLeaveDelayMaxValue, acdPaaHistResultIgmpLeaveDelayAvgValue=acdPaaHistResultIgmpLeaveDelayAvgValue, acdPaaHistResultIgmpLeaveDelayThreshEx=acdPaaHistResultIgmpLeaveDelayThreshEx)
mibBuilder.exportSymbols("ACD-PAA-MIB", acdPaaHistResultPktLossNeValueExt=acdPaaHistResultPktLossNeValueExt, acdPaaHistResultPktLossFeValueExt=acdPaaHistResultPktLossFeValueExt, acdPaaHistResultPktLossNeNbrLoss=acdPaaHistResultPktLossNeNbrLoss, acdPaaHistResultPktLossFeNbrLoss=acdPaaHistResultPktLossFeNbrLoss)

