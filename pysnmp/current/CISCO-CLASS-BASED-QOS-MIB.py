# PySNMP SMI module. Autogenerated from smidump -f python CISCO-CLASS-BASED-QOS-MIB
# by libsmi2pysnmp-0.1.3 at Mon Dec  7 10:46:29 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( DlciNumber, ) = mibBuilder.importSymbols("CISCO-FRAME-RELAY-MIB", "DlciNumber")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( EntPhysicalIndexOrZero, Unsigned64, ) = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero", "Unsigned64")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( InterfaceIndex, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
( VlanIndex, ) = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class CbQosEBCtd(OctetString):
    pass

class CbQosEBType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,)
    namedValues = NamedValues(("typeNone", 0), ("typeCorvil", 1), )
    
class CbQosQueueDepth(Unsigned32):
    pass

class CbQosQueueUnitType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,3,2,1,5,)
    namedValues = NamedValues(("packets", 1), ("cells", 2), ("bytes", 3), ("ms", 4), ("us", 5), )
    
class CbQosRateType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,5,4,2,3,)
    namedValues = NamedValues(("bps", 1), ("percentage", 2), ("cps", 3), ("perThousand", 4), ("perMillion", 5), )
    
class CbQosTMSetType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,6,5,3,4,2,)
    namedValues = NamedValues(("none", 0), ("ipDscp", 1), ("ipPrecedence", 2), ("qosGroup", 3), ("l2Cos", 4), ("mplsExpImp", 5), ("mplsExpTop", 6), )
    
class IPHCOption(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,1,)
    namedValues = NamedValues(("rtp", 1), ("tcp", 2), ("bothRtpTcp", 3), )
    
class InterfaceType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,5,1,3,4,7,2,)
    namedValues = NamedValues(("mainInterface", 1), ("subInterface", 2), ("frDLCI", 3), ("atmPVC", 4), ("controlPlane", 5), ("vlanPort", 6), ("evc", 7), )
    
class PoliceAction(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(14,18,12,13,5,3,7,4,10,15,16,8,11,6,1,17,2,9,)
    namedValues = NamedValues(("transmit", 1), ("setDiscardClass", 10), ("setMplsExpTopMost", 11), ("setIpDscpTunnel", 12), ("setIpPrecedenceTunnel", 13), ("setL2CosInner", 14), ("unconfigured", 15), ("setDei", 16), ("setDeiImposition", 17), ("setSrpPriority", 18), ("setIpDSCP", 2), ("setIpPrecedence", 3), ("setQosGroup", 4), ("drop", 5), ("setMplsExp", 6), ("setAtmClp", 7), ("setFrDe", 8), ("setL2Cos", 9), )
    
class QosClassInfo(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,)
    namedValues = NamedValues(("none", 1), ("matchAll", 2), ("matchAny", 3), )
    
class QosMatchInfo(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("none", 1), ("matchNot", 2), )
    
class QosObjectType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(8,4,2,1,3,11,7,9,10,5,6,)
    namedValues = NamedValues(("policymap", 1), ("ipslaMeasure", 10), ("account", 11), ("classmap", 2), ("matchStatement", 3), ("queueing", 4), ("randomDetect", 5), ("trafficShaping", 6), ("police", 7), ("set", 8), ("compression", 9), )
    
class QueueMechanism(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,3,1,6,4,2,)
    namedValues = NamedValues(("precedence", 1), ("dscp", 2), ("discardClass", 3), ("qosGroup", 4), ("atmClp", 5), ("mplsExp", 6), )
    
class QueueingBandwidthUnits(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,6,5,2,3,1,)
    namedValues = NamedValues(("kbps", 1), ("percentage", 2), ("percentageRemaining", 3), ("ratioRemaining", 4), ("perThousand", 5), ("perMillion", 6), )
    
class REDMechanism(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,7,2,4,6,5,9,3,8,)
    namedValues = NamedValues(("precedence", 1), ("dscp", 2), ("discardClass", 3), ("l2Cos", 4), ("atmClp", 5), ("mplsExp", 6), ("redDefault", 7), ("redUserDefault", 8), ("dei", 9), )
    
class SetC3plAccountFeatureType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,0,)
    namedValues = NamedValues(("queueing", 0), ("wred", 1), ("police", 2), )
    
class SetFeatureType(Bits):
    namedValues = NamedValues(("ipDscp", 0), ("ipPrecedence", 1), ("frFecnBecn", 10), ("ipDscpTunnel", 11), ("ipPrecedenceTunnel", 12), ("l2CosInner", 13), ("dei", 14), ("deiImposition", 15), ("qosGroupNumber", 2), ("frDeBit", 3), ("atmClpBit", 4), ("l2Cos", 5), ("mplsExp", 6), ("discardClass", 7), ("mplsExpTopMost", 8), ("srpPriority", 9), )
    
class TrafficDirection(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("input", 1), ("output", 2), )
    
class TrafficShapingLimit(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("average", 1), ("peak", 2), )
    

# Objects

ciscoCBQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 166)).setRevisions(("2012-07-24 00:00","2012-03-22 00:00","2009-11-25 00:00","2009-09-16 00:00","2009-04-24 00:00","2009-01-26 00:00","2008-11-20 00:00","2008-06-17 00:00","2007-10-09 00:00","2007-08-30 00:00","2007-07-10 00:00","2004-09-20 00:00","2004-04-12 00:00","2003-07-24 00:00","2003-06-09 00:00","2003-01-21 00:00","2002-12-03 00:00","2002-07-24 00:00","2001-03-14 00:00","2000-12-08 00:00","2000-07-13 00:00",))
if mibBuilder.loadTexts: ciscoCBQosMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoCBQosMIB.setContactInfo("Cisco Systems\nCustomer Service\n\nPostal: 170 W. Tasman Drive\nSan Jose, CA  95134-1706\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-qos@cisco.com")
if mibBuilder.loadTexts: ciscoCBQosMIB.setDescription("Cisco Class-Based QoS MIB\n\n**********************************\n            Overview\n**********************************\nThis MIB provides read access to Quality of Service (QoS) \nconfiguration and statistics information for Cisco \nplatforms that support the Modular Quality of Service \nCommand-line Interface (Modular QoS CLI).  We recommend \nusers of this MIB to review the user documentation of \nMQC based QoS features.\n\nConfiguration information available through this MIB includes\nall ClassMap, PolicyMap, Match Statements, and Feature \nActions configuration parameters. The definitions of each\nobjects mentioned above are explained in the QoS objects\nsection.\n\nStatistics available through this MIB include summary\ncounts/rates by traffic class before and after any configured\nQoS policies are enforced.  In addition, detailed\nfeature-specific statistics are available for select\nPolicyMap features.\n\nContact your Cisco representative to determine on which\nplatforms the MIB is currently supported.\n\n**********************************\n           QoS  Acronyms\n**********************************\nBECN: Frame Relay Backward Explicit Congestion Notification\nCIR : Committed Information Rate\nDSCP: Differentiated Service Code Point\nEB  : Estimate Bandwidth\nECN : Explicite Congestion Notification\nFECN: Frame Relay Forward Explicit Congestion Notification\nIPHC: Internet Protocol Header Compression \nIPSLAs: IP Service Level Agreement Technologies\nPIR : Peak Information Rate\nPREC: Precedence\nQoS : Quality Of Services\nRED : Random Early Detect\nSRP : Spatial Reuse Protocol\nWRED: Weighted Random Early Detect\nC3PL: Cisco Common Classification Programming Language\n\n**********************************\n            MIB Objects\n**********************************\nThis MIB consists of the following object groups:\n1 :  cbQosServicePolicy\n2 :  cbQosInterfacePolicy\n3 :  cbQosFrameRelayVCPolicy\n4 :  cbQosATMPVCPolicy\n5 :  cbQosObjects\n6 :  cbQosPolicyMapCfg\n7 :  cbQosClassMapCfg\n8 :  cbQosMatchStmtCfg\n9 :  cbQosQueueingCfg\n10:  cbQosREDCfg\n11:  cbQosREDClassCfg\n12:  cbQosPoliceCfg\n13:  cbQosTSCfg\n14:  cbQosSetCfg\n15:  cbQosClassMapStats\n16:  cbQosMatchStmtStats\n17:  cbQosPoliceStats\n18:  cbQosQueueingStats\n19:  cbQosTSStats\n20:  cbQosREDClassStats\n21:  cbQosPoliceActionCfg\n22:  cbQosIPHCCfg\n23:  cbQosIPHCStats\n24:  cbQosSetStats\n25:  cbQosPoliceColorStats\n26:  cbQosTableMapCfg\n27:  cbQosTableMapValueCfg\n28:  cbQosTableMapSetCfg\n29:  cbQosEBCfg\n30:  cbQosEBStats\n31:  cbQosMeasureIPSLACfg\n32:  cbQosC3plAccountCfg\n33:  cbQosC3plAccountStats\n\n**********************************\n          Definitions\n**********************************\nA logical interface in the context of this MIB is either\na main-interface, a sub-interface, a Frame Relay DLCI,\nan ATM virtual circuit or the control-plane on the router.\n\nThe (aggregate) control-plane on the router is defined as \na collection of processes running at process level on the\nplatform (route) processor. This includes the functions \nrelated to networking control capabilities such as routing,\nsignaling, provisioning, as well as resource and service \ndiscovery. Also includes process switched traffic on the\ndevice. \n\nThe term distributed control plane, in the context of \nthis mib, represents the control-plane functionality at\nthe level of individual linecards. This is only\napplicable for the case of distributed platforms.\n\n**********************************\n           QoS Objects\n**********************************\nTo understand Class-Based QoS features and how to navigate \nthe MIB tables above, the key element is to comprehend the \nrelationships among the different QoS objects. QoS objects \nconsist of ClassMaps, Match Statements and PolicyMaps, \nand each Feature Actions. \n\nMatch Statement - The specific match criteria to identify\npackets for classification purposes.\n\nClassMap - A user-defined traffic class that contains\none or many match statements used to classify packets into\ndifferent categories.\n\nFeature Action - An action is a QoS feature. Features \ninclude police, traffic-shaping, queueing, random detect \nand packet marking(set). After the traffic is being \nclassified, based on the traffic classification, we can \napply these action to each traffic class.\n\nPolicyMap - A user-defined policy that associates each QoS \naction to the user-defined traffic class (ClassMap).\n\nService Policy - Service policy is a policymap\nthat is being attached to a logical interface. Because a\npolicymap can also be a part of the hierarchical structure \n(inside a classmap), only a policymap that is directly \nattached to a logical interface is considered a service \npolicy.  Each service policy is uniquely identified by an \nindex called cbQosPolicyIndex. This number is usually \nidentical to its cbQosObjectsIndex as a policymap.\n\n*****************************************\nRuntime Instance vs Configuration objects\n*****************************************\n\nEach QoS objects have 2 sets of behaviours : \n1: A configuration instance\n- Each QoS objects has it's configuration portion of\n  information attached to it. This information does\n  not change whether this object is attached on multiple\n  logical interfaces and used multiple times. We\n  uniquely identify each QoS object with identical\n  configuration with the same index - cbQosConfigIndex.\n  This index is used in all configuration related\n  tables. \n\n2: A runtime instance\n- Each QoS objects has it's statistical portion of\n  information attached to it. This information changes\n  when this object is attached on multiple logical \n  interfaces and used in various different places. We\n  uniquely identify each QoS runtime object instance \n  with an index that is unique across multiple \n  instances of the identical object - cbQosObjectsIndex.\n  This index is used in all statistical related tables. \n\nIn summary, a QoS object has 2 indexes associated with it:\ncbQosConfigIndex is used to identify it's configuration, \nwhich does not change regardless of number of times and\nwhere it is being used; and cbQosObjectsIndex is used \nto identify it's runtime statistics, depending on which\nlogical interface and where in a given PolicyMap hierarchy\nthis object is used, it may have multiple unique \nidentifiers to distinguish each unique usage (instance) of\nthe same object.\n\n**********************************\n            Navigation\n**********************************\nThe recommended method of navigating through all of the MIB \ntables is to start by learning the cbQosServicePolicyTable \nand cbQosObjectsTable MIB tables. In particular, Cisco \nSystems recommends understanding the cbQosObjectsIndex and \ncbQosParentObjectsIndex of each QoS feature.\n\nThe cbQosPolicyIndex and cbQosObjectsIndex are \nsystem-assigned numbers that identify each unique instance \nof a QoS feature. These indexes are never reused between \nrouter reboots, even when changes are made to the QoS \nconfiguration. The cbQosPolicyIndex is designed to identify \nthe service policies attached to logical interfaces, while \nthe cbQosObjectsIndex is designed to identify each QoS \nfeature on a specified device.\n\nThe cbQosParentObjectsIndex is designed to show the \nhierarchical relationship of each QoS feature. \n\n**********************************\n        cbQosServicePolicyTable\n**********************************\nAccessing cbQosServicePolicyTable requires \ncbQosPolicyIndex. This index is a system-assigned number \nto uniquely identify each service policy hanging off of\neach logical interface. Given cbQosPolicyIndex the tables\nprovide the type of logical interface/media type on which\nthis policy is applied, the direction in which this policy\nis enforced, and the SNMP interface index and/or the entity\nindex of the underlying interface/entity. In the case of a\npolicy being applied on a Frame Relay DLCI, the cbQosFrDLCI\ngives you the Frame Relay DLCI number to which this policy\nis attached. In the case of policy being attached to an ATM\nVC, cbQosAtmVPI and cbQosAtmVCI display the VPI and VCI of \nthe ATM interface respectively.\n\n**********************************\n        cbQosObjectsTable\n**********************************\nAccessing cbQosObjectsTable requires two indexes, \ncbQosPolicyIndex and cbQosObjectsIndex. \n\nGiven a particular service policy on a given logical \ninterface, there could be PolicyMaps, ClassMaps, Match \nStatements and Feature Actions being used. Each instance \nof these objects is uniquely identified by\ncbQosObjectsIndex.\n\nUsers need to decide which QoS object is interesting \nand use the cbQosPolicyIndex and cbQosObjectsIndex to\nlocate the right element of interest. This tables provides \ncbQosObjectsType, cbQosConfigIndex, and \ncbQosParentObjectsIndex. \n\nTo understand the relationship of cbQosObjectsIndex, \ncbQosParentObjectsIndex and the hierarchical relationship \nof the QoS objects, consider the following QoS \nconfiguration example:\n\nInterface ethernet 0/1\nInput Service Policy cntlWebTraffic\n        ClassMap http\n                match ip http\n                set ip precedence 5\n\nOutput Service Policy cntlSNMP_Telnet\n        ClassMap snmp\n                match ip snmp\n                shape average 8000 32 32\n        ClassMap Telnet\n                match ip telnet\n                shape average 10000 32 32\n\nInterface ethernet 0/2\nInput Service Policy cntlWebTraffic\n        ClassMap http\n                match ip http\n                set ip precedence 5\n\nOutput Service Policy cntlSNMP_Telnet\n        ClassMap snmp\n                match ip snmp\n                shape average 8000 32 32\n        ClassMap Telnet\n                match ip telnet\n                shape average 10000 32 32\n\n*** In Ethernet 0/1 ***\nAssume the router assigned a cbQosConfigIndex=1024 and \ncbQosObjectsIndex=1084 to Policy cntlWebTraffic. \nBecause it is attached to an interface, it has no parent \nQoS object, and thus cbQosParentObjectsIndex=0. \nIn addition, because cntlWebTraffic is also the service \npolicy of the interface, it has a unique cbQosPolicyIndex \nassigned to it. In most cases, it would be the same as \nthe cbQosObjectsIndex, which is 1084 in this case. \nTherefore, the indexes are:\ncbQosPolicyIndex = 1084\ncbQosObjectsIndex = 1084\ncbQosConfigIndex = 1024\n\nAssuming the router assigned a cbQosObjectsIndex=1085 \nand cbQosConfigIndex=1025 to ClassMap http, it is \ndirectly being used by Policy cntlWebTraffic, and therefore\nthe cbQosParentObjectsIndex of ClassMap http will be 1084. \n\nAssuming the router assigned a cbQosConfigIndex=1026 and\ncbQosObjectsIndex=1086 to match ip http, it is directly \nused by ClassMap http, therefore the \ncbQosParentObjectsIndex of match ip http will be 1085.\n\nAssuming the router assigned a cbQosConfigIndex=1027 and\ncbQosObjectsIndex=1087 to set ip precedence 5, it is \ndirectly used by ClassMap http, therefore the \ncbQosParentObjectsIndex of match ip http will be 1085.\n\nAssuming the router assigned a cbQosConfigIndex=1028 and \ncbQosObjectsIndex=1088 to Policy cntlSNMP_Telnet. \nBecause it is attached to an interface, it has no parent \nQoS object, and thus cbQosParentObjectsIndex=0. \nIn addition, because cntlSNMP_Telnet is also the service \npolicy of the interface, it has a unique cbQosPolicyIndex \nassigned to it. In most cases, it would be the same as \nthe cbQosObjectsIndex, which is 1088 in this case.\n\nAssuming the router assigned a cbQosConfigIndex=1029 and\ncbQosObjectsIndex=1089 to ClassMap snmp, it is \ndirectly being used by Policy cntlSNMP_Telnet, and \ntherefore the cbQosParentObjectsIndex of ClassMap snmp \nwill be 1088. \n\nAssuming the router assigned a cbQosConfigIndex=1030 and\ncbQosObjectsIndex=1090 to match ip snmp, it is directly \nused by ClassMap snmp, and therefore the \ncbQosParentObjectsIndex of match ip snmp will be 1089.\n\nAssuming the router assigned a cbQosConfigIndex=1031 and\ncbQosObjectsIndex=1091 to shape average 8000 32 32, \nit is directly used by ClassMap snmp, therefore the \ncbQosParentObjectsIndex of match ip snmp will be 1089.\n\nAssuming the router assigned a cbQosConfigIndex=1032 and\ncbQosObjectsIndex=1092 to ClassMap Telnet, it is \ndirectly being used by Policy cntlSNMP_Telnet, and \ntherefore the cbQosParentObjectsIndex of \nClassMap Telnet will be 1088. \n\nAssuming the router assigned a cbQosConfigIndex=1033 and\ncbQosObjectsIndex=1093 to match ip telnet, it is \ndirectly used by ClassMap Telnet, and therefore the \ncbQosParentObjectsIndex of match ip telnet will be 1092.\n\nAssuming the router assigned a cbQosConfigIndex=1034 and\ncbQosObjectsIndex=1094 to shape 10000 32 32, it is \ndirectly used by ClassMap telnet, therefore the \ncbQosParentObjectsIndex of match ip telnet will be 1092.\n\n*** In Ethernet 0/2 ***\nEvery objects will have a unique combination of\ncbQosPolicyIndex and cbQosObjectsIndex, but\ncbQosConfigIndex will be shared across the same\nobjects that are applied in different places.\n\n**********************************\n         All Config Tables\n**********************************\nAccessing config related tables requires the same index \n- cbQosConfigIndex.  (Per precedence based tables requires \na second index, which is IP precedence value) Users \nshould have already gone through the cbQosObjectsTable \nat this point and understood each cbQosConfigIndex and the \ncorresponding QoS objects.  Users can uniquely identify \neach QoS object defined on the router and query the \nentries in each stats table on a per QoS object basis.  \n\n**********************************\n         All Stats Tables\n**********************************\nAccessing all stats related tables requires the same \n2 indexes. They are cbQosPolicyIndex and cbQosObjectsIndex.\n(Per precedence based tables requires a third index, which \nis IP precedence value) Users should have already gone \nthrough the cbQosObjectsTable at this point and understood \nthe relationship of each cbQosPolicyIndex and \ncbQosObjectsIndex pair and the corresponding QoS objects. \nUsers can uniquely identify each QoS object defined on the \nrouter and query the entries in each stats table on a per \nQoS object basis.")
ciscoCBQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1))
cbQosServicePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1))
cbQosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1))
if mibBuilder.loadTexts: cbQosServicePolicyTable.setDescription("This table describes the logical interfaces/media types\nand the policymap that are attached to it.")
cbQosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"))
if mibBuilder.loadTexts: cbQosServicePolicyEntry.setDescription("Each entry in this table describes to which a logical\ninterface a given policymap is attached.  Depending on \nthe logical interface/media type, some fields may have\nmeaningful values, and some may not.  Please see each\nindividual descriptions.")
cbQosPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosPolicyIndex.setDescription("An arbitrary (system-assigned) index for all\nservice policies (PolicyMap that has been attached\nto a given logical interface).")
cbQosIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 2), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIfType.setDescription("This describes the logical interface/media type to\nwhich this service policy is attached.")
cbQosPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 3), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyDirection.setDescription("This indicates the direction of traffic for which\nthis service policy is applied.")
cbQosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIfIndex.setDescription("ifIndex for the interface to which this service\nis attached. This field makes sense only if the\nlogical interface has a snmp ifIndex. For e.g. the\nvalue of this field is meaningless when the\ncbQosIfType is controlPlane.")
cbQosFrDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 5), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosFrDLCI.setDescription("DLCI for the FRVC to which this service is attached.\nThis field only make sense if the service policy is\nattached to a Frame Relay DLCI.")
cbQosAtmVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosAtmVPI.setDescription("VPI for the ATMVC to which this service is attached.\nThis field only make sense if the service policy is\nattached to a ATM VC.")
cbQosAtmVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosAtmVCI.setDescription("VCI for the ATMVC to which this service is attached.\nThis field only make sense if the service policy is\nattached to a ATM VC.")
cbQosEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 8), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEntityIndex.setDescription("In cases where the policy is attached to an entity\ne.g. control-plane, this object represents the\nentity physical index of the entity to which the\npolicy has been attached. A value zero may be \nreturned if the policy is not attached to a physical\nentity or the entPhysicalTable is not supported on \nthe SNMP agent.")
cbQosVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 9), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosVlanIndex.setDescription("If the service policy is attached to a particular\nvlan on a trunk or multi-vlan access port, then this\nobject specifies the corresponding VLAN. In all other\ncases the value of this object is '0'.")
cbQosEVC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEVC.setDescription("for the EVC to which this service is attached.\nThis field only make sense if the service policy is\nattached to an EVC.")
cbQosPolicyDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which\nany one or more objects of cbQosServicePolicyEntry table for a\ngiven instance suffered a discontinuity. If no such\ndiscontinuities have occurred since the last re-initialization\nof the local management subsystem, this object contains a zero\nvalue.")
cbQosInterfacePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2))
cbQosInterfacePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2, 1))
if mibBuilder.loadTexts: cbQosInterfacePolicyTable.setDescription("This table describes the service polices that are\nattached to main and sub interfaces.")
cbQosInterfacePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"))
if mibBuilder.loadTexts: cbQosInterfacePolicyEntry.setDescription("Using ifIndex and Direction, each unique index pair\ntranslates to a service policy that is attached to a \nmain/sub interface, for particular traffic direction.")
cbQosIFPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIFPolicyIndex.setDescription("An arbitrary (system-assigned) index for all\nService Policies. \n\nThis is identical to cbQosPolicyIndex.")
cbQosFrameRelayVCPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3))
cbQosFrameRelayPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3, 1))
if mibBuilder.loadTexts: cbQosFrameRelayPolicyTable.setDescription("This table describes the service polices that are\nattached to Frame Relay DLCIs.")
cbQosFrameRelayPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosFrDLCI"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"))
if mibBuilder.loadTexts: cbQosFrameRelayPolicyEntry.setDescription("Using ifIndex, FR DLCI, and Direction, each unique\nindex combination translates to a service policy that \nis attached to a FR DLCI, for particular traffic direction.")
cbQosFRPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosFRPolicyIndex.setDescription("An arbitrary (system-assigned) index for all\nService Policies.\n\nThis is identical to cbQosPolicyIndex.")
cbQosATMPVCPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4))
cbQosATMPVCPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4, 1))
if mibBuilder.loadTexts: cbQosATMPVCPolicyTable.setDescription("This table describes the policies that are attached to a\nATM PVC.")
cbQosATMPVCPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVPI"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVCI"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"))
if mibBuilder.loadTexts: cbQosATMPVCPolicyEntry.setDescription("Using ifIndex, VPI, VCI, and Direction, each unique\nindex combination translates to a service policy that \nis attached to a ATM VC, for particular traffic direction.")
cbQosATMPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosATMPolicyIndex.setDescription("An arbitrary (system-assigned) index for all\nService Policies.\n\nThis is identical to cbQosPolicyIndex.")
cbQosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5))
cbQosObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1))
if mibBuilder.loadTexts: cbQosObjectsTable.setDescription("This table specifies QoS objects (classmap, policymap,\nmatch statements, and actions) hierarchy. This table also \nprovide relationship between each PolicyIndex/ObjectsIndex \npair and the ConfigIndex. ConfigIndex is essential for \nquerying any configuration tables.")
cbQosObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosObjectsEntry.setDescription("A QoS object entry. Objects covered in this table are\nPolicyMap, ClassMap, Match Statements, and Actions.\nEach entry is indexed by system-generated cbQosPolicyIndex,\nand cbQosObjectsIndex, which represents a runtime instance \nof a QoS object. In conjunction with the \ncbQosParentObjectsIndex, a management station can \ndetermine the hierarchical relationship of those QoS \nobjects. Given that classmaps and service policies can \nbe nested entites, each entry in this table represents a \nunique instance of such object. Each runtime object \ninstance has a corresponding config object, which contains\nthe configuration information of such QoS object. The\nconfig object is indexed by cbQosConfigIndex.")
cbQosObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosObjectsIndex.setDescription("An arbitrary (system-assigned) instance specific\nindex for cbQosObjectsEntry.")
cbQosConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosConfigIndex.setDescription("An arbitrary (system-assigned) config (instance\nindependent) index for each Object. Each objects having\nthe same configuration share the same config index.")
cbQosObjectsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 3), QosObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosObjectsType.setDescription("The type of the QoS object.")
cbQosParentObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosParentObjectsIndex.setDescription("The parent instance index of a QoS object.\n\nFor a ClassMap, the parent index would be the index of \nthe attached PolicyMap.\n\nFor a Match Statement, the parent index would be the \nindex of the ClassMap that uses this Match Statement.\n\nFor an action, the parent index would be the \nindex of the ClassMap that applies such Action.\n\nFor a non-hierarchical PolicyMap, the parent would be \nthe logical interface to which the policy is attached,\nthus the parent index would be 0.\n\nFor a hierarchical PolicyMap, the parent index would \nbe the index of the ClassMap to which the nested \npolicy is attached.")
cbQosPolicyMapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6))
cbQosPolicyMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1))
if mibBuilder.loadTexts: cbQosPolicyMapCfgTable.setDescription("This table specifies Policymap configuration information")
cbQosPolicyMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosPolicyMapCfgEntry.setDescription("Each entry in this table describes configuration information\nabout a policymap. The information includes: Name, and it's\ndescription. This table contains configuration information \nonly, no statistics associated with it. Therefore, it is \nindexed by the cbQosConfigIndex of each PolicyMap.")
cbQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyMapName.setDescription("Name of the Policymap.")
cbQosPolicyMapDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyMapDesc.setDescription("Description of the PolicyMap.")
cbQosClassMapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7))
cbQosCMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1))
if mibBuilder.loadTexts: cbQosCMCfgTable.setDescription("This table specifies ClassMap configuration information")
cbQosCMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosCMCfgEntry.setDescription("Each entry in this table describes configuration information\nabout a classmap. The information includes: Name, and it's\ndescription and whether it is a Match-All or Match-Any\nclass. This table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex of each ClassMap.")
cbQosCMName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMName.setDescription("Name of the Classmap.")
cbQosCMDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDesc.setDescription("Description of the Classmap.")
cbQosCMInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1, 3), QosClassInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMInfo.setDescription("Match all vs Match any in a given class.")
cbQosMatchStmtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8))
cbQosMatchStmtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1))
if mibBuilder.loadTexts: cbQosMatchStmtCfgTable.setDescription("This table specifies ClassMap configuration information")
cbQosMatchStmtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosMatchStmtCfgEntry.setDescription("Each entry in this table describes configuration information\nabout a MatchStatement. The information includes: Name, \nand whether it is a Match or Match-Not\nstatement. This table contains configuration information \nonly, no statistics associated with it. Therefore, it is \nindexed by the cbQosConfigIndex of each MatchStatement.")
cbQosMatchStmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchStmtName.setDescription("Name of the Match Statement.")
cbQosMatchStmtInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1, 1, 2), QosMatchInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchStmtInfo.setDescription("Match vs Match Not in a given class.")
cbQosQueueingCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9))
cbQosQueueingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1))
if mibBuilder.loadTexts: cbQosQueueingCfgTable.setDescription("This table specifies Queueing Action configuration\ninformation")
cbQosQueueingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosQueueingCfgEntry.setDescription("Each entry in this table describes configuration\ninformation about a queueing action. The information \nincludes: Bandwidth, Units, Flow Enabled, Priority Enabled, \nand Q size.\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex of each Queueing Action.")
cbQosQueueingCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidth.setDescription("The type of bandwidth configuration value represented by this\nobject is indicated by the value of\ncbQosQueueingCfgBandwidthUnits for this entry. \n\nIf the cbQosQueueingCfgBandwidthUnits value is 'kbps(1)' or \n'percentage(2)', this object represents the configured  \nbandwidth allocated to this traffic class.In the case of a  \nbandwidth policy, this value represents a minimum bandwidth  \nguarantee for the traffic class. In the case of a priority  \npolicy, this value represents the maximum rate at which  \npriority service is guaranteed. \n\nIf the cbQosQueueingCfgBandwidthUnits value is  \n'percentageRemaining(3)', this object represents the  \nthe percentage of the unallocated bandwidth to allocate to \nthis class.  If the cbQosQueueingCfgBandwidthUnits value is  \n'ratioRemaining(4)', this object represents the ratio value, \nrelative to other class' configured ratio values, used to  \ndetermine the portion of the unallocated bandwidth to apply to \nthis class.\n\ncbQosQueueingCfgBandwidth object is superseded by\ncbQosQueueingCfgBandwidth64.")
cbQosQueueingCfgBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 2), QueueingBandwidthUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidthUnits.setDescription("Units of the accompanying cbQosQueueingCfgbandwidth\nparameter")
cbQosQueueingCfgFlowEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgFlowEnabled.setDescription("Boolean to indicate if flow-based fair-queue is\nenabled for this class.")
cbQosQueueingCfgPriorityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgPriorityEnabled.setDescription("Boolean to indicate if low latency queueing\n(priority) is enabled for this class.")
cbQosQueueingCfgAggregateQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgAggregateQSize.setDescription("Maximum number of packets that can be held in all the\nindividual queues associated with this class\nbefore packets are dropped. This object is deprecated by\ncbQosQueueingCfgAggregateQLimit.\ncbQosQueueingCfgAggregateQSize object is superseded by cbQosQueueingCfgAggregateQLimit.\ncbQosQueueingCfgAggregateQSize object is superseded by cbQosQueueingCfgAggregateQLimit.")
cbQosQueueingCfgIndividualQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgIndividualQSize.setDescription("Maximum number of packets that can be held in an\nindividual Flow-based fair-queue associated with this \nclass before it drops packets (once the AggregateQSize\nhas been reached).\n\nThis field only makes sense in the context of \nFlow-based fair-queueing.\n\ncbQosQueueingCfgIndividualQSize object is superseded by\ncbQosQueueingCfgIndividualQSize64.")
cbQosQueueingCfgDynamicQNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgDynamicQNumber.setDescription("Number of dynamic queues supported when\nflow-based fair-queue is in use.")
cbQosQueueingCfgPrioBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 64000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgPrioBurstSize.setDescription("In the priority queue, this is the number of bytes\nallowed in a single burst. \nThis parameter only makes sense if Priority is enabled")
cbQosQueueingCfgQLimitUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 9), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgQLimitUnits.setDescription("Represents the unit type of\ncbQosQueueingCfgAggregateQLimit object.")
cbQosQueueingCfgAggregateQLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 10), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgAggregateQLimit.setDescription("Maximum allowed queue size for all the individual\nqueues associated with this class. When the queue size\nexceed this value, the packets will be dropped.")
cbQosQueueingCfgAggrQLimitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgAggrQLimitTime.setDescription("Maximum allowed queue size in milli-seconds for all\nindividual queues associated with this class.  It\nis internally converted to bytes by using the\nbandwidth that is available for the class.")
cbQosQueueingCfgPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgPriorityLevel.setDescription("The priority level of the queue into which packets matching\nthis  class are queued into. A larger priority level indicates\nhigher  priority.")
cbQosQueueingCfgBandwidth64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidth64.setDescription("This object indicates the guaranteed bandwidth for a particular\ntraffic class.\n\nThe type of bandwidth configuration value represented by this\nobject is indicated by the value of\ncbQosQueueingCfgBandwidthUnits. \n\nIf the cbQosQueueingCfgBandwidthUnits value is 'kbps(1)' or \n'percentage(2)', this object represents the configured  \nbandwidth allocated to this traffic class.In the case of a  \nbandwidth policy, this value represents a minimum bandwidth  \nguarantee for the traffic class. In the case of a priority  \npolicy, this value represents the maximum rate at which  \npriority service is guaranteed. \n\nIf the cbQosQueueingCfgBandwidthUnits value is  \n'percentageRemaining(3)', this object represents the  \nthe percentage of the unallocated bandwidth to allocate to \nthis class.  If the cbQosQueueingCfgBandwidthUnits value is  \n'ratioRemaining(4)', this object represents the ratio value, \nrelative to other class' configured ratio values, used to  \ndetermine the portion of the unallocated bandwidth to apply to \nthis class.\n\nIf a device implements cbQosQueueingCfgBandwidth64, it should\nnot implement cbQosQueueingCfgBandwidth.")
cbQosQueueingCfgIndividualQSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 14), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgIndividualQSize64.setDescription("Maximum number of packets that can be held in an\nindividual Flow-based fair-queue associated with this \nclass before it drops packets (once the AggregateQSize\nhas been reached).\n\nIf a device implements cbQosQueueingCfgIndividualQSize64, then\nit should not implement cbQosQueueingCfgIndividualQSize.")
cbQosREDCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10))
cbQosREDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1))
if mibBuilder.loadTexts: cbQosREDCfgTable.setDescription("This table specifies WRED Action configuration\ninformation")
cbQosREDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosREDCfgEntry.setDescription("Each entry in this table describes configuration\ninformation about a WRED Action.  The table holds global \n(per traffic class) configuration like: Expon Weight\nand Mean Q size.\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex of each WRED Action.")
cbQosREDCfgExponWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgExponWeight.setDescription("The decay factor for the queue average calculation.\nThe decay factor is equal to raising 2 to the power \nof N, where N could be up to 16. \nThe smaller the number, the faster it decays.")
cbQosREDCfgMeanQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgMeanQsize.setDescription("The average queue size, computed and used by the WRED\nalgorithm.This is deprecated by cbQosREDMeanQsize.\ncbQosREDCfgMeanQsize object is superseded by cbQosREDMeanQsize.\ncbQosREDCfgMeanQsize object is superseded by cbQosREDMeanQsize.")
cbQosREDCfgDscpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 3), REDMechanism()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgDscpPrec.setDescription("The Classification mechanism used by RED")
cbQosREDCfgECNEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgECNEnabled.setDescription("Boolean to indicate if explicit congestion notification\nenabled for this class.")
cbQosREDClassCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11))
cbQosREDClassCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1))
if mibBuilder.loadTexts: cbQosREDClassCfgTable.setDescription("This table specifies WRED Action configuration\ninformation on a per IP precedence basis.")
cbQosREDClassCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosREDValue"))
if mibBuilder.loadTexts: cbQosREDClassCfgEntry.setDescription("Each entry in this table describes configuration information\nabout a WRED Action.  The table holds the per IP precedence\nbased WRED configuration parameters. \n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex and cbQosREDValue \nof each WRED Action.")
cbQosREDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosREDValue.setDescription("The IP precedence or IP DSCP of this entry.")
cbQosREDCfgMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgMinThreshold.setDescription("Minimum threshold in number of packets. When the\naverage queue length reaches this number, WRED begins \nto drop packets with the specified IP precedence.\nThis is deprecated by cbQosREDClassCfgMinThreshold.\ncbQosREDCfgMinThreshold object is superseded by cbQosREDClassCfgMinThreshold.\ncbQosREDCfgMinThreshold object is superseded by cbQosREDClassCfgMinThreshold.")
cbQosREDCfgMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgMaxThreshold.setDescription("Maximum threshold in number of packets. When the\naverage queue length exceeds this number, WRED drops \nall packets with the specified IP precedence.\nThis is deprecated by cbQosREDClassCfgMaxThreshold.\ncbQosREDCfgMaxThreshold object is superseded by cbQosREDClassCfgMaxThreshold.\ncbQosREDCfgMaxThreshold object is superseded by cbQosREDClassCfgMaxThreshold.")
cbQosREDCfgPktDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgPktDropProb.setDescription("Denominator for the fraction of packets dropped when\nthe average queue depth is MaxDepthThreshold. For \nexample, if the denominator is 10, one out of every 10\npackets is dropped when the average queue is at the \nMaxDepthThreshold.")
cbQosREDClassCfgThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 5), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgThresholdUnit.setDescription("Represents the unit type to measure the RED thresholds.\nThe objects covered are cbQosREDClassCfgMinThreshold\nand cbQosREDClassCfgMaxThreshold\ncbQosREDClassCfgThresholdUnit object is superseded by cbQosREDClassCfgMinThreshold, cbQosREDClassCfgMaxThreshold.")
cbQosREDClassCfgMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 6), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMinThreshold.setDescription("The minimum WRED threshold value. When the average\nqueue length reaches this number, WRED begins to \ndrop packets according to REDMechanism specificed\nin cbQosREDCfgDscpPrec.")
cbQosREDClassCfgMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 7), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThreshold.setDescription("The maximum WRED threshold value. When the average\nqueue length exceeds this number, WRED drops all \npackets according to REDMechanism specificed\nin cbQosREDCfgDscpPrec.")
cbQosREDClassCfgMinThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMinThresholdTime.setDescription("The minimum WRED threshold value specified in\nmilli-seconds.  The milli-second value is internally\nconverted to bytes by using the bandwidth that\nis available for the class.")
cbQosREDClassCfgMaxThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThresholdTime.setDescription("The maximum WRED threshold value specified in\nmilli-seconds.  The milli-second value is internally\nconverted to bytes by using the bandwidth that\nis available for the class.")
cbQosREDClassCfgMaxThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 10), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThresholdUnit.setDescription("Represents the unit type to measure the RED Maximum thresholds.\nThe objects covered is cbQosREDClassCfgMaxThreshold")
cbQosREDClassCfgMinThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 11), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMinThresholdUnit.setDescription("Represents the unit type to measure the RED Minimum thresholds.\nThe objects covered is cbQosREDClassCfgMinThreshold")
cbQosPoliceCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12))
cbQosPoliceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1))
if mibBuilder.loadTexts: cbQosPoliceCfgTable.setDescription("This table specifies Police Action configuration\ninformation.")
cbQosPoliceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosPoliceCfgEntry.setDescription("Each entry in this table describes configuration information\nabout a Police Action.  The table holds Policy \nconfiguration parameters, such as rate, burst size, and \nactions based on traffic rates.\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex.")
cbQosPoliceCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgRate.setDescription("The committed policing rate. This is the sustained\nrate permitted by policing.\n\nIf a committed policing rate greater than 4294967295\nis configurable on the system, then the configured\nrate is available in cbQosPoliceCfgRate64.")
cbQosPoliceCfgBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstSize.setDescription("The amount of traffic, in bytes, in excess of the\ncommitted policing rate that will be permitted by \nthe policing feature.\n\ncbQosPoliceCfgBurstSize object is superseded by\ncbQosPoliceCfgBurstSize64.")
cbQosPoliceCfgExtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstSize.setDescription("The amount of traffic, in bytes, in excess of the\nburst limit, which may be conditionally permitted \nby the policing feature. The probability that the \ntraffic is not permitted increases as the received \nburst size increases.\n\ncbQosPoliceCfgExtBurstSize object is superseded by\ncbQosPoliceCfgExtBurstSize64.")
cbQosPoliceCfgConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 4), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConformAction.setDescription("Action to be taken when the traffic is within the\nconfigured rate, that is, the traffic rate is \nconforming.\n\ncbQosPoliceCfgConformAction object is superseded by\ncbQosPoliceActionCfgConform.")
cbQosPoliceCfgConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConformSetValue.setDescription("New packet attribute values for each packets that\nconforms to the configured Police rate.\n\ncbQosPoliceCfgConformSetValue object is superseded by\ncbQosPoliceActionCfgConformSetValue.")
cbQosPoliceCfgExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExceedAction.setDescription("Action to be taken when the traffic exceeds the\nconfigured rate, that is, the traffic is \nnon-conforming.\n\ncbQosPoliceCfgExceedAction object is superseded by\ncbQosPoliceActionCfgExceed.")
cbQosPoliceCfgExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExceedSetValue.setDescription("New packet attribute values for each packets that\nconforms to the configured Police rate.\n\ncbQosPoliceCfgExceedSetValue object is superseded by\ncbQosPoliceActionCfgExceedSetValue.")
cbQosPoliceCfgViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 8), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgViolateAction.setDescription("Action to be taken when the traffic exceeds the\nconform and exceed token buckets.\n\ncbQosPoliceCfgViolateAction object is superseded by\ncbQosPoliceActionCfgViolate.")
cbQosPoliceCfgViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgViolateSetValue.setDescription("New packet attribute values for each packets that\nconforms to the Police violate action. The packet\nattibute values depend on the action that is taken\nfor the particular packet. For example, if the \naction was to set the dscp value, this entry describes\nthe value it is set to. \n\ncbQosPoliceCfgViolateSetValue object is superseded by\ncbQosPoliceActionCfgViolateSetValue.")
cbQosPoliceCfgPir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPir.setDescription("The committed policing rate. This is the peak\nrate permitted by two rate policing.\n\ncbQosPoliceCfgPir object is superseded by cbQosPoliceCfgPir64.")
cbQosPoliceCfgRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgRate64.setDescription("The committed policing rate. This is the sustained\nrate permitted by policing.")
cbQosPoliceCfgRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 12), CbQosRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgRateType.setDescription("The rate type that configured for CIR & PIR.\n1 means rates are configured in bps.\n2 means rates are configured in percentage.\n3 means rates are configured in cps.\n4 means rates are configured in parts per-thousand.\n5 means rates are configured in parts per-million.")
cbQosPoliceCfgPercentRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPercentRateValue.setDescription("The committed policing rate in percentage.  Its value\nis valid only when cbQosPoliceCfgRateType equals to 2.")
cbQosPoliceCfgPercentPirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPercentPirValue.setDescription("The peak policing rate in percentage. Its value is\nvalid only when cbQosPoliceCfgRateType equals to 2.")
cbQosPoliceCfgCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgCellRate.setDescription("The committed policing rate in cells/second.  Its value\nis valid only when cbQosPoliceCfgRateType equals to 3.")
cbQosPoliceCfgCellPir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgCellPir.setDescription("The peak policing rate in cells/second.  Its value is\nvalid only when cbQosPoliceCfgRateType equals to 3.")
cbQosPoliceCfgBurstCell = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstCell.setDescription("The amount of traffic, in cells, in excess of the\ncommitted policing rate that will be permitted by\nthe policing feature.")
cbQosPoliceCfgExtBurstCell = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstCell.setDescription("The amount of traffic, in cells, in excess of the\nburst limit, which may be conditionally permitted\nby the policing feature. The probability that the\ntraffic is not permitted increases as the received\nburst size increases.")
cbQosPoliceCfgBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstTime.setDescription("The amount of traffic time, in ms, in excess of the\ncommitted policing rate that will be permitted by\nthe policing feature.  The milli-second value is\ninternally converted to bytes by using the bandwidth\nthat is available for the class.")
cbQosPoliceCfgExtBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstTime.setDescription("The amount of traffic time, in ms, in excess of the\nburst limit, which may be conditionally permitted\nby the policing feature. The probability that the\ntraffic is not permitted increases as the received\nburst size increases.  The milli-second value is \ninternally converted to bytes by using the bandwidth\nthat is available for the class.")
cbQosPoliceCfgCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgCdvt.setDescription("The ATM Cell Delay Variation Tolerance value.")
cbQosPoliceCfgConformColor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConformColor.setDescription("The Classmap name used in AF color-aware mode to\nspecify the conform-color for the incoming packets\nwhich was marked by the previous node.\n\nAt least conform-color must be specified.  If only \nconform-color is specified, all other packets are\nassumed to be marked exceed.\n\nSee RFC 2697, A Single Rate Three Color Marker.\nSee RFC 2698, A Two Rate Three Color Marker.")
cbQosPoliceCfgExceedColor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExceedColor.setDescription("The Classmap name used in AF color-aware mode to\nspecify the exceed-color for the incoming packets\nwhich was marked by the previous node.\n\nIf both conform-color and exceed-color are specified,\nall other packets are assumed to be marked violate.\nViolate-color configuration is not needed.")
cbQosPoliceCfgConditional = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConditional.setDescription("This object is use to depict weather police is configured\nas a conditioniler policer or not")
cbQosPoliceCfgBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 25), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstSize64.setDescription("This object indicated the amount of traffic, in bytes, in\nexcess of the committed policing rate that will be permitted by \nthe policing feature. \n\nIf a device implements cbQosPoliceCfgBurstSize64, then\nit should not implement cbQosPoliceCfgBurstSize.")
cbQosPoliceCfgExtBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 26), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstSize64.setDescription("This object indicated the amount of traffic, in bytes, in\nexcess of the burst limit, which may be conditionally permitted \nby the policing feature. The probability that the \ntraffic is not permitted increases as the received \nburst size increases. \n\nIf a device implements cbQosPoliceCfgBurstSize64, then\nit should not implement cbQosPoliceCfgBurstSize.")
cbQosPoliceCfgPir64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 27), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPir64.setDescription("This object indicates the committed policing rate. This is the\npeak rate permitted by two rate policing. \n\nIf a device implements cbQosPoliceCfgPir64, then\nit should not implement cbQosPoliceCfgPir.")
cbQosTSCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13))
cbQosTSCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1))
if mibBuilder.loadTexts: cbQosTSCfgTable.setDescription("This table specifies traffic-shaping Action configuration\ninformation.")
cbQosTSCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosTSCfgEntry.setDescription("Each entry in this table describes configuration information\nabout a traffic-shaping Action.  The table holds Traffic\nShaping configuration parameters, such as rate, burst size, \nand Shaping types.\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex.")
cbQosTSCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgRate.setDescription("The committed traffic-shaping rate.  This is the\nsustained rate permitted by the traffic-shaping.")
cbQosTSCfgBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 154400000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgBurstSize.setDescription("The amount of traffic, in bits, in excess of the\ncommitted traffic-shaping rate that will be\ninstantaneously permitted by this feature.\n\ncbQosTSCfgBurstSize object is superseded by cbQosTSCfgBurstSize64.")
cbQosTSCfgExtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 154400000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgExtBurstSize.setDescription("The amount of traffic, in bits, in excess of the\nburst limit, which may be conditionally permitted\nby traffic-shaping feature.\n\ncbQosTSCfgExtBurstSize object is superseded by\ncbQosTSCfgExtBurstSize64.")
cbQosTSCfgAdaptiveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgAdaptiveEnabled.setDescription("This object indicates is adaptive traffic-shaping\nhas been enabled.")
cbQosTSCfgAdaptiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 154400000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgAdaptiveRate.setDescription("This object represents the current adaptive traffic\nshaping rate.")
cbQosTSCfgLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 6), TrafficShapingLimit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgLimitType.setDescription("This object indicates if traffic-shaping is limiting\ntraffic based on the peak rate or the average rate.")
cbQosTSCfgRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 7), CbQosRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgRateType.setDescription("The rate type that configured for traffic-shaping.\n1 means rate is configured in bps.\n2 means rate is configured in percentage.\n4 means rates are configured in parts per-thousand.\n5 means rates are configured in parts per-million.")
cbQosTSCfgPercentRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgPercentRateValue.setDescription("The committed traffic-shaping rate in percentage.\nIts value is valid only when cbQosTSCfgRateType \nequals to 2.")
cbQosTSCfgBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgBurstTime.setDescription("The amount of traffic, in ms, in excess of the\ncommitted traffic-shaping rate that will be\ninstantaneously permitted by this feature.\nThe milli-second value is internally converted to\nbits by using the bandwidth that is available for\nthe class.")
cbQosTSCfgExtBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgExtBurstTime.setDescription("The amount of traffic, in ms, in excess of the\nburst limit, which may be conditionnally permitted\nby traffic-shaping feature.\nThe milli-second value is internally converted to\nbits by using the bandwidth that is available for\nthe class.")
cbQosTSCfgRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgRate64.setDescription("The committed shape rate. This is the sustained\nrate permitted by shaping. This object represents \nthe 64 bit value of object cbQosTSCfgRate")
cbQosTSCfgBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgBurstSize64.setDescription("This object indicates the the amount of traffic, in bits, in\nexcess of the committed traffic-shaping rate that will be\ninstantaneously permitted by this feature.\n\nIf a device implements cbQosTSCfgBurstSize64, then\nit should not implement cbQosTSCfgBurstSize.")
cbQosTSCfgExtBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgExtBurstSize64.setDescription("This object indicates the amount of traffic, in bits, in excess\nof the burst limit, which may be conditionally permitted\nby traffic-shaping feature. \n\nIf a device implements cbQosTSCfgExtBurstSize64, then\nit should not implement cbQosTSCfgExtBurstSize.")
cbQosSetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14))
cbQosSetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1))
if mibBuilder.loadTexts: cbQosSetCfgTable.setDescription("This table specifies Packet Marking Action configuration\ninformation.")
cbQosSetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosSetCfgEntry.setDescription("Each entry in this table describes configuration information\nabout a Packet Marking Action.  The table holds Packet\nMarking configuration parameters, such as type of packet\nmarking and values being set to.\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex.")
cbQosSetCfgFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 1), SetFeatureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgFeature.setDescription("The bit-wise position of each packet marking feature.")
cbQosSetCfgIpDSCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpDSCPValue.setDescription("The IP DSCP value at which the packet is being set\nby the packet marking feature.")
cbQosSetCfgIpPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpPrecedenceValue.setDescription("The IP precedence value at which the packet is being\nset by the packet marking feature.")
cbQosSetCfgQosGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgQosGroupValue.setDescription("The QoS Group number at which the packet is being\nset by the packet marking feature.")
cbQosSetCfgL2CosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgL2CosValue.setDescription("The Layer 2 Cos value at which the packet is being\nset by the packet marking feature.")
cbQosSetCfgMplsExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgMplsExpValue.setDescription("The MPLS experimental value at which the packet\nis being set by the packet marking feature.")
cbQosSetCfgDiscardClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgDiscardClassValue.setDescription("The Discard Class value at which the packet\nis being set by the packet marking feature.")
cbQosSetCfgMplsExpTopMostValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgMplsExpTopMostValue.setDescription("The MPLS experimental value on the topmost label\nat which the packet is being set by the packet marking\nfeature.")
cbQosSetCfgSrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgSrpPriority.setDescription("The SRP Priority value at which the packet is being set\nby the packet marking feature.  The higher the value the\nhigher the priority.  SRP is a Cisco developed protocol.\nRFC 2892: The Cisco SRP MAC Layer Protocol.")
cbQosSetCfgFrFecnBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgFrFecnBecn.setDescription("This is a configurable parameter in percentage of the\nqueue size.  When the current queue size out of the\nqueue limit is greater than this parameter, both \nFrame Relay FECN and BECN bits will be set for\nFrame Relay congestion notification mechanism.")
cbQosSetCfgL2CosInnerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgL2CosInnerValue.setDescription("The value to be set in the 802.1p priority field in the inner\n802.1q VLAN tag (QinQ).  This object is applicable when\ncbQosSetCfgFeature has the 'l2CosInner' bit set.")
cbQosSetCfgFrDe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgFrDe.setDescription("The Discard Eligibility (DE) bit is used to indicate that a\nframe has lower importance than other frames. The DE bit is part\nof the Address field in the Frame Relay frame header.\n    DTE devices can set the value of the DE bit of a frame to 1\nto indicate that the frame has lower importance than other\nframes. When the network becomes congested, DCE devices will\ndiscard frames with the DE bit set before discarding those that\ndo not. This reduces the likelihood of critical data being\ndropped by Frame Relay DCE devices during periods of\ncongestion.")
cbQosSetCfgIpPrecedenceTunnelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpPrecedenceTunnelValue.setDescription("The IP precedence value at which the packet is being\nset by the packet marking feature.")
cbQosSetCfgIpDSCPTunnelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpDSCPTunnelValue.setDescription("The IP DSCP value at which the packet is being set\nby the packet marking feature.")
cbQosSetCfgDei = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgDei.setDescription("Indicates whether the DEI bit is set in the topmost 802.1ad\nheader.")
cbQosSetCfgDeiImposition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgDeiImposition.setDescription("Indicates whether the DEI bit is set in the imposed 802.1ad\nheader.")
cbQosClassMapStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15))
cbQosCMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1))
if mibBuilder.loadTexts: cbQosCMStatsTable.setDescription("This table specifies ClassMap related Statistical\ninformation.")
cbQosCMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosCMStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about ClassMap. ClassMap specific information\nyou can find in this table are : pre/post policy pkt/byte\ncounts, bit rates, drop pkt/bytes and no buffer drops.\n\nThis table contains statistical information only,\nno configuration information associated with it. Therefore, \nit is indexed by the instance specific IDs, such as \ncbQosPolicyIndex and cbQosObjectsIndex.")
cbQosCMPrePolicyPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyPktOverflow.setDescription("The upper 32 bits count of inbound packets prior to\nexecuting any QoS policies.")
cbQosCMPrePolicyPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyPkt.setDescription("The lower 32 bits count of inbound packets prior to\nexecuting any QoS policies.")
cbQosCMPrePolicyPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyPkt64.setDescription("The 64 bits count of inbound packets prior to executing\nany QoS policies.")
cbQosCMPrePolicyByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyByteOverflow.setDescription("The upper 32 bits count of inbound octets prior to\nexecuting any QoS policies.")
cbQosCMPrePolicyByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyByte.setDescription("The lower 32 bits count of inbound octets prior to\nexecuting any QoS policies.")
cbQosCMPrePolicyByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyByte64.setDescription("The 64 bits count of inbound octets prior to executing\nany QoS policies.")
cbQosCMPrePolicyBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyBitRate.setDescription("The bit rate of the traffic prior to executing any QoS\npolicies.")
cbQosCMPostPolicyByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyByteOverflow.setDescription("The upper 32 bits count of outbound octets after executing\nQoS policies.")
cbQosCMPostPolicyByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyByte.setDescription("The lower 32 bits count of outbound octets after executing\nQoS policies.")
cbQosCMPostPolicyByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyByte64.setDescription("The 64 bits count of outbound octets after executing\nQoS policies.")
cbQosCMPostPolicyBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyBitRate.setDescription("The bit rate of the traffic after executing QoS\npolicies.")
cbQosCMDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropPktOverflow.setDescription("The upper 32 bits counter of dropped pkts per class\nas the result of all features that can produce drops \n(e.g., police, random detect, etc.).")
cbQosCMDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropPkt.setDescription("The lower 32 bits counter of dropped pkts per class\nas the result of all features that can produce drops \n(e.g., police, random detect, etc.).")
cbQosCMDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropPkt64.setDescription("The 64 bits counter of dropped pkts per class as\nthe result of all features that can produce drops \n (e.g., police, random detect, etc.).")
cbQosCMDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropByteOverflow.setDescription("The upper 32 bits counter of dropped bytes per class\nas the result of all features that can produce drops \n(e.g., police, random detect, etc.).")
cbQosCMDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropByte.setDescription("The lower 32 bits counter of dropped bytes per class\nas the result of all features that can produce drops \n(e.g., police, random detect, etc.).")
cbQosCMDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropByte64.setDescription("The 64 bits counter of dropped bytes per class as the\nresult of all features that can produce drops \n (e.g., police, random detect, etc.).")
cbQosCMDropBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropBitRate.setDescription("The bit rate of the drops per class as the result of\nall features that can produce drops \n(e.g., police, random detect, etc.).")
cbQosCMNoBufDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMNoBufDropPktOverflow.setDescription("The upper 32 bits drop packet count which occured\ndue to a lack of SRAM buffers during output processing \non an interface.")
cbQosCMNoBufDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMNoBufDropPkt.setDescription("The lower 32 bits drop packet count which occured due\nto a lack of SRAM buffers during output processing on \nan interface.")
cbQosCMNoBufDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMNoBufDropPkt64.setDescription("The 64 bits drop packet count which occured due to a\nlack of SRAM buffers during output processing on an \ninterface.")
cbQosCMFragmentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentPktOverflow.setDescription("The upper 32 bits counter for aggregate fragment pkts")
cbQosCMFragmentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentPkt.setDescription("The lower 32 bits counter for aggregate fragment pkts")
cbQosCMFragmentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentPkt64.setDescription("The 64 bits counter for aggregate fragment pkts")
cbQosCMFragmentByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentByteOverflow.setDescription("The upper 32 bits counter for aggregate fragment bytes")
cbQosCMFragmentByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentByte.setDescription("The lower 32 bits counter for aggregate fragment bytes")
cbQosCMFragmentByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentByte64.setDescription("The 64 bits counter for aggregate fragment bytes")
cbQosMatchStmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16))
cbQosMatchStmtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1))
if mibBuilder.loadTexts: cbQosMatchStmtStatsTable.setDescription("This table specifies Match Statement related statistical\ninformation.")
cbQosMatchStmtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosMatchStmtStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about Match Statement. Match Statement specific \ninformation you can find in this table are : \nPre policy pkt/byte counters, and bit rates.\n\nThis table contains statistical information only,\nno configuration information associated with it. Therefore, \nit is indexed by the instance specific IDs, such as \ncbQosPolicyIndex and cbQosObjectsIndex.")
cbQosMatchPrePolicyPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyPktOverflow.setDescription("The upper 32 bits count of inbound packets prior to\nexecuting any QoS policies.")
cbQosMatchPrePolicyPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyPkt.setDescription("The lower 32 bits count of inbound packets prior to\nexecuting any QoS policies.")
cbQosMatchPrePolicyPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyPkt64.setDescription("The 64 bits count of inbound packets prior to executing\nany QoS policies.")
cbQosMatchPrePolicyByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyByteOverflow.setDescription("The upper 32 bits count of inbound octets prior to\nexecuting any QoS policies.")
cbQosMatchPrePolicyByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyByte.setDescription("The lower 32 bits count of inbound octets prior to\nexecuting any QoS policies.")
cbQosMatchPrePolicyByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyByte64.setDescription("The 64 bits count of inbound octets prior to executing\nany QoS policies.")
cbQosMatchPrePolicyBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyBitRate.setDescription("The bit rate of the traffic prior to executing any QoS\npolicies.")
cbQosPoliceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17))
cbQosPoliceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1))
if mibBuilder.loadTexts: cbQosPoliceStatsTable.setDescription("This table specifies Police Action related Statistical\ninformation.")
cbQosPoliceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosPoliceStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about Police Action. Police Action specific \ninformation you can find in this table are : \nConformed/Exceeded pkt/byte counters,  bit rates.\n\nThis table contains statistical information only,\nno configuration information associated with it. \nTherefore, it is indexed by the instance specific IDs, \nsuch as cbQosPolicyIndex and cbQosObjectsIndex.")
cbQosPoliceConformedPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedPktOverflow.setDescription("The upper 32 bits count of packets treated as\nconforming by the policing feature.")
cbQosPoliceConformedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedPkt.setDescription("The lower 32 bits count of packets treated as\nconforming by the policing feature.")
cbQosPoliceConformedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedPkt64.setDescription("The 64 bits count of packets treated as conforming\nby the policing feature.")
cbQosPoliceConformedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedByteOverflow.setDescription("The upper 32 bits count of octets treated as\nconforming by the policing feature.")
cbQosPoliceConformedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedByte.setDescription("The lower 32 bits count of octets treated as\nconforming by the policing feature.")
cbQosPoliceConformedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedByte64.setDescription("The 64 bits count of octets treated as conforming\nby the policing feature.")
cbQosPoliceConformedBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedBitRate.setDescription("The bit rate of conforming traffic.")
cbQosPoliceExceededPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededPktOverflow.setDescription("The upper 32 bits count of packets treated as\nnon-conforming by the policing feature.")
cbQosPoliceExceededPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededPkt.setDescription("The 32 bits count of packets treated as\nnon-conforming by the policing feature.")
cbQosPoliceExceededPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededPkt64.setDescription("The 64 bits count of packets treated as\nnon-conforming by the policing feature.")
cbQosPoliceExceededByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededByteOverflow.setDescription("The upper 32 bits count of octets treated as\nnon-conforming by the policing feature.")
cbQosPoliceExceededByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededByte.setDescription("The lower 32 bits count of octets treated as\nnon-conforming by the policing feature.")
cbQosPoliceExceededByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededByte64.setDescription("The 64 bits count of octets treated as\nnon-conforming by the policing feature.")
cbQosPoliceExceededBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededBitRate.setDescription("The bit rate of the non-conforming traffic.")
cbQosPoliceViolatedPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedPktOverflow.setDescription("The upper 32 bits count of packets treated as\nviolated by the policing feature.")
cbQosPoliceViolatedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedPkt.setDescription("The 32 bits count of packets treated as\nviolated by the policing feature.")
cbQosPoliceViolatedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedPkt64.setDescription("The 64 bits count of packets treated as\nviolated by the policing feature.")
cbQosPoliceViolatedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedByteOverflow.setDescription("The upper 32 bits count of octets treated as\nviolated by the policing feature.")
cbQosPoliceViolatedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedByte.setDescription("The lower 32 bits count of octets treated as\nviolated by the policing feature.")
cbQosPoliceViolatedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedByte64.setDescription("The 64 bits count of octets treated as\nviolated by the policing feature.")
cbQosPoliceViolatedBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedBitRate.setDescription("The bit rate of the violating traffic.")
cbQosQueueingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18))
cbQosQueueingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1))
if mibBuilder.loadTexts: cbQosQueueingStatsTable.setDescription("This table specifies Queueing Action related Statistical\ninformation.")
cbQosQueueingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosQueueingStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about queueing action. Queueing action specific \ninformation you can find in this table are : \nvarious Q depth, and discard pkt/byte counters.\n\nThis table contains statistical information only,\nno configuration information associated with it. \nTherefore, it is indexed by the instance specific IDs, \nsuch as cbQosPolicyIndex and cbQosObjectsIndex.")
cbQosQueueingCurrentQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCurrentQDepth.setDescription("The current depth of the queue.")
cbQosQueueingMaxQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingMaxQDepth.setDescription("The maximum depth of the queue.")
cbQosQueueingDiscardByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardByteOverflow.setDescription("The upper 32 bit count of octets, associated with\nthis class, that were dropped by queueing.")
cbQosQueueingDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardByte.setDescription("The lower 32 bits count of octets, associated with\nthis class, that were dropped by queueing.")
cbQosQueueingDiscardByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardByte64.setDescription("The count of octets, associated with this class,\nthat were dropped by queueing.")
cbQosQueueingDiscardPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardPktOverflow.setDescription("The upper 32 bits count of packets, associated with\nthis class, that were dropped by queueing.")
cbQosQueueingDiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardPkt.setDescription("The number of packets, associated with this class,\nthat were dropped by queueing.")
cbQosQueueingDiscardPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardPkt64.setDescription("The number of packets, associated with this class,\nthat were dropped by queueing.")
cbQosTSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19))
cbQosTSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1))
if mibBuilder.loadTexts: cbQosTSStatsTable.setDescription("This table specifies traffic-shaping Action related\nStatistical information.")
cbQosTSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosTSStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about traffic-shaping Action. Traffic-shaping \nAction specific information you can find in this table are : \nvarious delay/drop pkt/byte counters, state of feature,\nand Q size.\n\nThis table contains statistical information only,\nno configuration information associated with it. \nTherefore, it is indexed by the instance specific IDs, \nsuch as cbQosPolicyIndex and cbQosObjectsIndex.")
cbQosTSStatsDelayedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedByteOverflow.setDescription("This object represents the upper 32 bits counter of\noctets that have been delayed.")
cbQosTSStatsDelayedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedByte.setDescription("This object represents the lower 32 bits counter of\noctets that have been delayed.")
cbQosTSStatsDelayedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedByte64.setDescription("This object represents the 64 bits counter of\noctets that have been delayed.")
cbQosTSStatsDelayedPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedPktOverflow.setDescription("This object represents the upper 32 bits counter of\npackets that have been delayed.")
cbQosTSStatsDelayedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedPkt.setDescription("This object represents the lower 32 bits counter of\npackets that have been delayed.")
cbQosTSStatsDelayedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedPkt64.setDescription("This object represents the 64 bits counter of\npackets that have been delayed.")
cbQosTSStatsDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropByteOverflow.setDescription("This object represents the upper 32 bits counter of\noctets that have been dropped during shaping.")
cbQosTSStatsDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropByte.setDescription("This object represents the lower 32 bits counter of\noctets that have been dropped during shaping.")
cbQosTSStatsDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropByte64.setDescription("This object represents the 64 bits counter of\noctets that have been dropped during shaping.")
cbQosTSStatsDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropPktOverflow.setDescription("This object represents the upper 32 bits counter of\npackets that have been dropped during shaping.")
cbQosTSStatsDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropPkt.setDescription("This object represents the lower 32 bits counter of\npackets that have been dropped during shaping.")
cbQosTSStatsDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropPkt64.setDescription("This object represents the 64 bits counter of\npackets that have been dropped during shaping.")
cbQosTSStatsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsActive.setDescription("This object indicates the current traffic-shaping\nstate. When traffic-shaping is enabled and the traffic \nrate exceeds the shape rate, traffic-shaping\nis considered to be active.  Otherwise, it is \nconsidered inactive.")
cbQosTSStatsCurrentQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsCurrentQSize.setDescription("This object indicates the current traffic-shaping\nqueue depth in packets.")
cbQosREDClassStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20))
cbQosREDClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1))
if mibBuilder.loadTexts: cbQosREDClassStatsTable.setDescription("This table specifies per Precedence WRED Action related\nStatistical information.")
cbQosREDClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosREDValue"))
if mibBuilder.loadTexts: cbQosREDClassStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about per Precedence WRED Action. per Precedence\nWRED Action specific information you can find in this table \nare : Random pkt/byte counters, and Tail drop pkt/byte \ncounters.\n\nThis table contains per Precedence/dscp based statistical \ninformation only, no configuration information associated \nwith it.  Therefore, it is indexed by the instance specific \nIDs, and a per Precedence identifier: \ncbQosPolicyIndex, cbQosObjectsIndex and cbQosREDValue.")
cbQosREDRandomDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropPktOverflow.setDescription("The upper 32 bits count of packets dropped when the\nnumber of packets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosREDRandomDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropPkt.setDescription("The lower 32 bits count of packets dropped when\nthe number of packets in the associated queue was \ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosREDRandomDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropPkt64.setDescription("The 64 bits count of packets dropped when the number\nof packets in the associated queue was greater \nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosREDRandomDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropByteOverflow.setDescription("The upper 32 bits count of bytes dropped when the\nnumber of packets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosREDRandomDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropByte.setDescription("The lower 32 bits count of bytes dropped when\nthe number of packets in the associated queue was \ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosREDRandomDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropByte64.setDescription("The 64 bits count of bytes dropped when the number of\npackets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosREDTailDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropPktOverflow.setDescription("The upper 32 bits count of packets dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosREDTailDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropPkt.setDescription("The lower 32 bits count of packets dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosREDTailDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropPkt64.setDescription("The 64 bits count of packets dropped when the number\nof packets in the associated queue was greater\nthan the maximum threshold.")
cbQosREDTailDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropByteOverflow.setDescription("The upper 32 bits count of bytes dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosREDTailDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropByte.setDescription("The lower 32 bits count of bytes dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosREDTailDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropByte64.setDescription("The 64 bits count of bytes dropped when the number of\npackets in the associated queue was greater\nthan the maximum threshold.")
cbQosREDTransmitPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitPktOverflow.setDescription("The upper 32 bits count of bytes transmitted.")
cbQosREDTransmitPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitPkt.setDescription("The lower 32 bits count of bytes trasmitted.")
cbQosREDTransmitPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitPkt64.setDescription("The 64 bits count of packets transmitted.")
cbQosREDTransmitByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitByteOverflow.setDescription("The upper 32 bits count of octets transmitted.")
cbQosREDTransmitByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitByte.setDescription("The lower 32 bits count of octets trasmitted.")
cbQosREDTransmitByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitByte64.setDescription("The 64 bits count of octets transmitted.")
cbQosREDECNMarkPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkPktOverflow.setDescription("The upper 32 bits count of packets ecn marked when the\nnumber of packets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosREDECNMarkPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkPkt.setDescription("The lower 32 bits count of packets ecn marked when\nthe number of packets in the associated queue was \ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosREDECNMarkPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkPkt64.setDescription("The 64 bits count of packets ecn marked when the\nnumber of packets in the associated queue was \ngreater than the minimum threshold and less than \nthe maximum threshold.")
cbQosREDECNMarkByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkByteOverflow.setDescription("The upper 32 bits count of bytes ecn marked when\nthe number of packets in the associated queue was \ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosREDECNMarkByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkByte.setDescription("The lower 32 bits count of bytes ecn marked when\nthe number of packets in the associated queue was \ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosREDECNMarkByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkByte64.setDescription("The 64 bits count of bytes ecn marked when the\nnumber of packets in the associated queue was \ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosREDMeanQSizeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 25), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDMeanQSizeUnits.setDescription("Represents the unit type of cbQosREDMeanQSize\nobject.")
cbQosREDMeanQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 26), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDMeanQSize.setDescription("The average queue size computed and used by the\nWRED algorithm.")
cbQosPoliceActionCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21))
cbQosPoliceActionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1))
if mibBuilder.loadTexts: cbQosPoliceActionCfgTable.setDescription("This table specifies Police Action configuration\ninformation.")
cbQosPoliceActionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgIndex"))
if mibBuilder.loadTexts: cbQosPoliceActionCfgEntry.setDescription("Each entry in this table describes configuration information\nabout Actions for one Police.  The table holds Police \naction specific configuration parameters.\nThis table is a sub-table for cbQosPoliceCfgTable. There is\na 1-to-1 association between one entry here and one entry in \ncbQosPoliceCfgTable. \nThis table contains configuration information only,\nno statistics associated with it. \nThis table has two indices. The first is cbQosConfigIndex \nwhich is drived directly from cbQosPoliceCfgTable to keep the\n1-to-1 mapping nature between two tables. \nThe second is cbQosPoliceActionCfgIndex used to reference \nthe actual actions configured. The maximum number of actions\nsupported is determined by the system, which is 5 currently.")
cbQosPoliceActionCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosPoliceActionCfgIndex.setDescription("An arbitrary (system-assigned) index for police\nactions that are defined by a police configuration.")
cbQosPoliceActionCfgConform = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 2), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgConform.setDescription("Action to be taken when the traffic exceeds the\nconform and exceed token buckets.")
cbQosPoliceActionCfgConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgConformSetValue.setDescription("New packet attribute values for each packet set by\npolice action defined in cbQosPoliceActionCfgConform.\nThis object will be set to zero if the corresponding\npolice action does not require a set value, such as \nno action, drop action or transmit action.")
cbQosPoliceActionCfgExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 4), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgExceed.setDescription("Action to be taken when the traffic exceeds the\nconform and exceed token buckets.")
cbQosPoliceActionCfgExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgExceedSetValue.setDescription("New packet attribute values for each packet set by\npolice action defined in cbQosPoliceActionCfgExceed.\nThis object will be set to zero if the corresponding\npolice action does not require a set value, such as \nno action, drop action or transmit action.")
cbQosPoliceActionCfgViolate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgViolate.setDescription("Action to be taken when the traffic exceeds the\nconform and exceed token buckets.")
cbQosPoliceActionCfgViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgViolateSetValue.setDescription("New packet attribute values for each packet set by\npolice action defined in cbQosPoliceActionCfgViolate.\nThis object will be set to zero if the corresponding\npolice action does not require a set value, such as \nno action, drop action or transmit action.")
cbQosIPHCCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22))
cbQosIPHCCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1))
if mibBuilder.loadTexts: cbQosIPHCCfgTable.setDescription("This table specifies IP Header Compression\nconfiguration information.")
cbQosIPHCCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosIPHCCfgEntry.setDescription("Each entry in this table describes configuration\ninformation about IP Header compression. This\nincludes the compression option of UDP/RTP header,\nTCP header or both.\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is\nindexed by cbQosConfigIndex.")
cbQosIPHCCfgOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1, 1, 1), IPHCOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCCfgOption.setDescription("The configured IP header compression option.\nThe value is defined by IPHCOption.")
cbQosIPHCCfgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCCfgEnabled.setDescription("Boolean to indicate if IPHC is enabled for policy class.")
cbQosIPHCStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23))
cbQosIPHCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1))
if mibBuilder.loadTexts: cbQosIPHCStatsTable.setDescription("This table specifies IP Header Compression\nstatistical information.")
cbQosIPHCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosIPHCStatsEntry.setDescription("Each entry in this table describes statistical\ninformation about IP Header compression.\n\nThis table contains statistical information only,\nno configuration information associated with it.\nTherefore, it is indexed by the instance specific IDs,\nnamely cbQosPolicyIndex and cbQosObjectsIndex.")
cbQosIPHCRtpSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentPktOverflow.setDescription("The upper 32 bits count of outbound UDP/RTP packets.")
cbQosIPHCRtpSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentPkt.setDescription("The lower 32 bits count of outbound UDP/RTP packets.")
cbQosIPHCRtpSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentPkt64.setDescription("The 64 bits count of outbound UDP/RTP packets.")
cbQosIPHCRtpCmprsOutPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPktOverflow.setDescription("The upper 32 bits count of outbound compressed\nUDP/RTP packets.")
cbQosIPHCRtpCmprsOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPkt.setDescription("The lower 32 bits count of outbound compressed\nUDP/RTP packets.")
cbQosIPHCRtpCmprsOutPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPkt64.setDescription("The 64 bits count of outbound compressed\nUDP/RTP packets.")
cbQosIPHCRtpSavedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByteOverflow.setDescription("The upper 32 bits count of UDP/RTP bytes that\nsaved due to IPHC.")
cbQosIPHCRtpSavedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByte.setDescription("The lower 32 bits count of UDP/RTP bytes that\nsaved due to IPHC.")
cbQosIPHCRtpSavedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByte64.setDescription("The 64 bits count of UDP/RTP bytes that saved\ndue to IPHC.")
cbQosIPHCRtpSentByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByteOverflow.setDescription("The upper 32 bits count of outbound UDP/RTP\nbytes.")
cbQosIPHCRtpSentByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByte.setDescription("The lower 32 bits count of outbound UDP/RTP\nbytes.")
cbQosIPHCRtpSentByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByte64.setDescription("The 64 bits count of outbound UDP/RTP bytes.")
cbQosIPHCRtpSentByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByteRate.setDescription("The 32 bits count of outbound UDP/RTP byte rate.")
cbQosIPHCTcpSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentPktOverflow.setDescription("The upper 32 bits count of outbound TCP packets.")
cbQosIPHCTcpSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentPkt.setDescription("The lower 32 bits count of outbound TCP packets.")
cbQosIPHCTcpSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentPkt64.setDescription("The 64 bits count of outbound TCP packets.")
cbQosIPHCTcpCmprsOutPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPktOverflow.setDescription("The upper 32 bits count of outbound compressed\nTCP packets.")
cbQosIPHCTcpCmprsOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPkt.setDescription("The lower 32 bits count of outbound compressed\nTCP packets.")
cbQosIPHCTcpCmprsOutPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPkt64.setDescription("The 64 bits count of outbound compressed TCP\npackets.")
cbQosIPHCTcpSavedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByteOverflow.setDescription("The upper 32 bits count of TCP bytes that saved\ndue to IPHC.")
cbQosIPHCTcpSavedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByte.setDescription("The lower 32 bits count of TCP bytes that saved\ndue to IPHC.")
cbQosIPHCTcpSavedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByte64.setDescription("The 64 bits count of TCP bytes that saved due\nto IPHC.")
cbQosIPHCTcpSentByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByteOverflow.setDescription("The upper 32 bits count of outbound TCP bytes.")
cbQosIPHCTcpSentByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByte.setDescription("The lower 32 bits count of outbound TCP bytes.")
cbQosIPHCTcpSentByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByte64.setDescription("The 64 bits count of outbound TCP bytes.")
cbQosIPHCTcpSentByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByteRate.setDescription("The 32 bits count of outbound TCP byte rate.")
cbQosIPHCRtpFullHdrSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPktOverflow.setDescription("The upper 32 bits count of total full header UDP/RTP packets\nsent out.")
cbQosIPHCRtpFullHdrSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPkt.setDescription("The lower 32 bits count of total full header UDP/RTP packets\nsent out.")
cbQosIPHCRtpFullHdrSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPkt64.setDescription("The 64 bits count of total fullheader UDP/RTP packets sent\nout.")
cbQosIPHCTcpFullHdrSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPktOverflow.setDescription("The upper 32 bits count of total fullheader TCP packets sent\nout.")
cbQosIPHCTcpFullHdrSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPkt.setDescription("The lower 32 bits count of total fullheader TCP packets sent\nout.")
cbQosIPHCTcpFullHdrSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPkt64.setDescription("The 64 bits count of total fullheader TCP packets sent out.")
cbQosSetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24))
cbQosSetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1))
if mibBuilder.loadTexts: cbQosSetStatsTable.setDescription("This table specifies packet marking statistical\ninformation.")
cbQosSetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosSetStatsEntry.setDescription("Each entry in this table describes the packets that\nmarked by each marking type.\n\nThis table contains statistical information only,\nno configuration information associated with it.\nTherefore, it is indexed by the instance specific\nIDs, namely cbQosPolicyIndex and cbQosObjectsIndex.")
cbQosSetDscpPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetDscpPkt64.setDescription("The 64 bits count of packets whose DSCP field is\nmarked by Set feature.")
cbQosSetPrecedencePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetPrecedencePkt64.setDescription("The 64 bits count of packets whose Precedence field is\nmarked by Set feature.")
cbQosSetQosGroupPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetQosGroupPkt64.setDescription("The 64 bits count of packets whose Qos Group field is\nmarked by Set feature.")
cbQosSetFrDePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetFrDePkt64.setDescription("The 64 bits count of packets whose Frame Relay DE Bit\nis marked by Set feature.")
cbQosSetAtmClpPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetAtmClpPkt64.setDescription("The 64 bits count of packets whose ATM CLP Bit is\nmarked by Set feature.")
cbQosSetL2CosPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetL2CosPkt64.setDescription("The 64 bits count of packets whose Layer 2 Cos field is\nmarked by Set feature.")
cbQosSetMplsExpImpositionPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetMplsExpImpositionPkt64.setDescription("The 64 bits count of packets whose MPLS Experimental\nImposition field is marked by Set feature.")
cbQosSetDiscardClassPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetDiscardClassPkt64.setDescription("The 64 bits count of packets whose Discard Class field\nis marked by Set feature.")
cbQosSetMplsExpTopMostPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetMplsExpTopMostPkt64.setDescription("The 64 bits count of packets whose MPLS Experimental\nTopMost field is marked by Set feature.")
cbQosSetSrpPriorityPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetSrpPriorityPkt64.setDescription("The 64 bits count of packets whose SRP Priority field\nis marked by Set feature.")
cbQosSetFrFecnBecnPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetFrFecnBecnPkt64.setDescription("The 64 bits count of packets whose Frame Relay FECN\nBECN field is marked by Set feature.")
cbQosSetDscpTunnelPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetDscpTunnelPkt64.setDescription("The 64 bits count of packets whose DSCP Tunnel field is\nmarked by Set feature.")
cbQosSetPrecedenceTunnelPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetPrecedenceTunnelPkt64.setDescription("The 64 bits count of packets whose Precedence Tunnel\nfield is marked by Set feature.")
cbQosPoliceColorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25))
cbQosPoliceColorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1))
if mibBuilder.loadTexts: cbQosPoliceColorStatsTable.setDescription("This table specifies Police Action related Statistical\ninformation for two rate color aware marker.")
cbQosPoliceColorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosPoliceColorStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about Police Action for Two Rate Color\nAware Marker.\n\nThis table contains statistical information only,\nno configuration information associated with it.\nTherefore, it is indexed by the instance specific IDs,\nsuch as cbQosPolicyIndex and cbQosObjectsIndex.")
cbQosPoliceCfmColorCfmPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmPkt64.setDescription("The 64 bits count of packets which are marked as\nConform-Color by previous node and treated as\nconforming by the policing feature on this node.")
cbQosPoliceCfmColorCfmByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmByte64.setDescription("The 64 bits count of bytes which are marked as\nConform-Color by previous node and treated as\nconforming by the policing feature on this node.")
cbQosPoliceCfmColorExdPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdPkt64.setDescription("The 64 bits count of packets which are marked as\nConform-Color by previous node and treated as\nexceeding by the policing feature on this node.")
cbQosPoliceCfmColorExdByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdByte64.setDescription("The 64 bits count of bytes which are marked as\nConform-Color by previous node and treated as\nexceeding by the policing feature on this node.")
cbQosPoliceCfmColorVltPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltPkt64.setDescription("The 64 bits count of packets which are marked as\nConform-Color by previous node and treated as\nviolating by the policing feature on this node.")
cbQosPoliceCfmColorVltByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltByte64.setDescription("The 64 bits count of bytes which are marked as\nConform-Color by previous node and treated as\nviolating by the policing feature on this node.")
cbQosPoliceExdColorExdPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorExdPkt64.setDescription("The 64 bits count of packets which are marked as\nExceed-Color by previous node and treated as\nexceeding by the policing feature on this node.")
cbQosPoliceExdColorExdByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorExdByte64.setDescription("The 64 bits count of bytes which are marked as\nExceed-Color by previous node and treated as\nexceeding by the policing feature on this node.")
cbQosPoliceExdColorVltPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorVltPkt64.setDescription("The 64 bits count of packets which are marked as\nExceed-Color by previous node and treated as\nviolating by the policing feature on this node.")
cbQosPoliceExdColorVltByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorVltByte64.setDescription("The 64 bits count of bytes which are marked as\nExceed-Color by previous node and treated as\nviolating by the policing feature on this node.")
cbQosPoliceVltColorVltPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceVltColorVltPkt64.setDescription("The 64 bits count of packets which are marked as\nViolate-Color by previous node and treated as\nviolating by the policing feature on this node.")
cbQosPoliceVltColorVltByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceVltColorVltByte64.setDescription("The 64 bits count of bytes which are marked as\nViolate-Color by previous node and treated as\nviolating by the policing feature on this node.")
cbQosPoliceCfmColorCfmBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 13), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmBitRate.setDescription("The bit rate of conform color class conform rate.")
cbQosPoliceCfmColorExdBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdBitRate.setDescription("The bit rate of conform color class exceed rate.")
cbQosPoliceCfmColorVltBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 15), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltBitRate.setDescription("The bit rate of conform color class violate rate.")
cbQosPoliceExdColorExdBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorExdBitRate.setDescription("The bit rate of exceed color class exceed rate.")
cbQosPoliceExdColorVltBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 17), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorVltBitRate.setDescription("The bit rate of exceed color class violate rate.")
cbQosPoliceVltColorVltBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceVltColorVltBitRate.setDescription("The bit rate of violate color class violate rate.")
cbQosTableMapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26))
cbQosTableMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1))
if mibBuilder.loadTexts: cbQosTableMapCfgTable.setDescription("This table specifies Table Map basic configuration\ninformation.")
cbQosTableMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgIndex"))
if mibBuilder.loadTexts: cbQosTableMapCfgEntry.setDescription("Each entry in this table describes configuration\ninformation about a tablemap name, behavior and default\nvalue.  Each cbQosTableMapCfgName is a unique character\nstring in QOS.  This table contains configuration\ninformation only, no statistics associated with it.")
cbQosTableMapCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosTableMapCfgIndex.setDescription("An arbitrary (system-assigned) index for tablemap.")
cbQosTableMapCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapCfgName.setDescription("Name of the tablemap.")
cbQosTableMapCfgBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("value", 1), ("copy", 2), ("ignore", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapCfgBehavior.setDescription("The behavior of a tablemap.\nvalue(1)    Always set to-value to be a configurable\n            default value <0-99> which is defined in\n            cbQosTableMapCfgDftValue.\n\ncopy(2)     Always copy from-value to to-value in case\n            the from-value is not found in the tablemap.\n            This is the default behavior for a tablemap.\n\nignore(3)   Ignore to set to-value when from-value\n            is not found in the tablemap.")
cbQosTableMapCfgDftValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapCfgDftValue.setDescription("The configurable default value used when\ncbQosTableMapCfgBehavior is value(1).")
cbQosTableMapValueCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27))
cbQosTableMapValueCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1))
if mibBuilder.loadTexts: cbQosTableMapValueCfgTable.setDescription("This table specifies the from-value to to-value\nconversion pairs for a tablemap.")
cbQosTableMapValueCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapValueCfgFrom"))
if mibBuilder.loadTexts: cbQosTableMapValueCfgEntry.setDescription("Each entry in this table specifies a from-value to\nto-value conversion pair for a given tablemap.\nThis table contains configuration information only,\nno statistics associated with it.")
cbQosTableMapValueCfgFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosTableMapValueCfgFrom.setDescription("This is the from-value in the tablemap.  If\ncbQosTableMapCfgBehavior equals to either copy(2) or\nignore(3), when the content in the from-type(e.g.,\ncbQosTMSetIpDscpFromType) equals to this value, the\nvalue in the to-type(e.g., IpDscp) will be set to\ncbQosTableMapValueCfgTo.  Each tablemap can configure\nmultiple from-value/to-value pairs.")
cbQosTableMapValueCfgTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapValueCfgTo.setDescription("This is the to-value in the tablemap.  Its usage is\ndescribed in cbQosTableMapValueCfgFrom.")
cbQosTableMapSetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28))
cbQosTableMapSetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1))
if mibBuilder.loadTexts: cbQosTableMapSetCfgTable.setDescription("This table specifies enhanced packet marking\nconfiguration using a pre-defined tablemap.")
cbQosTableMapSetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosTableMapSetCfgEntry.setDescription("Each entry in this table describes configuration\ninformation for an Enhanced Packet Marking Action.\nThe enhanced packet marking action uses a pre-configured\ntable-map to do the from-value to to-value conversion.\nThe packet marking to-type and from-type relationship\ncan be established by using the table-map.\nFollowing is an example:\ncbQosTMSetIpDscpFromType == qosGroup(3)\ncbQosTMSetIpDscpMapName == 'MyTableMap',\nit means that table-map 'MyTableMap' will be used to\nconvert the QosGroup value and the converted value will\nbe used to set IpDSCP.\n\ncbQosConfigIndex is drived directly from\ncbQosSetCfgTable to keep the 1-to-1 mapping between\ntwo tables.  This table contains configuration\ninformation only, no statistics associated with it.")
cbQosTMSetIpDscpFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 1), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpDscpFromType.setDescription("The packet marking type whose value will be converted\nto a to-value based on a pre-configured table-map.  The\nto-value will then be used to set IpDSCP.")
cbQosTMSetIpDscpMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpDscpMapName.setDescription("The name of a pre-configured table-map used to convert\nand set IpDSCP value.")
cbQosTMSetIpPrecedenceFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 3), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpPrecedenceFromType.setDescription("The packet marking type whose value will be converted\nto a to-value based on a pre-configured table-map.  The\nto-value will then be used to set IpPrecedence.")
cbQosTMSetIpPrecedenceMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpPrecedenceMapName.setDescription("The name of a pre-configured table-map used to convert\nand set IpPrecedence value.")
cbQosTMSetQosGroupFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 5), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetQosGroupFromType.setDescription("The packet marking type whose value will be converted\nto a to-value based on a pre-configured table-map.  The\nto-value will then be used to set QosGroup.")
cbQosTMSetQosGroupMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetQosGroupMapName.setDescription("The name of a pre-configured table-map used to convert\nand set QosGroup value.")
cbQosTMSetL2CosFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 7), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetL2CosFromType.setDescription("The packet marking type whose value will be converted\nto a to-value based on a pre-configured table-map.  The\nto-value will then be used to set L2Cos.")
cbQosTMSetL2CosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetL2CosMapName.setDescription("The name of a pre-configured table-map used to convert\nand set L2Cos value.")
cbQosTMSetMplsExpImpFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 9), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpImpFromType.setDescription("The packet marking type whose value will be converted\nto a to-value based on a pre-configured table-map.  The\nto-value will then be used to set MplsExpImposition.")
cbQosTMSetMplsExpImpMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpImpMapName.setDescription("The name of a pre-configured table-map used to convert\nand set MplsExpImposition value.")
cbQosTMSetMplsExpTopFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 11), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpTopFromType.setDescription("The packet marking type whose value will be converted\nto a to-value based on a pre-configured table-map.  The\nto-value will then be used to set MplsExpTopMost.")
cbQosTMSetMplsExpTopMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpTopMapName.setDescription("The name of a pre-configured table-map used to convert\nand set MplsExpTopMost value.")
cbQosEBCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29))
cbQosEBCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1))
if mibBuilder.loadTexts: cbQosEBCfgTable.setDescription("This table specifies Estimate Bandwidth related\nconfiguration information.")
cbQosEBCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosEBCfgEntry.setDescription("Each entry in this table describes configuration\ninformation about Estimate Bandwidth. It includes: \ndrop target, delay target and delay threshold.\n\nThis table contains configuration information only.\nIt is indexed by the cbQosConfigIndex.")
cbQosEBCfgMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 1), CbQosEBType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgMechanism.setDescription("Bandwidth estimate algorithm type.")
cbQosEBCfgDropTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgDropTarget.setDescription("One-in-Number target indicating that no more than\none packet in (this) number will be dropped.")
cbQosEBCfgDelayTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgDelayTarget.setDescription("One-in-Number target indicating that no more than\none packet in (this) number will exceed the delay \nthreshold specified by cbQosEBCfgDelayThreshold.")
cbQosEBCfgDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgDelayThreshold.setDescription("The time in milliseconds for the delay threshold.")
cbQosEBStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30))
cbQosEBStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1))
if mibBuilder.loadTexts: cbQosEBStatsTable.setDescription("This table specifies Estimate Bandwidth related\nstatistical information.")
cbQosEBStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosEBStatsEntry.setDescription("Each entry in this table describes Estimate Bandwidth\nrelated statistical information.")
cbQosEBStatsCorvilEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBStatsCorvilEBValue.setDescription("The current Corvil EB bandwidth value.")
cbQosEBStatsCorvilEBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBStatsCorvilEBStatus.setDescription("Boolean to indicate if Corvil EB is ready.\ntrue  - Bandwidth estimate is available.\nfalse - Bandwidth estimate is not available.")
cbQosEBStatsCorvilCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1, 3), CbQosEBCtd()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBStatsCorvilCTD.setDescription("The Corvil CTD value defined by CbQosEBCtd.")
cbQosMeasureIPSLACfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31))
cbQosMeasureIPSLACfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1))
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgTable.setDescription("This table specifies configuration information for measure type\nIPSLA action. The measure action relates the policy class to a\nspecific IPSLAs auto group. Configuration of measure action of\ntype IPSLA results in automatic generation of IPSLAs synthetic\ntest operations when the policy is attached to interface. The\noperations are created according to the characteristics\nspecified and to the destinations specified in IPSLA auto group.\nThe IPSLAs sythentic test operations measure network statistics\nsuch as latency, packet loss and jitter.\nThis table is to be used only for retrieving the measure\naction configuration information.")
cbQosMeasureIPSLACfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroupIndex"))
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgEntry.setDescription("Each entry describes configuration information about\none instance of IPSLAs measure action in the policy map.\nThe table is indexed by the cbQosConfigIndex and\ncbQosMeasureIPSLACfgGroupIndex.")
cbQosMeasureIPSLACfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroupIndex.setDescription("An arbitrary (system-assigned) index for each\ninstance of IPSLAs measure action. The index is unique\nfor each instance for a particular class in particular\npolicy-map. For example consider following configuration:\n     policy-map p1\n        class c1\n          measure type ip-sla group g1\n          measure type ip-sla group g2\n        class c2\n          measure type ip-sla group g3\n\nIn this case the cbQosMeasureIPSLACfgGroupIndex value\nfor first measure action instance under class c1 will be 1,\nfor second instance it will be 1, and so on. The value\nfor the index will start over again from 1 for class c2.")
cbQosMeasureIPSLACfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroupName.setDescription("IPSLAs auto group name. Group is an aggregation of\noperations sharing the same type, for example udp-jitter\ntype, with common characteristics like frequency,\ninterval etc.  Groups are formed by policies dictated\neither by customer, or by service level or any other\nrequirements.")
cbQosQueueingClassCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32))
cbQosQueueingClassCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1))
if mibBuilder.loadTexts: cbQosQueueingClassCfgTable.setDescription("This table specifies the configuration information for weighted\nqueue limit action per IP precedence basis.")
cbQosQueueingClassCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosQlimitWeightValue"))
if mibBuilder.loadTexts: cbQosQueueingClassCfgEntry.setDescription("Each entry in this table describes configuration\ninformation about a weighted queueing action. The information\nincludes: Threshold value, Units and wieght Type\n(ip,dscp,mplsExp)\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex(which refers to cbQosConfigIndex of\ncbQosQueueingCfgEntry) and cbQosQueueingClassConfigIndex\ncbQosQlimitWeightValue  \ni.e(prec,dscp,discard-class,qos-group,atm-clp,\nmplsExp) of each Weighted Queueing Action.")
cbQosQueueingClassConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosQueueingClassConfigIndex.setDescription("This objects depict the config index for Weighted  Queue limit\nconfigured.")
cbQosQlimitWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cbQosQlimitWeightValue.setDescription("This object depict the weight value configured for\nweighted Queue-limit.\nThe Weight value is IP precedence or IP DSCP of this entry.")
cbQosQueueingClassCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 3), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingClassCfgThreshold.setDescription("This object is used to depict the Threshold value for the\nWeighted Queue Limit.")
cbQosQueueingClassCfgThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 4), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingClassCfgThresholdUnit.setDescription("This object is used to depict the Threshold Unit for the\nWeighted Queue Limit")
cbQosQueueingClassCfgQLimitWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 5), QueueMechanism()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingClassCfgQLimitWeight.setDescription("This objects depict the weight value for Weighted Queue limit\nconfigured\ni.e(precedence,dscp,qos-group,atm-clp,discard-class,mplsExp)    \n\n.")
cbQosC3plAccountCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33))
cbQosC3plAccountCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33, 1))
if mibBuilder.loadTexts: cbQosC3plAccountCfgTable.setDescription("This table specifies C3pl Account Action configuration\ninformation")
cbQosC3plAccountCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosC3plAccountCfgEntry.setDescription("Each entry in this table describes configuration\ninformation about a c3pl account action. The information\nincludes: feature type.\n\nThis table contains configuration information only,\nno statistics associated with it. Therefore, it is indexed\nby the cbQosConfigIndex of each C3pl Account Action.")
cbQosC3plAccountFeatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33, 1, 1, 1), SetC3plAccountFeatureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountFeatureType.setDescription("The feature type is used to indicated different drop\nstatistics.")
cbQosC3plAccountStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34))
cbQosC3plAccountStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1))
if mibBuilder.loadTexts: cbQosC3plAccountStatsTable.setDescription("This table specifies C3pl Account Action related\nstatistics information.")
cbQosC3plAccountStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1)).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountFeatureType"))
if mibBuilder.loadTexts: cbQosC3plAccountStatsEntry.setDescription("Each entry in this table describes the statistical\ninformation about C3pl Account Action. Account action\nspecific information you can find in this table are :\nqueueing drop pkt/byte counters, wred drop pkt/byte\ncounters, police pkt/byte counters.\n\nThis table contains statistical information only,\nno configuration information associated with it.\nTherefore, it is indexed by the instance specific IDs,\nsuch as cbQosPolicyIndex, cbQosObjectsIndex, and\ncbQosC3plAccountFeatureType.")
cbQosC3plAccountDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropPktOverflow.setDescription("The upper 32 bits count of packets dropped when the\nnumber of packets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosC3plAccountDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropPkt.setDescription("The lower 32 bits count of packets dropped when\nthe number of packets in the associated queue was\ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosC3plAccountDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropPkt64.setDescription("The 64 bits count of packets dropped when the number\nof packets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosC3plAccountDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropByteOverflow.setDescription("The upper 32 bits count of bytes dropped when the\nnumber of packets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosC3plAccountDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropByte.setDescription("The lower 32 bits count of bytes dropped when\nthe number of packets in the associated queue was\ngreater than the minimum threshold and less than the\nmaximum threshold.")
cbQosC3plAccountDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropByte64.setDescription("The 64 bits count of bytes dropped when the number of\npackets in the associated queue was greater\nthan the minimum threshold and less than the\nmaximum threshold.")
cbQosC3plAccountTailDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPktOverflow.setDescription("The upper 32 bits count of packets dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosC3plAccountTailDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPkt.setDescription("The lower 32 bits count of packets dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosC3plAccountTailDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPkt64.setDescription("The 64 bits count of packets dropped when the number\nof packets in the associated queue was greater\nthan the maximum threshold.")
cbQosC3plAccountTailDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByteOverflow.setDescription("The upper 32 bits count of bytes dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosC3plAccountTailDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByte.setDescription("The lower 32 bits count of bytes dropped when the\nnumber of packets in the associated queue was greater\nthan the maximum threshold.")
cbQosC3plAccountTailDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByte64.setDescription("The 64 bits count of bytes dropped when the number of\npackets in the associated queue was greater\nthan the maximum threshold.")
ciscocbQosMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 2))
ciscocbQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1))
ciscocbQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2))

# Augmentions

# Groups

cbQosServicePolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 1)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrDLCI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVCI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVPI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfIndex"), ) )
if mibBuilder.loadTexts: cbQosServicePolicyGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosServicePolicyGroup object is superseded by cbQosServicePolicyGroupRev1.")
cbQosInterfacePolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 2)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIFPolicyIndex"), ) )
if mibBuilder.loadTexts: cbQosInterfacePolicyGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosFrameRelayVCPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 3)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosFRPolicyIndex"), ) )
if mibBuilder.loadTexts: cbQosFrameRelayVCPolicyGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosATMPVCPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 4)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPolicyIndex"), ) )
if mibBuilder.loadTexts: cbQosATMPVCPolicyGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 5)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosParentObjectsIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsType"), ) )
if mibBuilder.loadTexts: cbQosObjectsGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosPolicyMapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 6)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapDesc"), ) )
if mibBuilder.loadTexts: cbQosPolicyMapCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosClassMapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 7)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDesc"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMInfo"), ) )
if mibBuilder.loadTexts: cbQosClassMapCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosMatchStmtCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 8)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtInfo"), ) )
if mibBuilder.loadTexts: cbQosMatchStmtCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosQueueingCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 9)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggregateQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPrioBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidthUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgFlowEnabled"), ) )
if mibBuilder.loadTexts: cbQosQueueingCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosQueueingCfgGroup object is superseded by cbQosQueueingCfgGroupRev1.")
cbQosREDCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 10)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgExponWeight"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgMeanQsize"), ) )
if mibBuilder.loadTexts: cbQosREDCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosREDCfgGroup object is superseded by cbQosREDCfgGroupRev1.")
cbQosREDClassCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 11)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgMinThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgMaxThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgPktDropProb"), ) )
if mibBuilder.loadTexts: cbQosREDClassCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosREDClassCfgGroup object is superseded by cbQosREDClassCfgGroupRev1.")
cbQosPoliceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 12)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConformAction"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConformSetValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExceedAction"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExceedSetValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosPoliceCfgGroup object is superseded by cbQosPoliceCfgGroupRev1.")
cbQosTSCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 13)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgAdaptiveEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgLimitType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgAdaptiveRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtBurstSize"), ) )
if mibBuilder.loadTexts: cbQosTSCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosSetCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 14)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpDSCPValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpPrecedenceValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsExpValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFeature"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgQosGroupValue"), ) )
if mibBuilder.loadTexts: cbQosSetCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosSetCfgGroup object is superseded by cbQosSetCfgGroupRev1.")
cbQosClassMapStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 15)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropByteOverflow"), ) )
if mibBuilder.loadTexts: cbQosClassMapStatsGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosNoBufferDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 16)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMNoBufDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMNoBufDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMNoBufDropPktOverflow"), ) )
if mibBuilder.loadTexts: cbQosNoBufferDropGroup.setDescription("Optional objects to provide CB QoS summary statistics.")
cbQosQueueingDynamicQNumberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 17)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgDynamicQNumber"), ) )
if mibBuilder.loadTexts: cbQosQueueingDynamicQNumberGroup.setDescription("Optional objects to provide CB QoS Queueing information.")
cbQosTrafficShapingDelayCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 18)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsActive"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedByteOverflow"), ) )
if mibBuilder.loadTexts: cbQosTrafficShapingDelayCountersGroup.setDescription("Optional objects to provide CB QoS traffic-shaping\ninformation.")
cbQosMatchStmtStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 19)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyByte64"), ) )
if mibBuilder.loadTexts: cbQosMatchStmtStatsGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosPoliceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 20)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededPkt"), ) )
if mibBuilder.loadTexts: cbQosPoliceStatsGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosQueueingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 21)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCurrentQDepth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingMaxQDepth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardByte64"), ) )
if mibBuilder.loadTexts: cbQosQueueingStatsGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosTSStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 22)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsCurrentQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropByte64"), ) )
if mibBuilder.loadTexts: cbQosTSStatsGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosREDClassStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 23)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDMeanQSizeUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDMeanQSize"), ) )
if mibBuilder.loadTexts: cbQosREDClassStatsGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosREDClassXmitCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 24)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitPktOverflow"), ) )
if mibBuilder.loadTexts: cbQosREDClassXmitCountersGroup.setDescription("Optional objects to provide CB QoS objects configuration\ninformation.")
cbQosAFPoliceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 25)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedByte64"), ) )
if mibBuilder.loadTexts: cbQosAFPoliceStatsGroup.setDescription("Optional objects to provide CB QoS objects configuration\ninformation.")
cbQosAFPoliceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 26)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgViolateAction"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgViolateSetValue"), ) )
if mibBuilder.loadTexts: cbQosAFPoliceCfgGroup.setDescription("Optional objects to provide CB QoS objects configuration\ninformation.\ncbQosAFPoliceCfgGroup object is superseded by cbQosAFPoliceViolateCfgGroup.")
cbQosREDDscpCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 27)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgDscpPrec"), ) )
if mibBuilder.loadTexts: cbQosREDDscpCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosNewSetCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 28)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosValue"), ) )
if mibBuilder.loadTexts: cbQosNewSetCfgGroup.setDescription("Optional objects to provide CB QoS objects configuration\ninformation.\ncbQosNewSetCfgGroup object is superseded by cbQosSetCfgL2Group.")
cbQosQueueingCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 29)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPrioBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgFlowEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggregateQLimit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidthUnits"), ) )
if mibBuilder.loadTexts: cbQosQueueingCfgGroupRev1.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosQueueingCfgGroupRev1 object is superseded by cbQosQueueingCfgGroupRev2.")
cbQosREDCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 30)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgExponWeight"), ) )
if mibBuilder.loadTexts: cbQosREDCfgGroupRev1.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosREDClassCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 31)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgThresholdUnit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgPktDropProb"), ) )
if mibBuilder.loadTexts: cbQosREDClassCfgGroupRev1.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosREDClassCfgGroupRev1 object is superseded by  .")
cbQosPoliceCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 32)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgGroupRev1.setDescription("Required objects to provide CB QoS objects configuration\ninformation.\ncbQosPoliceCfgGroupRev1 object is superseded by cbQosPoliceCfgGroupRev2.")
cbQosPoliceActionCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 33)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgConformSetValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgConform"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgExceed"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgExceedSetValue"), ) )
if mibBuilder.loadTexts: cbQosPoliceActionCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosAFPoliceViolateCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 34)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgViolate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgViolateSetValue"), ) )
if mibBuilder.loadTexts: cbQosAFPoliceViolateCfgGroup.setDescription("Optional objects to provide CB QoS objects configuration\ninformation.")
cbQosREDECNCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 35)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgECNEnabled"), ) )
if mibBuilder.loadTexts: cbQosREDECNCfgGroup.setDescription("Optional objects to provide CB QoS objects configuration\ninformation.")
cbQosREDClassECNMarkCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 36)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkPkt64"), ) )
if mibBuilder.loadTexts: cbQosREDClassECNMarkCountersGroup.setDescription("Optional objects to provide CB QoS objects configuration\ninformation.")
cbQosPoliceCfgExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 37)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate64"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgExtGroup.setDescription("Optional objects to provide the information of the\ncommitted policing rate that is greater than the\nmaximum value reportable by cbQosPoliceCfgRate.")
cbQosSetCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 38)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFeature"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpDSCPValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpPrecedenceValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgQosGroupValue"), ) )
if mibBuilder.loadTexts: cbQosSetCfgGroupRev1.setDescription("Required objects to provide CB QoS objects configuration\ninformation for SET/Marking feature.")
cbQosSetCfgMplsImpositionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 39)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsExpValue"), ) )
if mibBuilder.loadTexts: cbQosSetCfgMplsImpositionGroup.setDescription("Optional object to provide CB QoS objects configuration\ninformation for SET/Marking feature.")
cbQosSetCfgDiscardClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 40)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassValue"), ) )
if mibBuilder.loadTexts: cbQosSetCfgDiscardClassGroup.setDescription("Optional object to provide CB QoS objects configuration\ninformation for SET/Marking feature.")
cbQosSetCfgMPLSTopMostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 41)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsExpTopMostValue"), ) )
if mibBuilder.loadTexts: cbQosSetCfgMPLSTopMostGroup.setDescription("Optional object to provide CB QoS objects configuration\ninformation for SET/Marking feature.")
cbQosPoliceCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 42)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgGroupRev2.setDescription("Required objects to provide CB QoS objects configuration\ninformation for POLICE feature.")
cbQosPoliceCfgPirGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 43)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgPirGroup.setDescription("Optional objects to provide CB QoS policing PIR rate.")
cbQosPoliceCfgPercentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 44)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentRateValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRateType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentPirValue"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgPercentGroup.setDescription("Optional objects to provide CB QoS policing CIR and PIR\nrates in percentage.")
cbQosTSCfgPercentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 45)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgRateType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentRateValue"), ) )
if mibBuilder.loadTexts: cbQosTSCfgPercentGroup.setDescription("Optional objects to provide CB QoS committed\ntraffic-shaping rate in percentage.")
cbQosIPHCCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 46)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgOption"), ) )
if mibBuilder.loadTexts: cbQosIPHCCfgGroup.setDescription("Optional object to provide CB QoS IP header compression\nconfiguration information.")
cbQosIPHCStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 47)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpCmprsOutPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpCmprsOutPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSavedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSavedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByteRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpCmprsOutPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSavedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSavedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpCmprsOutPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByteRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSavedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpCmprsOutPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSavedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpCmprsOutPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByte"), ) )
if mibBuilder.loadTexts: cbQosIPHCStatsGroup.setDescription("Optional objects to provide CB QoS IP header compression\nstatistic information.")
cbQosServicePolicyGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 48)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrDLCI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVCI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVPI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEntityIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfIndex"), ) )
if mibBuilder.loadTexts: cbQosServicePolicyGroupRev1.setDescription("Required objects to provide CB QoS objects configuration\ninformation. This group deprecates \ncbQosServicePolicyGroup.")
cbQosQueueingCfgQLimitTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 49)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggrQLimitTime"), ) )
if mibBuilder.loadTexts: cbQosQueueingCfgQLimitTimeGroup.setDescription("Optional object to provide Aggregate Queue time based\nLimit configuration information.")
cbQosREDCfgThresholdTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 50)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThresholdTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThresholdTime"), ) )
if mibBuilder.loadTexts: cbQosREDCfgThresholdTimeGroup.setDescription("Optional objects to provide WRED time based threshold\nLimit configuration information.")
cbQosPoliceCfgCellGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 51)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstCell"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellPir"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstCell"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgCellGroup.setDescription("Optional objects to provide CB QoS policing cell based\nrate configuration information.")
cbQosPoliceCfgTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 52)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstTime"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgTimeGroup.setDescription("Optional objects to provide CB QoS policing time based\nburst size configuration information.")
cbQosPoliceCfgCdvtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 53)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvt"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgCdvtGroup.setDescription("Optional objects to provide CB QoS policing ATM CDVT\nconfiguration information.")
cbQosPoliceCfgColorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 54)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExceedColor"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConformColor"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgColorGroup.setDescription("Optional objects to provide CB QoS policing color aware\nconfiguration information.")
cbQosTSCfgTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 55)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgBurstTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtBurstTime"), ) )
if mibBuilder.loadTexts: cbQosTSCfgTimeGroup.setDescription("Optional objects to provide CB QoS traffic-shaping\ntime based burst size configuration information.")
cbQosSetCfgSrpPriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 56)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriority"), ) )
if mibBuilder.loadTexts: cbQosSetCfgSrpPriorityGroup.setDescription("Optional object to provide CB QoS SET SRP Priority\nconfiguration information.")
cbQosSetCfgFrFecnBecnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 57)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecn"), ) )
if mibBuilder.loadTexts: cbQosSetCfgFrFecnBecnGroup.setDescription("Optional object to provide CB QoS SET Frame Relay\nFECN BECN configuration information.")
cbQosSetStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 58)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetQosGroupPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetAtmClpPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetDiscardClassPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetSrpPriorityPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetPrecedenceTunnelPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetPrecedencePkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetDscpTunnelPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetFrDePkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetMplsExpTopMostPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetDscpPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetL2CosPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetMplsExpImpositionPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetFrFecnBecnPkt64"), ) )
if mibBuilder.loadTexts: cbQosSetStatsGroup.setDescription("Optional objects to provide CB QoS SET statistical\ninformation.")
cbQosPoliceColorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 59)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorVltByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorExdByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorVltPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceVltColorVltPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorCfmByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorVltPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorExdPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorExdPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorExdByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorCfmPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorVltByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceVltColorVltByte64"), ) )
if mibBuilder.loadTexts: cbQosPoliceColorStatsGroup.setDescription("Optional objects to provide CB QoS Assured Forwarding\nPolicing Color Aware statistical information.")
cbQosTableMapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 60)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpPrecedenceFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpDscpMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpImpFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpTopMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgBehavior"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetL2CosFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpImpMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgDftValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpDscpFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapValueCfgTo"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpPrecedenceMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpTopFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetQosGroupMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetL2CosMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetQosGroupFromType"), ) )
if mibBuilder.loadTexts: cbQosTableMapCfgGroup.setDescription("Optional objects to provide CB QoS Enhanced Packet\nMarking configuration information.")
cbQosEBCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 61)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgDelayThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgDelayTarget"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgMechanism"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgDropTarget"), ) )
if mibBuilder.loadTexts: cbQosEBCfgGroup.setDescription("Optional objects to provide Estimate Bandwidth\nconfiguration information.")
cbQosEBStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 62)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsCorvilEBValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsCorvilEBStatus"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsCorvilCTD"), ) )
if mibBuilder.loadTexts: cbQosEBStatsGroup.setDescription("Optional objects to provide Estimate Bandwidth\nstatus information.")
cbQosServicePolicyExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 63)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosVlanIndex"), ) )
if mibBuilder.loadTexts: cbQosServicePolicyExtGroup.setDescription("Optional objects to provide more information about a\nparticular service policy instance.")
cbQosMeasureIPSLACfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 64)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroupIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroupName"), ) )
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroup.setDescription("Optional objects to configure IPSLA measure action.")
cbQosTSCfgExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 65)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgRate64"), ) )
if mibBuilder.loadTexts: cbQosTSCfgExtGroup.setDescription("Objects to provide the information of the\ncommitted shaping rate that is greater than the\nmaximum value reportable by cbQosTSCfgRate.")
cbQosQueueingCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 66)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityLevel"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPrioBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgFlowEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggregateQLimit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidthUnits"), ) )
if mibBuilder.loadTexts: cbQosQueueingCfgGroupRev2.setDescription("Required objects to provide CB QoS objects configuration\ninformation")
cbQosSetCfgL2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 67)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosInnerValue"), ) )
if mibBuilder.loadTexts: cbQosSetCfgL2Group.setDescription("Optional objects to provide CB QoS objects configuration\ninformation")
cbQosREDClassCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 68)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThresholdTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThresholdUnit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgPktDropProb"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThresholdUnit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThresholdTime"), ) )
if mibBuilder.loadTexts: cbQosREDClassCfgGroupRev2.setDescription("Required objects to provide CB QoS objects configuration\ninformation.")
cbQosQueueingClassCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 69)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgQLimitWeight"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgThresholdUnit"), ) )
if mibBuilder.loadTexts: cbQosQueueingClassCfgGroup.setDescription("Required objects to provide CB QoS objects configuration\ninformation")
cbQosPoliceCfgGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 70)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConditional"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ) )
if mibBuilder.loadTexts: cbQosPoliceCfgGroupRev3.setDescription("Required objects to provide CB QoS objects configuration\ninformation for POLICE feature")
cbQosC3plAccountCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 71)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountFeatureType"), ) )
if mibBuilder.loadTexts: cbQosC3plAccountCfgGroup.setDescription("Required objects to provide c3pl account action\nconfiguration information (provide drop types) .")
cbQosC3plAccountStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 72)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropPkt"), ) )
if mibBuilder.loadTexts: cbQosC3plAccountStatsGroup.setDescription("Optional objects to provide c3pl account action\nstatistics information.")
cbQosSetCfgFrDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 73)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrDe"), ) )
if mibBuilder.loadTexts: cbQosSetCfgFrDeGroup.setDescription("Optional object to provide CB QoS objects marking\nconfiguration information on frame relay header.")
cbQosEVCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 74)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVC"), ) )
if mibBuilder.loadTexts: cbQosEVCGroup.setDescription("Optional objects to provide EVC information.")
cbQosFragmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 75)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentPkt64"), ) )
if mibBuilder.loadTexts: cbQosFragmentGroup.setDescription("Optional objects to provide Service Fragment information.")
cbQosSetCfgExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 76)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDeiImposition"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpPrecedenceTunnelValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDei"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpDSCPTunnelValue"), ) )
if mibBuilder.loadTexts: cbQosSetCfgExt.setDescription("Additional objects for configuring mark action on precedence\ntunnel,dscp tunnel, dei, dei imposition.")
cbQosPoliceColorStatsExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 77)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorExdBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorExdBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceVltColorVltBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorCfmBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorVltBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorVltBitRate"), ) )
if mibBuilder.loadTexts: cbQosPoliceColorStatsExt.setDescription("Additional objects for police color aware stats on conform\nrate, exceed rate, violate rate")
cbQosIPHCCfgExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 78)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgEnabled"), ) )
if mibBuilder.loadTexts: cbQosIPHCCfgExt.setDescription("Additional object to indicate IPHC action configured in policy\nclass.")
cbQosIPHCStatsExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 79)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpFullHdrSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpFullHdrSentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpFullHdrSentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpFullHdrSentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpFullHdrSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpFullHdrSentPktOverflow"), ) )
if mibBuilder.loadTexts: cbQosIPHCStatsExt.setDescription("Additional objects for IPHC stats.")
cbQos421XRCfgExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 80)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtBurstSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDiscontinuityTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgBurstSize64"), ) )
if mibBuilder.loadTexts: cbQos421XRCfgExt.setDescription("The following 4 changes have been made\n\n1. Added 64 bit objects\n========================\ncbQosQueueingCfgBandwidth64, cbQosQueueingCfgIndividualQSize64,\ncbQosPoliceCfgBurstSize64, cbQosPoliceCfgExtBurstSize64,\ncbQosPoliceCfgPir64,\ncbQosTSCfgBurstSize64, cbQosTSCfgExtBurstSize64\n\n2. Deprecated the objects corresponding to the newly added 64\nbit objects\n================================================================\n\ncbQosQueueingCfgBandwidth, cbQosQueueingCfgIndividualQSize,\ncbQosPoliceCfgBurstSize, cbQosPoliceCfgExtBurstSize,\ncbQosPoliceCfgPir, cbQosTSCfgBurstSize, cbQosTSCfgExtBurstSize\n\n2. Range expanded for\n==================\ncbQosQueueingCfgBandwidth, cbQosQueueingCfgIndividualQSize,\ncbQosPoliceCfgBurstSize, cbQosPoliceCfgExtBurstSize,\ncbQosPoliceCfgPir, cbQosTSCfgBurstSize, cbQosTSCfgExtBurstSize,\n\ncbQosREDCfgMinThreshold, cbQosREDCfgMaxThreshold,\ncbQosPoliceCfgRate, cbQosPoliceCfgBurstCell,\ncbQosPoliceCfgExtBurstCell,  cbQosPoliceCfgBurstTime,\ncbQosPoliceCfgExtBurstTime, cbQosPoliceCfgCdvt,\ncbQosTSCfgRate,cbQosTSCfgBurstTime, cbQosTSCfgExtBurstTime\n\n3. New object added\n================\ncbQosPolicyDiscontinuityTime\n\n4. Added new type (srp-priority) to\n==================================\nPoliceAction")

# Compliances

ciscocbQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 1)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBCompliance.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router.")
ciscocbQosMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 2)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev1.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBCompliance.")
ciscocbQosMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 3)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev2.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev1.")
ciscocbQosMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 4)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev3.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev2.")
ciscocbQosMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 5)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev4.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev2.")
ciscocbQosMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 6)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev5.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev4.")
ciscocbQosMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 7)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev6.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev5.")
ciscocbQosMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 8)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev7.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev5.")
ciscocbQosMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 9)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrDeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev8.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev7.")
ciscocbQosMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 10)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev9.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev8.")
ciscocbQosMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 11)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev10.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev9.")
ciscocbQosMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 12)).setObjects(*(("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQos421XRCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ) )
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev11.setDescription("The compliance statement for entities that implement\nclass-based QoS on a Cisco router. This compliance module\ndeprecates ciscocbQosMIBComplianceRev10.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", PYSNMP_MODULE_ID=ciscoCBQosMIB)

# Types
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", CbQosEBCtd=CbQosEBCtd, CbQosEBType=CbQosEBType, CbQosQueueDepth=CbQosQueueDepth, CbQosQueueUnitType=CbQosQueueUnitType, CbQosRateType=CbQosRateType, CbQosTMSetType=CbQosTMSetType, IPHCOption=IPHCOption, InterfaceType=InterfaceType, PoliceAction=PoliceAction, QosClassInfo=QosClassInfo, QosMatchInfo=QosMatchInfo, QosObjectType=QosObjectType, QueueMechanism=QueueMechanism, QueueingBandwidthUnits=QueueingBandwidthUnits, REDMechanism=REDMechanism, SetC3plAccountFeatureType=SetC3plAccountFeatureType, SetFeatureType=SetFeatureType, TrafficDirection=TrafficDirection, TrafficShapingLimit=TrafficShapingLimit)

# Objects
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", ciscoCBQosMIB=ciscoCBQosMIB, ciscoCBQosMIBObjects=ciscoCBQosMIBObjects, cbQosServicePolicy=cbQosServicePolicy, cbQosServicePolicyTable=cbQosServicePolicyTable, cbQosServicePolicyEntry=cbQosServicePolicyEntry, cbQosPolicyIndex=cbQosPolicyIndex, cbQosIfType=cbQosIfType, cbQosPolicyDirection=cbQosPolicyDirection, cbQosIfIndex=cbQosIfIndex, cbQosFrDLCI=cbQosFrDLCI, cbQosAtmVPI=cbQosAtmVPI, cbQosAtmVCI=cbQosAtmVCI, cbQosEntityIndex=cbQosEntityIndex, cbQosVlanIndex=cbQosVlanIndex, cbQosEVC=cbQosEVC, cbQosPolicyDiscontinuityTime=cbQosPolicyDiscontinuityTime, cbQosInterfacePolicy=cbQosInterfacePolicy, cbQosInterfacePolicyTable=cbQosInterfacePolicyTable, cbQosInterfacePolicyEntry=cbQosInterfacePolicyEntry, cbQosIFPolicyIndex=cbQosIFPolicyIndex, cbQosFrameRelayVCPolicy=cbQosFrameRelayVCPolicy, cbQosFrameRelayPolicyTable=cbQosFrameRelayPolicyTable, cbQosFrameRelayPolicyEntry=cbQosFrameRelayPolicyEntry, cbQosFRPolicyIndex=cbQosFRPolicyIndex, cbQosATMPVCPolicy=cbQosATMPVCPolicy, cbQosATMPVCPolicyTable=cbQosATMPVCPolicyTable, cbQosATMPVCPolicyEntry=cbQosATMPVCPolicyEntry, cbQosATMPolicyIndex=cbQosATMPolicyIndex, cbQosObjects=cbQosObjects, cbQosObjectsTable=cbQosObjectsTable, cbQosObjectsEntry=cbQosObjectsEntry, cbQosObjectsIndex=cbQosObjectsIndex, cbQosConfigIndex=cbQosConfigIndex, cbQosObjectsType=cbQosObjectsType, cbQosParentObjectsIndex=cbQosParentObjectsIndex, cbQosPolicyMapCfg=cbQosPolicyMapCfg, cbQosPolicyMapCfgTable=cbQosPolicyMapCfgTable, cbQosPolicyMapCfgEntry=cbQosPolicyMapCfgEntry, cbQosPolicyMapName=cbQosPolicyMapName, cbQosPolicyMapDesc=cbQosPolicyMapDesc, cbQosClassMapCfg=cbQosClassMapCfg, cbQosCMCfgTable=cbQosCMCfgTable, cbQosCMCfgEntry=cbQosCMCfgEntry, cbQosCMName=cbQosCMName, cbQosCMDesc=cbQosCMDesc, cbQosCMInfo=cbQosCMInfo, cbQosMatchStmtCfg=cbQosMatchStmtCfg, cbQosMatchStmtCfgTable=cbQosMatchStmtCfgTable, cbQosMatchStmtCfgEntry=cbQosMatchStmtCfgEntry, cbQosMatchStmtName=cbQosMatchStmtName, cbQosMatchStmtInfo=cbQosMatchStmtInfo, cbQosQueueingCfg=cbQosQueueingCfg, cbQosQueueingCfgTable=cbQosQueueingCfgTable, cbQosQueueingCfgEntry=cbQosQueueingCfgEntry, cbQosQueueingCfgBandwidth=cbQosQueueingCfgBandwidth, cbQosQueueingCfgBandwidthUnits=cbQosQueueingCfgBandwidthUnits, cbQosQueueingCfgFlowEnabled=cbQosQueueingCfgFlowEnabled, cbQosQueueingCfgPriorityEnabled=cbQosQueueingCfgPriorityEnabled, cbQosQueueingCfgAggregateQSize=cbQosQueueingCfgAggregateQSize, cbQosQueueingCfgIndividualQSize=cbQosQueueingCfgIndividualQSize, cbQosQueueingCfgDynamicQNumber=cbQosQueueingCfgDynamicQNumber, cbQosQueueingCfgPrioBurstSize=cbQosQueueingCfgPrioBurstSize, cbQosQueueingCfgQLimitUnits=cbQosQueueingCfgQLimitUnits, cbQosQueueingCfgAggregateQLimit=cbQosQueueingCfgAggregateQLimit, cbQosQueueingCfgAggrQLimitTime=cbQosQueueingCfgAggrQLimitTime, cbQosQueueingCfgPriorityLevel=cbQosQueueingCfgPriorityLevel, cbQosQueueingCfgBandwidth64=cbQosQueueingCfgBandwidth64, cbQosQueueingCfgIndividualQSize64=cbQosQueueingCfgIndividualQSize64, cbQosREDCfg=cbQosREDCfg, cbQosREDCfgTable=cbQosREDCfgTable, cbQosREDCfgEntry=cbQosREDCfgEntry, cbQosREDCfgExponWeight=cbQosREDCfgExponWeight, cbQosREDCfgMeanQsize=cbQosREDCfgMeanQsize, cbQosREDCfgDscpPrec=cbQosREDCfgDscpPrec, cbQosREDCfgECNEnabled=cbQosREDCfgECNEnabled, cbQosREDClassCfg=cbQosREDClassCfg, cbQosREDClassCfgTable=cbQosREDClassCfgTable, cbQosREDClassCfgEntry=cbQosREDClassCfgEntry, cbQosREDValue=cbQosREDValue, cbQosREDCfgMinThreshold=cbQosREDCfgMinThreshold, cbQosREDCfgMaxThreshold=cbQosREDCfgMaxThreshold, cbQosREDCfgPktDropProb=cbQosREDCfgPktDropProb, cbQosREDClassCfgThresholdUnit=cbQosREDClassCfgThresholdUnit, cbQosREDClassCfgMinThreshold=cbQosREDClassCfgMinThreshold, cbQosREDClassCfgMaxThreshold=cbQosREDClassCfgMaxThreshold, cbQosREDClassCfgMinThresholdTime=cbQosREDClassCfgMinThresholdTime, cbQosREDClassCfgMaxThresholdTime=cbQosREDClassCfgMaxThresholdTime, cbQosREDClassCfgMaxThresholdUnit=cbQosREDClassCfgMaxThresholdUnit, cbQosREDClassCfgMinThresholdUnit=cbQosREDClassCfgMinThresholdUnit, cbQosPoliceCfg=cbQosPoliceCfg, cbQosPoliceCfgTable=cbQosPoliceCfgTable, cbQosPoliceCfgEntry=cbQosPoliceCfgEntry, cbQosPoliceCfgRate=cbQosPoliceCfgRate, cbQosPoliceCfgBurstSize=cbQosPoliceCfgBurstSize, cbQosPoliceCfgExtBurstSize=cbQosPoliceCfgExtBurstSize, cbQosPoliceCfgConformAction=cbQosPoliceCfgConformAction, cbQosPoliceCfgConformSetValue=cbQosPoliceCfgConformSetValue, cbQosPoliceCfgExceedAction=cbQosPoliceCfgExceedAction, cbQosPoliceCfgExceedSetValue=cbQosPoliceCfgExceedSetValue, cbQosPoliceCfgViolateAction=cbQosPoliceCfgViolateAction, cbQosPoliceCfgViolateSetValue=cbQosPoliceCfgViolateSetValue, cbQosPoliceCfgPir=cbQosPoliceCfgPir, cbQosPoliceCfgRate64=cbQosPoliceCfgRate64, cbQosPoliceCfgRateType=cbQosPoliceCfgRateType, cbQosPoliceCfgPercentRateValue=cbQosPoliceCfgPercentRateValue, cbQosPoliceCfgPercentPirValue=cbQosPoliceCfgPercentPirValue, cbQosPoliceCfgCellRate=cbQosPoliceCfgCellRate, cbQosPoliceCfgCellPir=cbQosPoliceCfgCellPir, cbQosPoliceCfgBurstCell=cbQosPoliceCfgBurstCell, cbQosPoliceCfgExtBurstCell=cbQosPoliceCfgExtBurstCell, cbQosPoliceCfgBurstTime=cbQosPoliceCfgBurstTime, cbQosPoliceCfgExtBurstTime=cbQosPoliceCfgExtBurstTime, cbQosPoliceCfgCdvt=cbQosPoliceCfgCdvt, cbQosPoliceCfgConformColor=cbQosPoliceCfgConformColor, cbQosPoliceCfgExceedColor=cbQosPoliceCfgExceedColor, cbQosPoliceCfgConditional=cbQosPoliceCfgConditional, cbQosPoliceCfgBurstSize64=cbQosPoliceCfgBurstSize64, cbQosPoliceCfgExtBurstSize64=cbQosPoliceCfgExtBurstSize64, cbQosPoliceCfgPir64=cbQosPoliceCfgPir64, cbQosTSCfg=cbQosTSCfg, cbQosTSCfgTable=cbQosTSCfgTable, cbQosTSCfgEntry=cbQosTSCfgEntry, cbQosTSCfgRate=cbQosTSCfgRate, cbQosTSCfgBurstSize=cbQosTSCfgBurstSize, cbQosTSCfgExtBurstSize=cbQosTSCfgExtBurstSize, cbQosTSCfgAdaptiveEnabled=cbQosTSCfgAdaptiveEnabled)
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", cbQosTSCfgAdaptiveRate=cbQosTSCfgAdaptiveRate, cbQosTSCfgLimitType=cbQosTSCfgLimitType, cbQosTSCfgRateType=cbQosTSCfgRateType, cbQosTSCfgPercentRateValue=cbQosTSCfgPercentRateValue, cbQosTSCfgBurstTime=cbQosTSCfgBurstTime, cbQosTSCfgExtBurstTime=cbQosTSCfgExtBurstTime, cbQosTSCfgRate64=cbQosTSCfgRate64, cbQosTSCfgBurstSize64=cbQosTSCfgBurstSize64, cbQosTSCfgExtBurstSize64=cbQosTSCfgExtBurstSize64, cbQosSetCfg=cbQosSetCfg, cbQosSetCfgTable=cbQosSetCfgTable, cbQosSetCfgEntry=cbQosSetCfgEntry, cbQosSetCfgFeature=cbQosSetCfgFeature, cbQosSetCfgIpDSCPValue=cbQosSetCfgIpDSCPValue, cbQosSetCfgIpPrecedenceValue=cbQosSetCfgIpPrecedenceValue, cbQosSetCfgQosGroupValue=cbQosSetCfgQosGroupValue, cbQosSetCfgL2CosValue=cbQosSetCfgL2CosValue, cbQosSetCfgMplsExpValue=cbQosSetCfgMplsExpValue, cbQosSetCfgDiscardClassValue=cbQosSetCfgDiscardClassValue, cbQosSetCfgMplsExpTopMostValue=cbQosSetCfgMplsExpTopMostValue, cbQosSetCfgSrpPriority=cbQosSetCfgSrpPriority, cbQosSetCfgFrFecnBecn=cbQosSetCfgFrFecnBecn, cbQosSetCfgL2CosInnerValue=cbQosSetCfgL2CosInnerValue, cbQosSetCfgFrDe=cbQosSetCfgFrDe, cbQosSetCfgIpPrecedenceTunnelValue=cbQosSetCfgIpPrecedenceTunnelValue, cbQosSetCfgIpDSCPTunnelValue=cbQosSetCfgIpDSCPTunnelValue, cbQosSetCfgDei=cbQosSetCfgDei, cbQosSetCfgDeiImposition=cbQosSetCfgDeiImposition, cbQosClassMapStats=cbQosClassMapStats, cbQosCMStatsTable=cbQosCMStatsTable, cbQosCMStatsEntry=cbQosCMStatsEntry, cbQosCMPrePolicyPktOverflow=cbQosCMPrePolicyPktOverflow, cbQosCMPrePolicyPkt=cbQosCMPrePolicyPkt, cbQosCMPrePolicyPkt64=cbQosCMPrePolicyPkt64, cbQosCMPrePolicyByteOverflow=cbQosCMPrePolicyByteOverflow, cbQosCMPrePolicyByte=cbQosCMPrePolicyByte, cbQosCMPrePolicyByte64=cbQosCMPrePolicyByte64, cbQosCMPrePolicyBitRate=cbQosCMPrePolicyBitRate, cbQosCMPostPolicyByteOverflow=cbQosCMPostPolicyByteOverflow, cbQosCMPostPolicyByte=cbQosCMPostPolicyByte, cbQosCMPostPolicyByte64=cbQosCMPostPolicyByte64, cbQosCMPostPolicyBitRate=cbQosCMPostPolicyBitRate, cbQosCMDropPktOverflow=cbQosCMDropPktOverflow, cbQosCMDropPkt=cbQosCMDropPkt, cbQosCMDropPkt64=cbQosCMDropPkt64, cbQosCMDropByteOverflow=cbQosCMDropByteOverflow, cbQosCMDropByte=cbQosCMDropByte, cbQosCMDropByte64=cbQosCMDropByte64, cbQosCMDropBitRate=cbQosCMDropBitRate, cbQosCMNoBufDropPktOverflow=cbQosCMNoBufDropPktOverflow, cbQosCMNoBufDropPkt=cbQosCMNoBufDropPkt, cbQosCMNoBufDropPkt64=cbQosCMNoBufDropPkt64, cbQosCMFragmentPktOverflow=cbQosCMFragmentPktOverflow, cbQosCMFragmentPkt=cbQosCMFragmentPkt, cbQosCMFragmentPkt64=cbQosCMFragmentPkt64, cbQosCMFragmentByteOverflow=cbQosCMFragmentByteOverflow, cbQosCMFragmentByte=cbQosCMFragmentByte, cbQosCMFragmentByte64=cbQosCMFragmentByte64, cbQosMatchStmtStats=cbQosMatchStmtStats, cbQosMatchStmtStatsTable=cbQosMatchStmtStatsTable, cbQosMatchStmtStatsEntry=cbQosMatchStmtStatsEntry, cbQosMatchPrePolicyPktOverflow=cbQosMatchPrePolicyPktOverflow, cbQosMatchPrePolicyPkt=cbQosMatchPrePolicyPkt, cbQosMatchPrePolicyPkt64=cbQosMatchPrePolicyPkt64, cbQosMatchPrePolicyByteOverflow=cbQosMatchPrePolicyByteOverflow, cbQosMatchPrePolicyByte=cbQosMatchPrePolicyByte, cbQosMatchPrePolicyByte64=cbQosMatchPrePolicyByte64, cbQosMatchPrePolicyBitRate=cbQosMatchPrePolicyBitRate, cbQosPoliceStats=cbQosPoliceStats, cbQosPoliceStatsTable=cbQosPoliceStatsTable, cbQosPoliceStatsEntry=cbQosPoliceStatsEntry, cbQosPoliceConformedPktOverflow=cbQosPoliceConformedPktOverflow, cbQosPoliceConformedPkt=cbQosPoliceConformedPkt, cbQosPoliceConformedPkt64=cbQosPoliceConformedPkt64, cbQosPoliceConformedByteOverflow=cbQosPoliceConformedByteOverflow, cbQosPoliceConformedByte=cbQosPoliceConformedByte, cbQosPoliceConformedByte64=cbQosPoliceConformedByte64, cbQosPoliceConformedBitRate=cbQosPoliceConformedBitRate, cbQosPoliceExceededPktOverflow=cbQosPoliceExceededPktOverflow, cbQosPoliceExceededPkt=cbQosPoliceExceededPkt, cbQosPoliceExceededPkt64=cbQosPoliceExceededPkt64, cbQosPoliceExceededByteOverflow=cbQosPoliceExceededByteOverflow, cbQosPoliceExceededByte=cbQosPoliceExceededByte, cbQosPoliceExceededByte64=cbQosPoliceExceededByte64, cbQosPoliceExceededBitRate=cbQosPoliceExceededBitRate, cbQosPoliceViolatedPktOverflow=cbQosPoliceViolatedPktOverflow, cbQosPoliceViolatedPkt=cbQosPoliceViolatedPkt, cbQosPoliceViolatedPkt64=cbQosPoliceViolatedPkt64, cbQosPoliceViolatedByteOverflow=cbQosPoliceViolatedByteOverflow, cbQosPoliceViolatedByte=cbQosPoliceViolatedByte, cbQosPoliceViolatedByte64=cbQosPoliceViolatedByte64, cbQosPoliceViolatedBitRate=cbQosPoliceViolatedBitRate, cbQosQueueingStats=cbQosQueueingStats, cbQosQueueingStatsTable=cbQosQueueingStatsTable, cbQosQueueingStatsEntry=cbQosQueueingStatsEntry, cbQosQueueingCurrentQDepth=cbQosQueueingCurrentQDepth, cbQosQueueingMaxQDepth=cbQosQueueingMaxQDepth, cbQosQueueingDiscardByteOverflow=cbQosQueueingDiscardByteOverflow, cbQosQueueingDiscardByte=cbQosQueueingDiscardByte, cbQosQueueingDiscardByte64=cbQosQueueingDiscardByte64, cbQosQueueingDiscardPktOverflow=cbQosQueueingDiscardPktOverflow, cbQosQueueingDiscardPkt=cbQosQueueingDiscardPkt, cbQosQueueingDiscardPkt64=cbQosQueueingDiscardPkt64, cbQosTSStats=cbQosTSStats, cbQosTSStatsTable=cbQosTSStatsTable, cbQosTSStatsEntry=cbQosTSStatsEntry, cbQosTSStatsDelayedByteOverflow=cbQosTSStatsDelayedByteOverflow, cbQosTSStatsDelayedByte=cbQosTSStatsDelayedByte, cbQosTSStatsDelayedByte64=cbQosTSStatsDelayedByte64, cbQosTSStatsDelayedPktOverflow=cbQosTSStatsDelayedPktOverflow, cbQosTSStatsDelayedPkt=cbQosTSStatsDelayedPkt, cbQosTSStatsDelayedPkt64=cbQosTSStatsDelayedPkt64, cbQosTSStatsDropByteOverflow=cbQosTSStatsDropByteOverflow, cbQosTSStatsDropByte=cbQosTSStatsDropByte, cbQosTSStatsDropByte64=cbQosTSStatsDropByte64, cbQosTSStatsDropPktOverflow=cbQosTSStatsDropPktOverflow, cbQosTSStatsDropPkt=cbQosTSStatsDropPkt, cbQosTSStatsDropPkt64=cbQosTSStatsDropPkt64, cbQosTSStatsActive=cbQosTSStatsActive, cbQosTSStatsCurrentQSize=cbQosTSStatsCurrentQSize, cbQosREDClassStats=cbQosREDClassStats, cbQosREDClassStatsTable=cbQosREDClassStatsTable, cbQosREDClassStatsEntry=cbQosREDClassStatsEntry, cbQosREDRandomDropPktOverflow=cbQosREDRandomDropPktOverflow, cbQosREDRandomDropPkt=cbQosREDRandomDropPkt, cbQosREDRandomDropPkt64=cbQosREDRandomDropPkt64, cbQosREDRandomDropByteOverflow=cbQosREDRandomDropByteOverflow)
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", cbQosREDRandomDropByte=cbQosREDRandomDropByte, cbQosREDRandomDropByte64=cbQosREDRandomDropByte64, cbQosREDTailDropPktOverflow=cbQosREDTailDropPktOverflow, cbQosREDTailDropPkt=cbQosREDTailDropPkt, cbQosREDTailDropPkt64=cbQosREDTailDropPkt64, cbQosREDTailDropByteOverflow=cbQosREDTailDropByteOverflow, cbQosREDTailDropByte=cbQosREDTailDropByte, cbQosREDTailDropByte64=cbQosREDTailDropByte64, cbQosREDTransmitPktOverflow=cbQosREDTransmitPktOverflow, cbQosREDTransmitPkt=cbQosREDTransmitPkt, cbQosREDTransmitPkt64=cbQosREDTransmitPkt64, cbQosREDTransmitByteOverflow=cbQosREDTransmitByteOverflow, cbQosREDTransmitByte=cbQosREDTransmitByte, cbQosREDTransmitByte64=cbQosREDTransmitByte64, cbQosREDECNMarkPktOverflow=cbQosREDECNMarkPktOverflow, cbQosREDECNMarkPkt=cbQosREDECNMarkPkt, cbQosREDECNMarkPkt64=cbQosREDECNMarkPkt64, cbQosREDECNMarkByteOverflow=cbQosREDECNMarkByteOverflow, cbQosREDECNMarkByte=cbQosREDECNMarkByte, cbQosREDECNMarkByte64=cbQosREDECNMarkByte64, cbQosREDMeanQSizeUnits=cbQosREDMeanQSizeUnits, cbQosREDMeanQSize=cbQosREDMeanQSize, cbQosPoliceActionCfg=cbQosPoliceActionCfg, cbQosPoliceActionCfgTable=cbQosPoliceActionCfgTable, cbQosPoliceActionCfgEntry=cbQosPoliceActionCfgEntry, cbQosPoliceActionCfgIndex=cbQosPoliceActionCfgIndex, cbQosPoliceActionCfgConform=cbQosPoliceActionCfgConform, cbQosPoliceActionCfgConformSetValue=cbQosPoliceActionCfgConformSetValue, cbQosPoliceActionCfgExceed=cbQosPoliceActionCfgExceed, cbQosPoliceActionCfgExceedSetValue=cbQosPoliceActionCfgExceedSetValue, cbQosPoliceActionCfgViolate=cbQosPoliceActionCfgViolate, cbQosPoliceActionCfgViolateSetValue=cbQosPoliceActionCfgViolateSetValue, cbQosIPHCCfg=cbQosIPHCCfg, cbQosIPHCCfgTable=cbQosIPHCCfgTable, cbQosIPHCCfgEntry=cbQosIPHCCfgEntry, cbQosIPHCCfgOption=cbQosIPHCCfgOption, cbQosIPHCCfgEnabled=cbQosIPHCCfgEnabled, cbQosIPHCStats=cbQosIPHCStats, cbQosIPHCStatsTable=cbQosIPHCStatsTable, cbQosIPHCStatsEntry=cbQosIPHCStatsEntry, cbQosIPHCRtpSentPktOverflow=cbQosIPHCRtpSentPktOverflow, cbQosIPHCRtpSentPkt=cbQosIPHCRtpSentPkt, cbQosIPHCRtpSentPkt64=cbQosIPHCRtpSentPkt64, cbQosIPHCRtpCmprsOutPktOverflow=cbQosIPHCRtpCmprsOutPktOverflow, cbQosIPHCRtpCmprsOutPkt=cbQosIPHCRtpCmprsOutPkt, cbQosIPHCRtpCmprsOutPkt64=cbQosIPHCRtpCmprsOutPkt64, cbQosIPHCRtpSavedByteOverflow=cbQosIPHCRtpSavedByteOverflow, cbQosIPHCRtpSavedByte=cbQosIPHCRtpSavedByte, cbQosIPHCRtpSavedByte64=cbQosIPHCRtpSavedByte64, cbQosIPHCRtpSentByteOverflow=cbQosIPHCRtpSentByteOverflow, cbQosIPHCRtpSentByte=cbQosIPHCRtpSentByte, cbQosIPHCRtpSentByte64=cbQosIPHCRtpSentByte64, cbQosIPHCRtpSentByteRate=cbQosIPHCRtpSentByteRate, cbQosIPHCTcpSentPktOverflow=cbQosIPHCTcpSentPktOverflow, cbQosIPHCTcpSentPkt=cbQosIPHCTcpSentPkt, cbQosIPHCTcpSentPkt64=cbQosIPHCTcpSentPkt64, cbQosIPHCTcpCmprsOutPktOverflow=cbQosIPHCTcpCmprsOutPktOverflow, cbQosIPHCTcpCmprsOutPkt=cbQosIPHCTcpCmprsOutPkt, cbQosIPHCTcpCmprsOutPkt64=cbQosIPHCTcpCmprsOutPkt64, cbQosIPHCTcpSavedByteOverflow=cbQosIPHCTcpSavedByteOverflow, cbQosIPHCTcpSavedByte=cbQosIPHCTcpSavedByte, cbQosIPHCTcpSavedByte64=cbQosIPHCTcpSavedByte64, cbQosIPHCTcpSentByteOverflow=cbQosIPHCTcpSentByteOverflow, cbQosIPHCTcpSentByte=cbQosIPHCTcpSentByte, cbQosIPHCTcpSentByte64=cbQosIPHCTcpSentByte64, cbQosIPHCTcpSentByteRate=cbQosIPHCTcpSentByteRate, cbQosIPHCRtpFullHdrSentPktOverflow=cbQosIPHCRtpFullHdrSentPktOverflow, cbQosIPHCRtpFullHdrSentPkt=cbQosIPHCRtpFullHdrSentPkt, cbQosIPHCRtpFullHdrSentPkt64=cbQosIPHCRtpFullHdrSentPkt64, cbQosIPHCTcpFullHdrSentPktOverflow=cbQosIPHCTcpFullHdrSentPktOverflow, cbQosIPHCTcpFullHdrSentPkt=cbQosIPHCTcpFullHdrSentPkt, cbQosIPHCTcpFullHdrSentPkt64=cbQosIPHCTcpFullHdrSentPkt64, cbQosSetStats=cbQosSetStats, cbQosSetStatsTable=cbQosSetStatsTable, cbQosSetStatsEntry=cbQosSetStatsEntry, cbQosSetDscpPkt64=cbQosSetDscpPkt64, cbQosSetPrecedencePkt64=cbQosSetPrecedencePkt64, cbQosSetQosGroupPkt64=cbQosSetQosGroupPkt64, cbQosSetFrDePkt64=cbQosSetFrDePkt64, cbQosSetAtmClpPkt64=cbQosSetAtmClpPkt64, cbQosSetL2CosPkt64=cbQosSetL2CosPkt64, cbQosSetMplsExpImpositionPkt64=cbQosSetMplsExpImpositionPkt64, cbQosSetDiscardClassPkt64=cbQosSetDiscardClassPkt64, cbQosSetMplsExpTopMostPkt64=cbQosSetMplsExpTopMostPkt64, cbQosSetSrpPriorityPkt64=cbQosSetSrpPriorityPkt64, cbQosSetFrFecnBecnPkt64=cbQosSetFrFecnBecnPkt64, cbQosSetDscpTunnelPkt64=cbQosSetDscpTunnelPkt64, cbQosSetPrecedenceTunnelPkt64=cbQosSetPrecedenceTunnelPkt64, cbQosPoliceColorStats=cbQosPoliceColorStats, cbQosPoliceColorStatsTable=cbQosPoliceColorStatsTable, cbQosPoliceColorStatsEntry=cbQosPoliceColorStatsEntry, cbQosPoliceCfmColorCfmPkt64=cbQosPoliceCfmColorCfmPkt64, cbQosPoliceCfmColorCfmByte64=cbQosPoliceCfmColorCfmByte64, cbQosPoliceCfmColorExdPkt64=cbQosPoliceCfmColorExdPkt64, cbQosPoliceCfmColorExdByte64=cbQosPoliceCfmColorExdByte64, cbQosPoliceCfmColorVltPkt64=cbQosPoliceCfmColorVltPkt64, cbQosPoliceCfmColorVltByte64=cbQosPoliceCfmColorVltByte64, cbQosPoliceExdColorExdPkt64=cbQosPoliceExdColorExdPkt64, cbQosPoliceExdColorExdByte64=cbQosPoliceExdColorExdByte64, cbQosPoliceExdColorVltPkt64=cbQosPoliceExdColorVltPkt64, cbQosPoliceExdColorVltByte64=cbQosPoliceExdColorVltByte64, cbQosPoliceVltColorVltPkt64=cbQosPoliceVltColorVltPkt64, cbQosPoliceVltColorVltByte64=cbQosPoliceVltColorVltByte64, cbQosPoliceCfmColorCfmBitRate=cbQosPoliceCfmColorCfmBitRate, cbQosPoliceCfmColorExdBitRate=cbQosPoliceCfmColorExdBitRate, cbQosPoliceCfmColorVltBitRate=cbQosPoliceCfmColorVltBitRate, cbQosPoliceExdColorExdBitRate=cbQosPoliceExdColorExdBitRate, cbQosPoliceExdColorVltBitRate=cbQosPoliceExdColorVltBitRate, cbQosPoliceVltColorVltBitRate=cbQosPoliceVltColorVltBitRate, cbQosTableMapCfg=cbQosTableMapCfg, cbQosTableMapCfgTable=cbQosTableMapCfgTable, cbQosTableMapCfgEntry=cbQosTableMapCfgEntry, cbQosTableMapCfgIndex=cbQosTableMapCfgIndex, cbQosTableMapCfgName=cbQosTableMapCfgName, cbQosTableMapCfgBehavior=cbQosTableMapCfgBehavior, cbQosTableMapCfgDftValue=cbQosTableMapCfgDftValue, cbQosTableMapValueCfg=cbQosTableMapValueCfg, cbQosTableMapValueCfgTable=cbQosTableMapValueCfgTable, cbQosTableMapValueCfgEntry=cbQosTableMapValueCfgEntry, cbQosTableMapValueCfgFrom=cbQosTableMapValueCfgFrom, cbQosTableMapValueCfgTo=cbQosTableMapValueCfgTo, cbQosTableMapSetCfg=cbQosTableMapSetCfg, cbQosTableMapSetCfgTable=cbQosTableMapSetCfgTable, cbQosTableMapSetCfgEntry=cbQosTableMapSetCfgEntry, cbQosTMSetIpDscpFromType=cbQosTMSetIpDscpFromType, cbQosTMSetIpDscpMapName=cbQosTMSetIpDscpMapName, cbQosTMSetIpPrecedenceFromType=cbQosTMSetIpPrecedenceFromType)
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", cbQosTMSetIpPrecedenceMapName=cbQosTMSetIpPrecedenceMapName, cbQosTMSetQosGroupFromType=cbQosTMSetQosGroupFromType, cbQosTMSetQosGroupMapName=cbQosTMSetQosGroupMapName, cbQosTMSetL2CosFromType=cbQosTMSetL2CosFromType, cbQosTMSetL2CosMapName=cbQosTMSetL2CosMapName, cbQosTMSetMplsExpImpFromType=cbQosTMSetMplsExpImpFromType, cbQosTMSetMplsExpImpMapName=cbQosTMSetMplsExpImpMapName, cbQosTMSetMplsExpTopFromType=cbQosTMSetMplsExpTopFromType, cbQosTMSetMplsExpTopMapName=cbQosTMSetMplsExpTopMapName, cbQosEBCfg=cbQosEBCfg, cbQosEBCfgTable=cbQosEBCfgTable, cbQosEBCfgEntry=cbQosEBCfgEntry, cbQosEBCfgMechanism=cbQosEBCfgMechanism, cbQosEBCfgDropTarget=cbQosEBCfgDropTarget, cbQosEBCfgDelayTarget=cbQosEBCfgDelayTarget, cbQosEBCfgDelayThreshold=cbQosEBCfgDelayThreshold, cbQosEBStats=cbQosEBStats, cbQosEBStatsTable=cbQosEBStatsTable, cbQosEBStatsEntry=cbQosEBStatsEntry, cbQosEBStatsCorvilEBValue=cbQosEBStatsCorvilEBValue, cbQosEBStatsCorvilEBStatus=cbQosEBStatsCorvilEBStatus, cbQosEBStatsCorvilCTD=cbQosEBStatsCorvilCTD, cbQosMeasureIPSLACfg=cbQosMeasureIPSLACfg, cbQosMeasureIPSLACfgTable=cbQosMeasureIPSLACfgTable, cbQosMeasureIPSLACfgEntry=cbQosMeasureIPSLACfgEntry, cbQosMeasureIPSLACfgGroupIndex=cbQosMeasureIPSLACfgGroupIndex, cbQosMeasureIPSLACfgGroupName=cbQosMeasureIPSLACfgGroupName, cbQosQueueingClassCfg=cbQosQueueingClassCfg, cbQosQueueingClassCfgTable=cbQosQueueingClassCfgTable, cbQosQueueingClassCfgEntry=cbQosQueueingClassCfgEntry, cbQosQueueingClassConfigIndex=cbQosQueueingClassConfigIndex, cbQosQlimitWeightValue=cbQosQlimitWeightValue, cbQosQueueingClassCfgThreshold=cbQosQueueingClassCfgThreshold, cbQosQueueingClassCfgThresholdUnit=cbQosQueueingClassCfgThresholdUnit, cbQosQueueingClassCfgQLimitWeight=cbQosQueueingClassCfgQLimitWeight, cbQosC3plAccountCfg=cbQosC3plAccountCfg, cbQosC3plAccountCfgTable=cbQosC3plAccountCfgTable, cbQosC3plAccountCfgEntry=cbQosC3plAccountCfgEntry, cbQosC3plAccountFeatureType=cbQosC3plAccountFeatureType, cbQosC3plAccountStats=cbQosC3plAccountStats, cbQosC3plAccountStatsTable=cbQosC3plAccountStatsTable, cbQosC3plAccountStatsEntry=cbQosC3plAccountStatsEntry, cbQosC3plAccountDropPktOverflow=cbQosC3plAccountDropPktOverflow, cbQosC3plAccountDropPkt=cbQosC3plAccountDropPkt, cbQosC3plAccountDropPkt64=cbQosC3plAccountDropPkt64, cbQosC3plAccountDropByteOverflow=cbQosC3plAccountDropByteOverflow, cbQosC3plAccountDropByte=cbQosC3plAccountDropByte, cbQosC3plAccountDropByte64=cbQosC3plAccountDropByte64, cbQosC3plAccountTailDropPktOverflow=cbQosC3plAccountTailDropPktOverflow, cbQosC3plAccountTailDropPkt=cbQosC3plAccountTailDropPkt, cbQosC3plAccountTailDropPkt64=cbQosC3plAccountTailDropPkt64, cbQosC3plAccountTailDropByteOverflow=cbQosC3plAccountTailDropByteOverflow, cbQosC3plAccountTailDropByte=cbQosC3plAccountTailDropByte, cbQosC3plAccountTailDropByte64=cbQosC3plAccountTailDropByte64, ciscocbQosMIBConformance=ciscocbQosMIBConformance, ciscocbQosMIBCompliances=ciscocbQosMIBCompliances, ciscocbQosMIBGroups=ciscocbQosMIBGroups)

# Groups
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", cbQosServicePolicyGroup=cbQosServicePolicyGroup, cbQosInterfacePolicyGroup=cbQosInterfacePolicyGroup, cbQosFrameRelayVCPolicyGroup=cbQosFrameRelayVCPolicyGroup, cbQosATMPVCPolicyGroup=cbQosATMPVCPolicyGroup, cbQosObjectsGroup=cbQosObjectsGroup, cbQosPolicyMapCfgGroup=cbQosPolicyMapCfgGroup, cbQosClassMapCfgGroup=cbQosClassMapCfgGroup, cbQosMatchStmtCfgGroup=cbQosMatchStmtCfgGroup, cbQosQueueingCfgGroup=cbQosQueueingCfgGroup, cbQosREDCfgGroup=cbQosREDCfgGroup, cbQosREDClassCfgGroup=cbQosREDClassCfgGroup, cbQosPoliceCfgGroup=cbQosPoliceCfgGroup, cbQosTSCfgGroup=cbQosTSCfgGroup, cbQosSetCfgGroup=cbQosSetCfgGroup, cbQosClassMapStatsGroup=cbQosClassMapStatsGroup, cbQosNoBufferDropGroup=cbQosNoBufferDropGroup, cbQosQueueingDynamicQNumberGroup=cbQosQueueingDynamicQNumberGroup, cbQosTrafficShapingDelayCountersGroup=cbQosTrafficShapingDelayCountersGroup, cbQosMatchStmtStatsGroup=cbQosMatchStmtStatsGroup, cbQosPoliceStatsGroup=cbQosPoliceStatsGroup, cbQosQueueingStatsGroup=cbQosQueueingStatsGroup, cbQosTSStatsGroup=cbQosTSStatsGroup, cbQosREDClassStatsGroup=cbQosREDClassStatsGroup, cbQosREDClassXmitCountersGroup=cbQosREDClassXmitCountersGroup, cbQosAFPoliceStatsGroup=cbQosAFPoliceStatsGroup, cbQosAFPoliceCfgGroup=cbQosAFPoliceCfgGroup, cbQosREDDscpCfgGroup=cbQosREDDscpCfgGroup, cbQosNewSetCfgGroup=cbQosNewSetCfgGroup, cbQosQueueingCfgGroupRev1=cbQosQueueingCfgGroupRev1, cbQosREDCfgGroupRev1=cbQosREDCfgGroupRev1, cbQosREDClassCfgGroupRev1=cbQosREDClassCfgGroupRev1, cbQosPoliceCfgGroupRev1=cbQosPoliceCfgGroupRev1, cbQosPoliceActionCfgGroup=cbQosPoliceActionCfgGroup, cbQosAFPoliceViolateCfgGroup=cbQosAFPoliceViolateCfgGroup, cbQosREDECNCfgGroup=cbQosREDECNCfgGroup, cbQosREDClassECNMarkCountersGroup=cbQosREDClassECNMarkCountersGroup, cbQosPoliceCfgExtGroup=cbQosPoliceCfgExtGroup, cbQosSetCfgGroupRev1=cbQosSetCfgGroupRev1, cbQosSetCfgMplsImpositionGroup=cbQosSetCfgMplsImpositionGroup, cbQosSetCfgDiscardClassGroup=cbQosSetCfgDiscardClassGroup, cbQosSetCfgMPLSTopMostGroup=cbQosSetCfgMPLSTopMostGroup, cbQosPoliceCfgGroupRev2=cbQosPoliceCfgGroupRev2, cbQosPoliceCfgPirGroup=cbQosPoliceCfgPirGroup, cbQosPoliceCfgPercentGroup=cbQosPoliceCfgPercentGroup, cbQosTSCfgPercentGroup=cbQosTSCfgPercentGroup, cbQosIPHCCfgGroup=cbQosIPHCCfgGroup, cbQosIPHCStatsGroup=cbQosIPHCStatsGroup, cbQosServicePolicyGroupRev1=cbQosServicePolicyGroupRev1, cbQosQueueingCfgQLimitTimeGroup=cbQosQueueingCfgQLimitTimeGroup, cbQosREDCfgThresholdTimeGroup=cbQosREDCfgThresholdTimeGroup, cbQosPoliceCfgCellGroup=cbQosPoliceCfgCellGroup, cbQosPoliceCfgTimeGroup=cbQosPoliceCfgTimeGroup, cbQosPoliceCfgCdvtGroup=cbQosPoliceCfgCdvtGroup, cbQosPoliceCfgColorGroup=cbQosPoliceCfgColorGroup, cbQosTSCfgTimeGroup=cbQosTSCfgTimeGroup, cbQosSetCfgSrpPriorityGroup=cbQosSetCfgSrpPriorityGroup, cbQosSetCfgFrFecnBecnGroup=cbQosSetCfgFrFecnBecnGroup, cbQosSetStatsGroup=cbQosSetStatsGroup, cbQosPoliceColorStatsGroup=cbQosPoliceColorStatsGroup, cbQosTableMapCfgGroup=cbQosTableMapCfgGroup, cbQosEBCfgGroup=cbQosEBCfgGroup, cbQosEBStatsGroup=cbQosEBStatsGroup, cbQosServicePolicyExtGroup=cbQosServicePolicyExtGroup, cbQosMeasureIPSLACfgGroup=cbQosMeasureIPSLACfgGroup, cbQosTSCfgExtGroup=cbQosTSCfgExtGroup, cbQosQueueingCfgGroupRev2=cbQosQueueingCfgGroupRev2, cbQosSetCfgL2Group=cbQosSetCfgL2Group, cbQosREDClassCfgGroupRev2=cbQosREDClassCfgGroupRev2, cbQosQueueingClassCfgGroup=cbQosQueueingClassCfgGroup, cbQosPoliceCfgGroupRev3=cbQosPoliceCfgGroupRev3, cbQosC3plAccountCfgGroup=cbQosC3plAccountCfgGroup, cbQosC3plAccountStatsGroup=cbQosC3plAccountStatsGroup, cbQosSetCfgFrDeGroup=cbQosSetCfgFrDeGroup, cbQosEVCGroup=cbQosEVCGroup, cbQosFragmentGroup=cbQosFragmentGroup, cbQosSetCfgExt=cbQosSetCfgExt, cbQosPoliceColorStatsExt=cbQosPoliceColorStatsExt, cbQosIPHCCfgExt=cbQosIPHCCfgExt, cbQosIPHCStatsExt=cbQosIPHCStatsExt, cbQos421XRCfgExt=cbQos421XRCfgExt)

# Compliances
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", ciscocbQosMIBCompliance=ciscocbQosMIBCompliance, ciscocbQosMIBComplianceRev1=ciscocbQosMIBComplianceRev1, ciscocbQosMIBComplianceRev2=ciscocbQosMIBComplianceRev2, ciscocbQosMIBComplianceRev3=ciscocbQosMIBComplianceRev3, ciscocbQosMIBComplianceRev4=ciscocbQosMIBComplianceRev4, ciscocbQosMIBComplianceRev5=ciscocbQosMIBComplianceRev5, ciscocbQosMIBComplianceRev6=ciscocbQosMIBComplianceRev6, ciscocbQosMIBComplianceRev7=ciscocbQosMIBComplianceRev7, ciscocbQosMIBComplianceRev8=ciscocbQosMIBComplianceRev8, ciscocbQosMIBComplianceRev9=ciscocbQosMIBComplianceRev9, ciscocbQosMIBComplianceRev10=ciscocbQosMIBComplianceRev10, ciscocbQosMIBComplianceRev11=ciscocbQosMIBComplianceRev11)
