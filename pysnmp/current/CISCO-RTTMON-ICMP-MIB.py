# PySNMP SMI module. Autogenerated from smidump -f python CISCO-RTTMON-ICMP-MIB
# by libsmi2pysnmp-0.1.3 at Mon Dec  7 11:55:56 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( rttMonCtrlAdminIndex, rttMonLatestOper, rttMonStats, ) = mibBuilder.importSymbols("CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex", "rttMonLatestOper", "rttMonStats")
( RttResponseSense, ) = mibBuilder.importSymbols("CISCO-RTTMON-TC-MIB", "RttResponseSense")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp")

# Objects

rttMonIcmpJitterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8))
if mibBuilder.loadTexts: rttMonIcmpJitterStatsTable.setDescription("The ICMP Jitter statistics table contains summarized \ninformation of the results for a conceptual RTT control \nrow. A rolling accumulated history of this information \nis maintained in a series of hourly 'group(s)'.\n\nWhen rttMonIcmpJitterStatsStartTimeId groups exceeds \nthe rttMonStatisticsAdminNumHourGroups value, the \noldest corresponding hourly group will be deleted and will \nbe replaced with the new rttMonIcmpJitterStatsStartTimeId \nhourly group.\n\nThe table is created only if the rttMonCtrlAdminRttType\nis 'icmpJitter' and the rttMonEchoAdminProtocol is \n'icmpJitterAppl'. It will be removed when the corresponding \nconceptual RTT control row is destroyed.")
rttMonIcmpJitterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1)).setIndexNames((0, "CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex"), (0, "CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsStartTimeId"))
if mibBuilder.loadTexts: rttMonIcmpJitterStatsEntry.setDescription("An entry in ICMP jitter stats table. Each entry contains the \nobjects which accumulate the results of a series of RTT \noperations over a 60 minute time period or a time period \nstored in rttMonScheduleAdminRttLife, whichever is smaller.")
rttMonIcmpJitterStatsStartTimeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 1), TimeStamp()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsStartTimeId.setDescription("The value of sysUpTime at the time when this \nrow was created.")
rttMonIcmpJitterStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsCompletions.setDescription("The number of ICMP jitter operation that have completed \nsuccessfully.")
rttMonIcmpJStatsOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOverThresholds.setDescription("The number of ICMP jitter operations that violate \njitterAvg threshold which is defined in RttMonReactVar.")
rttMonIcmpJitterStatsNumRTTs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumRTTs.setDescription("The number of RTT's that are successfully measured.")
rttMonIcmpJitterStatsRTTSums = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTSums.setDescription("The sum of RTT's that are successfully measured for this\nrttMonIcmpJitterStatsStartTimeId hourly group. The number\nof the successfully measured RTT is stored in the\nrttMonIcmpJitterStatsNumRTT.")
rttMonIcmpJStatsRTTSum2Lows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsRTTSum2Lows.setDescription("The sum of squares of RTT's that are successfully measured\n(low order 32 bits).")
rttMonIcmpJStatsRTTSum2Highs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsRTTSum2Highs.setDescription("The sum of squares of RTT's that are successfully measured\n(high order 32 bits).")
rttMonIcmpJitterStatsRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTMin.setDescription("The minimum of RTT's that were successfully measured.")
rttMonIcmpJitterStatsRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTMax.setDescription("The maximum of RTT's that were successfully measured.")
rttMonIcmpJitterStatsMinPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinPosSD.setDescription("The minimum of absolute values of all positive jitter values\nfor packets sent from source to destination.")
rttMonIcmpJitterStatsMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxPosSD.setDescription("The maximum of absolute values of all positive jitter values\nfor packets sent from source to destination.")
rttMonIcmpJitterStatsNumPosSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumPosSDs.setDescription("The number of all positive jitter values for packets\nsent from source to destination.")
rttMonIcmpJitterStatsSumPosSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumPosSDs.setDescription("The sum of all positive jitter values for packets sent\nfrom source to destination. The number of such values\nis stored in rttMonIcmpJitterStatsNumPosSD.")
rttMonIcmpJStatsSum2PosSDLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosSDLows.setDescription("The sum of square of all positive jitter values for packets\nsent from source to destination (low order 32 bits).")
rttMonIcmpJStatsSum2PosSDHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosSDHighs.setDescription("The sum of square of all positive jitter values for packets\nsent from source to destination (high order 32 bits).")
rttMonIcmpJitterStatsMinNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinNegSD.setDescription("The minimum of all negative jitter values for packets sent\nfrom source to destination.")
rttMonIcmpJitterStatsMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxNegSD.setDescription("The maximum of all negative jitter values for packets sent\nfrom source to destination.")
rttMonIcmpJitterStatsNumNegSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumNegSDs.setDescription("The number of all negative jitter values for packets\nsent from source to destination.")
rttMonIcmpJitterStatsSumNegSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumNegSDs.setDescription("The sum of all negative jitter values for packets sent\nfrom source to destination. The number of such values\nis stored in rttMonIcmpJitterStatsNumNegSD.")
rttMonIcmpJStatsSum2NegSDLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegSDLows.setDescription("The sum of square of all negative jitter values for\npackets sent from source to destination (low order 32 bits).")
rttMonIcmpJStatsSum2NegSDHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegSDHighs.setDescription("The sum of square of all negative jitter values for\npackets sent from source to destination (high order 32 bits).")
rttMonIcmpJitterStatsMinPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinPosDS.setDescription("The minimum of all positive jitter values for packets sent\nfrom destination to source.")
rttMonIcmpJitterStatsMaxPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxPosDS.setDescription("The maximum of all positive jitter values for packets sent\nfrom destination to source.")
rttMonIcmpJitterStatsNumPosDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumPosDSes.setDescription("The number of all positive jitter values for packets \nsent from destination to source.")
rttMonIcmpJitterStatsSumPosDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumPosDSes.setDescription("The sum of all positive jitter values for packets sent\nfrom destination to source. The number of such values\nis stored in rttMonIcmpJitterStatsNumPosDS.")
rttMonIcmpJStatsSum2PosDSLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosDSLows.setDescription("The sum of squares of all positive jitter values for\npackets sent from destination to source (low order 32 bits).")
rttMonIcmpJStatsSum2PosDSHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosDSHighs.setDescription("The sum of squares of all positive jitter values for\npackets sent from destination to source (high order 32 bits).")
rttMonIcmpJitterStatsMinNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinNegDS.setDescription("The minimum of all negative jitter values for packets sent\nfrom destination to source.")
rttMonIcmpJitterStatsMaxNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxNegDS.setDescription("The maximum of all negative jitter values for packets sent\nfrom destination to source.")
rttMonIcmpJitterStatsNumNegDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumNegDSes.setDescription("The number of all negative jitter values for packets\nsent from destination to source.")
rttMonIcmpJitterStatsSumNegDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumNegDSes.setDescription("The sum of all negative jitter values for packets sent\nfrom destination to source. The number of such values\nis stored in rttMonIcmpJitterStatsNumNegDS.")
rttMonIcmpJStatsSum2NegDSLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegDSLows.setDescription("The sum of squares of all negative jitter values for\npackets sent from destination to source (low order 32 bits).")
rttMonIcmpJStatsSum2NegDSHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegDSHighs.setDescription("The sum of squares of all negative jitter values for\npackets sent from destination to source (high order 32 bits).")
rttMonIcmpJitterStatsPktLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktLosses.setDescription("The number of lost packets")
rttMonIcmpJStatsPktOutSeqBoth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqBoth.setDescription("The number of packets arrived out of sequence in both\nsource-to-destination and destination-to-source direction.")
rttMonIcmpJStatsPktOutSeqSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqSDs.setDescription("The number of packets arrived out of sequence in the \ndirection of source-to-destination.")
rttMonIcmpJStatsPktOutSeqDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqDSes.setDescription("The number of packets arrived out of sequence in the\ndirection of destination-to-source.")
rttMonIcmpJitterStatsPktSkippeds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktSkippeds.setDescription("The number of packets that are skipped per operation because \nthe router could not send the packet out.")
rttMonIcmpJitterStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsErrors.setDescription("The number of occasions when a ICMP jitter operation could not\nbe initiated because of an internal error")
rttMonIcmpJitterStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsBusies.setDescription("The number of occasions when a ICMP jitter operation could not\nbe initiated because a previous ICMP jitter operation has not\nbeen completed.")
rttMonIcmpJitterStatsOWSumSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWSumSDs.setDescription("The sum of one way trip time from source to destination.")
rttMonIcmpJStatsOWSum2SDLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2SDLows.setDescription("The sum of squares of one way trip time from source to \ndestination (low order 32 bits).")
rttMonIcmpJStatsOWSum2SDHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2SDHighs.setDescription("The sum of squares of one way trip time from source to \ndestination (high order 32 bits).")
rttMonIcmpJitterStatsOWMinSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMinSD.setDescription("The minimum of all one way trip time from source to \ndestination.")
rttMonIcmpJitterStatsOWMaxSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMaxSD.setDescription("The maximum of all one way trip time from source to \ndestination.")
rttMonIcmpJitterStatsOWSumDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWSumDSes.setDescription("The sum of one way trip time from destination to source.")
rttMonIcmpJStatsOWSum2DSLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2DSLows.setDescription("The sum of squares of one way trip time from destination \nto source (low order 32 bits).")
rttMonIcmpJStatsOWSum2DSHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2DSHighs.setDescription("The sum of squares of one way trip time from destination \nto source (high order 32 bits).")
rttMonIcmpJitterStatsOWMinDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMinDS.setDescription("The minimum of all one way trip time from destination \nto source.")
rttMonIcmpJitterStatsOWMaxDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMaxDS.setDescription("The maximum of all one way trip time from destination \nto source.")
rttMonIcmpJitterStatsNumOWs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumOWs.setDescription("The number of one way trip time that are successfully \nmeasured.")
rttMonIcmpJitterStatsAvgJ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJ.setDescription("The average of positive and negative jitter\nvalues for source-to-destination and \ndestination-to-source direction.")
rttMonIcmpJitterStatsAvgJSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJSD.setDescription("The average of positive and negative jitter\nvalues in source-to-destination direction.")
rttMonIcmpJitterStatsAvgJDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJDS.setDescription("The average of positive and negative jitter\nvalues in destination-to-source direction.")
rttMonIcmpJitterMinSucPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterMinSucPktLoss.setDescription("The minimum number of packets that are dropped \nsuccessively.")
rttMonIcmpJitterMaxSucPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterMaxSucPktLoss.setDescription("The maximum number of packets that are dropped\nsuccessively.")
rttMonIcmpJitterStatsIAJOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJOut.setDescription("Inter-arrival jitter (RFC 1889) at responder")
rttMonIcmpJitterStatsIAJIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJIn.setDescription("Inter-arrival jitter (RFC 1889) at sender")
rttMonIcmpJitterStatsPktLateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktLateAs.setDescription("The number of packets that arrived after the timeout.")
rttMonLatestIcmpJitterOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4))
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOperTable.setDescription("A table which contains the status of latest ICMP Jitter \noperation.\n\nEach conceptual row corresponds to a ICMP jitter probe \ndefined in rttMonCtrlAdminTable and has same index as\nrttMonCtrlAdminTable. \n\nAn entry in this table is created only if the \nrttMonCtrlAdminRttType is 'icmpJitter', the \nrttMonEchoAdminProtocol is 'icmpJitterAppl' and valid \nrttMonEchoAdminTargetAddress is configured. The entry will \nstart to collect data when rttMonCtrlAdminStatus from \nrttMonCtrlAdminStatus is in 'active' state. The entry \nwill be removed when the rttMonCtrlAdminStatus is in \n'destroy' state.")
rttMonLatestIcmpJitterOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1)).setIndexNames((0, "CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex"))
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOperEntry.setDescription("A list of objects that record the latest\nICMP jitter operation.")
rttMonLatestIcmpJitterNumRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumRTT.setDescription("The number of RTT's that were successfully measured.")
rttMonLatestIcmpJitterRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTSum.setDescription("The sum of RTT's that are successfully measured.\nThe number of successfully measured RTT is \nstored in rttMonLatestIcmpJitterNumRTT.")
rttMonLatestIcmpJitterRTTSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTSum2.setDescription("The sum of squares of RTT's that are successfully measured.")
rttMonLatestIcmpJitterRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTMin.setDescription("The minimum of RTT's that were successfully measured.")
rttMonLatestIcmpJitterRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTMax.setDescription("The maximum of RTT's that were successfully measured.")
rttMonLatestIcmpJitterMinPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinPosSD.setDescription("The minimum of all positive jitter values for packets sent\nfrom source to destination.")
rttMonLatestIcmpJitterMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxPosSD.setDescription("The maximum of all positive jitter values for packets sent\nfrom source to destination.")
rttMonLatestIcmpJitterNumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumPosSD.setDescription("The number of all positive jitter values for packets\nsent from source to destination.")
rttMonLatestIcmpJitterSumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumPosSD.setDescription("The sum of all positive jitter values for packets sent\nsource to destination. The number of such values\nis stored in rttMonLatestIcmpJitterNumPosSD.")
rttMonLatestIcmpJitterSum2PosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2PosSD.setDescription("The sum of square of all positive jitter values for\npackets sent from source to destination.")
rttMonLatestIcmpJitterMinNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinNegSD.setDescription("The minimum of absolute values of all negative jitter values\nfor packets sent from source to destination.")
rttMonLatestIcmpJitterMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxNegSD.setDescription("The maximum of absolute values of all negative jitter values\nfor packets sent from source to destination.")
rttMonLatestIcmpJitterNumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumNegSD.setDescription("The number of all negative jitter values for packets\nsent from source to destination.")
rttMonLatestIcmpJitterSumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumNegSD.setDescription("The sum of all negative jitter values for packets sent\nfrom source to destination. The number of such values\nis stored in rttMonLatestIcmpJitterNumNegSD.")
rttMonLatestIcmpJitterSum2NegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2NegSD.setDescription("The sum of square of all negative jitter values for\npackets sent from source to destination.")
rttMonLatestIcmpJitterMinPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinPosDS.setDescription("The minimum of all positive jitter values for packets sent\nfrom destination to source.")
rttMonLatestIcmpJitterMaxPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxPosDS.setDescription("The maximum of all positive jitter values for packets sent\nfrom destination to source.")
rttMonLatestIcmpJitterNumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumPosDS.setDescription("The number of all positive jitter values for packets\nsent from destination to source.")
rttMonLatestIcmpJitterSumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumPosDS.setDescription("The sum of all positive jitter values for packets sent\nfrom destination to source. The number of such values\nis stored in rttMonLatestIcmpJitterNumPosDS.")
rttMonLatestIcmpJitterSum2PosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2PosDS.setDescription("The sum of squares of all positive jitter values for\npackets sent from destination to source.")
rttMonLatestIcmpJitterMinNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinNegDS.setDescription("The minimum of all negative jitter values for packets sent\nfrom destination to source.")
rttMonLatestIcmpJitterMaxNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxNegDS.setDescription("The maximum of all negative jitter values for packets sent\nfrom destination to source.")
rttMonLatestIcmpJitterNumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumNegDS.setDescription("The number of all negative jitter values for packets\nsent from destination to source.")
rttMonLatestIcmpJitterSumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumNegDS.setDescription("The sum of all negative jitter values for packets sent\nfrom destination to source. The number of such values\nis stored in rttMonLatestIcmpJitterNumNegDS.")
rttMonLatestIcmpJitterSum2NegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2NegDS.setDescription("The sum of squares of all negative jitter values for\npackets sent from destination to source.")
rttMonLatestIcmpJitterPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktLoss.setDescription("The number of packets lost.")
rttMonLatestIcmpJPktOutSeqBoth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqBoth.setDescription("The number of packets arrived out of sequence in both\nsource-to-destination and destination-to-source direction.")
rttMonLatestIcmpJPktOutSeqSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqSD.setDescription("The number of packets arrived out of sequence in the \ndirection of source-to-destination.")
rttMonLatestIcmpJPktOutSeqDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqDS.setDescription("The number of packets arrived out of sequence in the\ndirection of destination-to-source.")
rttMonLatestIcmpJitterPktSkipped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktSkipped.setDescription("The number of packets in the operation that could not be \ninitiated due to an internal error.")
rttMonLatestIcmpJitterSense = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 31), RttResponseSense()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSense.setDescription("An application specific sense code for the completion status.")
rttMonLatestIcmpJitterPktLateA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktLateA.setDescription("The number of packets that arrived after the timeout.")
rttMonLatestIcmpJitterMinSucPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinSucPktL.setDescription("The minimum number of packets that are dropped\nsuccessively.")
rttMonLatestIcmpJitterMaxSucPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxSucPktL.setDescription("The maximum number of packets that are dropped\nsuccessively.")
rttMonLatestIcmpJitterOWSumSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSumSD.setDescription("The sum of one way trip time from source to destination.")
rttMonLatestIcmpJitterOWSum2SD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSum2SD.setDescription("The sum of squares of one way trip time from source to\ndestination.")
rttMonLatestIcmpJitterOWMinSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMinSD.setDescription("The minimum of all one way trip time from \nsource to destination.")
rttMonLatestIcmpJitterOWMaxSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMaxSD.setDescription("The maximum of all one way trip time from \nsource to destination.")
rttMonLatestIcmpJitterOWSumDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSumDS.setDescription("The sum of one way trip time from destination to source.")
rttMonLatestIcmpJitterOWSum2DS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSum2DS.setDescription("The sum of squares of one way trip time from \ndestination to source.")
rttMonLatestIcmpJitterOWMinDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMinDS.setDescription("The minimum of all one way trip time from \ndestination to source.")
rttMonLatestIcmpJitterOWMaxDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMaxDS.setDescription("The maximum of all one way trip time from \ndestination to source.")
rttMonLatestIcmpJitterNumOW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumOW.setDescription("The number of successful one way trip time measurements.")
rttMonLatestIcmpJitterAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgJitter.setDescription("The average of positive and negative jitter values\nin Source-to-Destionation and Destination-to-Source\ndirection.")
rttMonLatestIcmpJitterAvgSDJ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgSDJ.setDescription("The average of positive and negative jitter values\nfrom source to destination.")
rttMonLatestIcmpJitterAvgDSJ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgDSJ.setDescription("The average of positive and negative jitter values\nfrom destination to source.")
rttMonLatestIcmpJitterOWAvgSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWAvgSD.setDescription("The average one way trip time from source to destination.")
rttMonLatestIcmpJitterOWAvgDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWAvgDS.setDescription("The average one way trip time from destination to source.")
rttMonLatestIcmpJitterIAJOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJOut.setDescription("Inter-arrival jitter (RFC 1889) at responder.")
rttMonLatestIcmpJitterIAJIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJIn.setDescription("Inter-arrival jitter (RFC 1889) at source.")
ciscoRttMonIcmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 486)).setRevisions(("2005-08-09 00:00",))
if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setContactInfo("Cisco Systems, Inc.\nCustomer Service \n\nPostal: 170 W Tasman Drive\nSan Jose, CA 95134\n\nTel: +1 800 553 NETS\nEmail: cs-ipsla@cisco.com")
if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setDescription("An extension to the CISCO-RTTMON-MIB for ICMP \noperations. The ICMP Jitter operation provides capability \nto measure metrics such as RTT (Round Trip Time), Jitter, \npacket loss, one-way latency by sending ICMP TIMESTAMP \nstream to the destination devices.")
ciscoRttMonIcmpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 0))
ciscoRttMonIcmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 1))
ciscoRttMonIcmpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 2))
ciscoRttMonIcmpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 1))
ciscoRttMonIcmpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 2))

# Augmentions

# Groups

ciscoRttMonIcmpJitterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 2, 1)).setObjects(*(("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMaxSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegDSLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTMax"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2PosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMaxDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTMin"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterPktSkipped"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMinDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMinDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2PosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMinSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2DSHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsIAJOut"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJPktOutSeqBoth"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsRTTSum2Highs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosSDLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsAvgJ"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumNegDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsErrors"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSense"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterAvgJitter"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsBusies"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSumSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2DSLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWAvgDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTSum2"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsPktOutSeqBoth"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterMinSucPktLoss"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumRTTs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJPktOutSeqSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOverThresholds"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJPktOutSeqDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegDSHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumPosSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsPktSkippeds"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTSum"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSumDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterMaxSucPktLoss"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsCompletions"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2SDLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2SDHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSum2SD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterIAJIn"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsPktLateAs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxSucPktL"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegSDLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMinSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosDSLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsRTTMax"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMaxDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWSumSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsRTTMin"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsRTTSum2Lows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumPosDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWSumDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsPktOutSeqSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumRTT"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsRTTSums"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2NegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumNegSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsAvgJSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumOWs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterAvgSDJ"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosDSHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumOW"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSum2DS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumNegDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumPosSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsPktOutSeqDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinSucPktL"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMaxSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumNegSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2NegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosSDHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterAvgDSJ"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsAvgJDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterPktLoss"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegSDHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWAvgSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterPktLateA"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumPosDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterIAJOut"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsPktLosses"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsIAJIn"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinPosDS"), ) )
if mibBuilder.loadTexts: ciscoRttMonIcmpJitterGroup.setDescription("A collection of statistics objects related to\nICMP Jitter Probe.")

# Compliances

ciscoRttMonIcmpJitterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 1, 1)).setObjects(*(("CISCO-RTTMON-ICMP-MIB", "ciscoRttMonIcmpJitterGroup"), ) )
if mibBuilder.loadTexts: ciscoRttMonIcmpJitterCompliance.setDescription("The compliance statement for\n(1) ICMP Jitter operation and statistics")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-RTTMON-ICMP-MIB", PYSNMP_MODULE_ID=ciscoRttMonIcmpMIB)

# Objects
mibBuilder.exportSymbols("CISCO-RTTMON-ICMP-MIB", rttMonIcmpJitterStatsTable=rttMonIcmpJitterStatsTable, rttMonIcmpJitterStatsEntry=rttMonIcmpJitterStatsEntry, rttMonIcmpJitterStatsStartTimeId=rttMonIcmpJitterStatsStartTimeId, rttMonIcmpJitterStatsCompletions=rttMonIcmpJitterStatsCompletions, rttMonIcmpJStatsOverThresholds=rttMonIcmpJStatsOverThresholds, rttMonIcmpJitterStatsNumRTTs=rttMonIcmpJitterStatsNumRTTs, rttMonIcmpJitterStatsRTTSums=rttMonIcmpJitterStatsRTTSums, rttMonIcmpJStatsRTTSum2Lows=rttMonIcmpJStatsRTTSum2Lows, rttMonIcmpJStatsRTTSum2Highs=rttMonIcmpJStatsRTTSum2Highs, rttMonIcmpJitterStatsRTTMin=rttMonIcmpJitterStatsRTTMin, rttMonIcmpJitterStatsRTTMax=rttMonIcmpJitterStatsRTTMax, rttMonIcmpJitterStatsMinPosSD=rttMonIcmpJitterStatsMinPosSD, rttMonIcmpJitterStatsMaxPosSD=rttMonIcmpJitterStatsMaxPosSD, rttMonIcmpJitterStatsNumPosSDs=rttMonIcmpJitterStatsNumPosSDs, rttMonIcmpJitterStatsSumPosSDs=rttMonIcmpJitterStatsSumPosSDs, rttMonIcmpJStatsSum2PosSDLows=rttMonIcmpJStatsSum2PosSDLows, rttMonIcmpJStatsSum2PosSDHighs=rttMonIcmpJStatsSum2PosSDHighs, rttMonIcmpJitterStatsMinNegSD=rttMonIcmpJitterStatsMinNegSD, rttMonIcmpJitterStatsMaxNegSD=rttMonIcmpJitterStatsMaxNegSD, rttMonIcmpJitterStatsNumNegSDs=rttMonIcmpJitterStatsNumNegSDs, rttMonIcmpJitterStatsSumNegSDs=rttMonIcmpJitterStatsSumNegSDs, rttMonIcmpJStatsSum2NegSDLows=rttMonIcmpJStatsSum2NegSDLows, rttMonIcmpJStatsSum2NegSDHighs=rttMonIcmpJStatsSum2NegSDHighs, rttMonIcmpJitterStatsMinPosDS=rttMonIcmpJitterStatsMinPosDS, rttMonIcmpJitterStatsMaxPosDS=rttMonIcmpJitterStatsMaxPosDS, rttMonIcmpJitterStatsNumPosDSes=rttMonIcmpJitterStatsNumPosDSes, rttMonIcmpJitterStatsSumPosDSes=rttMonIcmpJitterStatsSumPosDSes, rttMonIcmpJStatsSum2PosDSLows=rttMonIcmpJStatsSum2PosDSLows, rttMonIcmpJStatsSum2PosDSHighs=rttMonIcmpJStatsSum2PosDSHighs, rttMonIcmpJitterStatsMinNegDS=rttMonIcmpJitterStatsMinNegDS, rttMonIcmpJitterStatsMaxNegDS=rttMonIcmpJitterStatsMaxNegDS, rttMonIcmpJitterStatsNumNegDSes=rttMonIcmpJitterStatsNumNegDSes, rttMonIcmpJitterStatsSumNegDSes=rttMonIcmpJitterStatsSumNegDSes, rttMonIcmpJStatsSum2NegDSLows=rttMonIcmpJStatsSum2NegDSLows, rttMonIcmpJStatsSum2NegDSHighs=rttMonIcmpJStatsSum2NegDSHighs, rttMonIcmpJitterStatsPktLosses=rttMonIcmpJitterStatsPktLosses, rttMonIcmpJStatsPktOutSeqBoth=rttMonIcmpJStatsPktOutSeqBoth, rttMonIcmpJStatsPktOutSeqSDs=rttMonIcmpJStatsPktOutSeqSDs, rttMonIcmpJStatsPktOutSeqDSes=rttMonIcmpJStatsPktOutSeqDSes, rttMonIcmpJitterStatsPktSkippeds=rttMonIcmpJitterStatsPktSkippeds, rttMonIcmpJitterStatsErrors=rttMonIcmpJitterStatsErrors, rttMonIcmpJitterStatsBusies=rttMonIcmpJitterStatsBusies, rttMonIcmpJitterStatsOWSumSDs=rttMonIcmpJitterStatsOWSumSDs, rttMonIcmpJStatsOWSum2SDLows=rttMonIcmpJStatsOWSum2SDLows, rttMonIcmpJStatsOWSum2SDHighs=rttMonIcmpJStatsOWSum2SDHighs, rttMonIcmpJitterStatsOWMinSD=rttMonIcmpJitterStatsOWMinSD, rttMonIcmpJitterStatsOWMaxSD=rttMonIcmpJitterStatsOWMaxSD, rttMonIcmpJitterStatsOWSumDSes=rttMonIcmpJitterStatsOWSumDSes, rttMonIcmpJStatsOWSum2DSLows=rttMonIcmpJStatsOWSum2DSLows, rttMonIcmpJStatsOWSum2DSHighs=rttMonIcmpJStatsOWSum2DSHighs, rttMonIcmpJitterStatsOWMinDS=rttMonIcmpJitterStatsOWMinDS, rttMonIcmpJitterStatsOWMaxDS=rttMonIcmpJitterStatsOWMaxDS, rttMonIcmpJitterStatsNumOWs=rttMonIcmpJitterStatsNumOWs, rttMonIcmpJitterStatsAvgJ=rttMonIcmpJitterStatsAvgJ, rttMonIcmpJitterStatsAvgJSD=rttMonIcmpJitterStatsAvgJSD, rttMonIcmpJitterStatsAvgJDS=rttMonIcmpJitterStatsAvgJDS, rttMonIcmpJitterMinSucPktLoss=rttMonIcmpJitterMinSucPktLoss, rttMonIcmpJitterMaxSucPktLoss=rttMonIcmpJitterMaxSucPktLoss, rttMonIcmpJitterStatsIAJOut=rttMonIcmpJitterStatsIAJOut, rttMonIcmpJitterStatsIAJIn=rttMonIcmpJitterStatsIAJIn, rttMonIcmpJitterStatsPktLateAs=rttMonIcmpJitterStatsPktLateAs, rttMonLatestIcmpJitterOperTable=rttMonLatestIcmpJitterOperTable, rttMonLatestIcmpJitterOperEntry=rttMonLatestIcmpJitterOperEntry, rttMonLatestIcmpJitterNumRTT=rttMonLatestIcmpJitterNumRTT, rttMonLatestIcmpJitterRTTSum=rttMonLatestIcmpJitterRTTSum, rttMonLatestIcmpJitterRTTSum2=rttMonLatestIcmpJitterRTTSum2, rttMonLatestIcmpJitterRTTMin=rttMonLatestIcmpJitterRTTMin, rttMonLatestIcmpJitterRTTMax=rttMonLatestIcmpJitterRTTMax, rttMonLatestIcmpJitterMinPosSD=rttMonLatestIcmpJitterMinPosSD, rttMonLatestIcmpJitterMaxPosSD=rttMonLatestIcmpJitterMaxPosSD, rttMonLatestIcmpJitterNumPosSD=rttMonLatestIcmpJitterNumPosSD, rttMonLatestIcmpJitterSumPosSD=rttMonLatestIcmpJitterSumPosSD, rttMonLatestIcmpJitterSum2PosSD=rttMonLatestIcmpJitterSum2PosSD, rttMonLatestIcmpJitterMinNegSD=rttMonLatestIcmpJitterMinNegSD, rttMonLatestIcmpJitterMaxNegSD=rttMonLatestIcmpJitterMaxNegSD, rttMonLatestIcmpJitterNumNegSD=rttMonLatestIcmpJitterNumNegSD, rttMonLatestIcmpJitterSumNegSD=rttMonLatestIcmpJitterSumNegSD, rttMonLatestIcmpJitterSum2NegSD=rttMonLatestIcmpJitterSum2NegSD, rttMonLatestIcmpJitterMinPosDS=rttMonLatestIcmpJitterMinPosDS, rttMonLatestIcmpJitterMaxPosDS=rttMonLatestIcmpJitterMaxPosDS, rttMonLatestIcmpJitterNumPosDS=rttMonLatestIcmpJitterNumPosDS, rttMonLatestIcmpJitterSumPosDS=rttMonLatestIcmpJitterSumPosDS, rttMonLatestIcmpJitterSum2PosDS=rttMonLatestIcmpJitterSum2PosDS, rttMonLatestIcmpJitterMinNegDS=rttMonLatestIcmpJitterMinNegDS, rttMonLatestIcmpJitterMaxNegDS=rttMonLatestIcmpJitterMaxNegDS, rttMonLatestIcmpJitterNumNegDS=rttMonLatestIcmpJitterNumNegDS, rttMonLatestIcmpJitterSumNegDS=rttMonLatestIcmpJitterSumNegDS, rttMonLatestIcmpJitterSum2NegDS=rttMonLatestIcmpJitterSum2NegDS, rttMonLatestIcmpJitterPktLoss=rttMonLatestIcmpJitterPktLoss, rttMonLatestIcmpJPktOutSeqBoth=rttMonLatestIcmpJPktOutSeqBoth, rttMonLatestIcmpJPktOutSeqSD=rttMonLatestIcmpJPktOutSeqSD, rttMonLatestIcmpJPktOutSeqDS=rttMonLatestIcmpJPktOutSeqDS, rttMonLatestIcmpJitterPktSkipped=rttMonLatestIcmpJitterPktSkipped, rttMonLatestIcmpJitterSense=rttMonLatestIcmpJitterSense, rttMonLatestIcmpJitterPktLateA=rttMonLatestIcmpJitterPktLateA, rttMonLatestIcmpJitterMinSucPktL=rttMonLatestIcmpJitterMinSucPktL, rttMonLatestIcmpJitterMaxSucPktL=rttMonLatestIcmpJitterMaxSucPktL, rttMonLatestIcmpJitterOWSumSD=rttMonLatestIcmpJitterOWSumSD, rttMonLatestIcmpJitterOWSum2SD=rttMonLatestIcmpJitterOWSum2SD, rttMonLatestIcmpJitterOWMinSD=rttMonLatestIcmpJitterOWMinSD, rttMonLatestIcmpJitterOWMaxSD=rttMonLatestIcmpJitterOWMaxSD, rttMonLatestIcmpJitterOWSumDS=rttMonLatestIcmpJitterOWSumDS, rttMonLatestIcmpJitterOWSum2DS=rttMonLatestIcmpJitterOWSum2DS, rttMonLatestIcmpJitterOWMinDS=rttMonLatestIcmpJitterOWMinDS, rttMonLatestIcmpJitterOWMaxDS=rttMonLatestIcmpJitterOWMaxDS, rttMonLatestIcmpJitterNumOW=rttMonLatestIcmpJitterNumOW, rttMonLatestIcmpJitterAvgJitter=rttMonLatestIcmpJitterAvgJitter, rttMonLatestIcmpJitterAvgSDJ=rttMonLatestIcmpJitterAvgSDJ, rttMonLatestIcmpJitterAvgDSJ=rttMonLatestIcmpJitterAvgDSJ, rttMonLatestIcmpJitterOWAvgSD=rttMonLatestIcmpJitterOWAvgSD, rttMonLatestIcmpJitterOWAvgDS=rttMonLatestIcmpJitterOWAvgDS, rttMonLatestIcmpJitterIAJOut=rttMonLatestIcmpJitterIAJOut, rttMonLatestIcmpJitterIAJIn=rttMonLatestIcmpJitterIAJIn, ciscoRttMonIcmpMIB=ciscoRttMonIcmpMIB, ciscoRttMonIcmpMIBNotifs=ciscoRttMonIcmpMIBNotifs, ciscoRttMonIcmpMIBObjects=ciscoRttMonIcmpMIBObjects, ciscoRttMonIcmpMIBConform=ciscoRttMonIcmpMIBConform, ciscoRttMonIcmpCompliances=ciscoRttMonIcmpCompliances, ciscoRttMonIcmpMIBGroups=ciscoRttMonIcmpMIBGroups)

# Groups
mibBuilder.exportSymbols("CISCO-RTTMON-ICMP-MIB", ciscoRttMonIcmpJitterGroup=ciscoRttMonIcmpJitterGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-RTTMON-ICMP-MIB", ciscoRttMonIcmpJitterCompliance=ciscoRttMonIcmpJitterCompliance)
